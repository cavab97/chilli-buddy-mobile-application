{"ast":null,"code":"\"use strict\";\n\nvar TouchHistoryMath = {\n  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {\n    var touchBank = touchHistory.touchBank;\n    var total = 0;\n    var count = 0;\n    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;\n\n    if (oneTouchData !== null) {\n      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {\n        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;\n        count = 1;\n      }\n    } else {\n      for (var i = 0; i < touchBank.length; i++) {\n        var touchTrack = touchBank[i];\n\n        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {\n          var toAdd;\n\n          if (ofCurrent && isXAxis) {\n            toAdd = touchTrack.currentPageX;\n          } else if (ofCurrent && !isXAxis) {\n            toAdd = touchTrack.currentPageY;\n          } else if (!ofCurrent && isXAxis) {\n            toAdd = touchTrack.previousPageX;\n          } else {\n            toAdd = touchTrack.previousPageY;\n          }\n\n          total += toAdd;\n          count++;\n        }\n      }\n    }\n\n    return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n  },\n  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);\n  },\n  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);\n  },\n  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);\n  },\n  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {\n    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);\n  },\n  currentCentroidX: function currentCentroidX(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);\n  },\n  currentCentroidY: function currentCentroidY(touchHistory) {\n    return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);\n  },\n  noCentroid: -1\n};\nmodule.exports = TouchHistoryMath;","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/node_modules/react-native-easy-guesture-responder/src/TouchHistoryMath.js"],"names":["TouchHistoryMath","centroidDimension","touchHistory","touchesChangedAfter","isXAxis","ofCurrent","touchBank","total","count","oneTouchData","numberActiveTouches","indexOfSingleActiveTouch","touchActive","currentTimeStamp","currentPageX","currentPageY","previousPageX","previousPageY","i","length","touchTrack","undefined","toAdd","noCentroid","currentCentroidXOfTouchesChangedAfter","currentCentroidYOfTouchesChangedAfter","previousCentroidXOfTouchesChangedAfter","previousCentroidYOfTouchesChangedAfter","currentCentroidX","currentCentroidY","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar TouchHistoryMath = {\n  /**\n   * This code is optimized and not intended to look beautiful. This allows\n   * computing of touch centroids that have moved after `touchesChangedAfter`\n   * timeStamp. You can compute the current centroid involving all touches\n   * moves after `touchesChangedAfter`, or you can compute the previous\n   * centroid of all touches that were moved after `touchesChangedAfter`.\n   *\n   * @param {TouchHistoryMath} touchHistory Standard Responder touch track\n   * data.\n   * @param {number} touchesChangedAfter timeStamp after which moved touches\n   * are considered \"actively moving\" - not just \"active\".\n   * @param {boolean} isXAxis Consider `x` dimension vs. `y` dimension.\n   * @param {boolean} ofCurrent Compute current centroid for actively moving\n   * touches vs. previous centroid of now actively moving touches.\n   * @return {number} value of centroid in specified dimension.\n   */\n    centroidDimension: function (\n        touchHistory,\n        touchesChangedAfter,\n        isXAxis,\n        ofCurrent\n    ) {\n        var touchBank = touchHistory.touchBank;\n        var total = 0;\n        var count = 0;\n\n        var oneTouchData = touchHistory.numberActiveTouches === 1 ?\n            touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] :\n            null;\n\n        if (oneTouchData !== null) {\n            if (\n                oneTouchData.touchActive &&\n                oneTouchData.currentTimeStamp > touchesChangedAfter\n            ) {\n                total += ofCurrent && isXAxis ?\n                    oneTouchData.currentPageX :\n                    ofCurrent && !isXAxis ?\n                    oneTouchData.currentPageY :\n                    !ofCurrent && isXAxis ?\n                    oneTouchData.previousPageX :\n                    oneTouchData.previousPageY;\n                count = 1;\n            }\n        } else {\n            for (var i = 0; i < touchBank.length; i++) {\n                var touchTrack = touchBank[i];\n                if (\n                    touchTrack !== null &&\n                    touchTrack !== undefined &&\n                    touchTrack.touchActive &&\n                    touchTrack.currentTimeStamp >= touchesChangedAfter\n                ) {\n                    var toAdd; // Yuck, program temporarily in invalid state.\n                    if (ofCurrent && isXAxis) {\n                        toAdd = touchTrack.currentPageX;\n                    } else if (ofCurrent && !isXAxis) {\n                        toAdd = touchTrack.currentPageY;\n                    } else if (!ofCurrent && isXAxis) {\n                        toAdd = touchTrack.previousPageX;\n                    } else {\n                        toAdd = touchTrack.previousPageY;\n                    }\n                    total += toAdd;\n                    count++;\n                }\n            }\n        }\n        return count > 0 ? total / count : TouchHistoryMath.noCentroid;\n    },\n\n    currentCentroidXOfTouchesChangedAfter: function (\n        touchHistory,\n        touchesChangedAfter\n    ) {\n        return TouchHistoryMath.centroidDimension(\n            touchHistory,\n            touchesChangedAfter,\n            true, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    currentCentroidYOfTouchesChangedAfter: function (\n        touchHistory,\n        touchesChangedAfter\n    ) {\n        return TouchHistoryMath.centroidDimension(\n            touchHistory,\n            touchesChangedAfter,\n            false, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    previousCentroidXOfTouchesChangedAfter: function (\n        touchHistory,\n        touchesChangedAfter\n    ) {\n        return TouchHistoryMath.centroidDimension(\n            touchHistory,\n            touchesChangedAfter,\n            true, // isXAxis\n            false // ofCurrent\n        );\n    },\n\n    previousCentroidYOfTouchesChangedAfter: function (\n        touchHistory,\n        touchesChangedAfter\n    ) {\n        return TouchHistoryMath.centroidDimension(\n            touchHistory,\n            touchesChangedAfter,\n            false, // isXAxis\n            false // ofCurrent\n        );\n    },\n\n    currentCentroidX: function (touchHistory) {\n        return TouchHistoryMath.centroidDimension(\n            touchHistory,\n            0, // touchesChangedAfter\n            true, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    currentCentroidY: function (touchHistory) {\n        return TouchHistoryMath.centroidDimension(\n            touchHistory,\n            0, // touchesChangedAfter\n            false, // isXAxis\n            true // ofCurrent\n        );\n    },\n\n    noCentroid: -1\n};\n\nmodule.exports = TouchHistoryMath;\n"]},"metadata":{},"sourceType":"script"}