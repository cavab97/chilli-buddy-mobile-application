{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { routeGroupDataServices } from \"../../services/database\";\nimport { authBackendServices } from \"../../services/backend\";\nvar type = \"routeGroup\";\nvar actions = {\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  READ_RECORD: type + \"READ_RECORD\",\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function readFromDatabase() {\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var routeGroups;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(routeGroupDataServices.readObjects());\n\n            case 3:\n              routeGroups = _context.sent;\n              resolve(routeGroups);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: routeGroups\n                }\n              });\n              _context.next = 13;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport function listenFromDatabase() {\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n\n    try {\n      console.log(\"Start listen to entire route group.\");\n      routeGroupDataServices.listenObjects({\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_FROM_DATABASE_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_FROM_DATABASE_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerFromDatabase() {\n  return function (dispatch) {\n    console.log(\"Remove listener from route groups.\");\n    routeDataServices.unlistenObjects();\n  };\n}\nexport function listenToRecord(_ref) {\n  var _ref$routeGroupId = _ref.routeGroupId,\n      routeGroupId = _ref$routeGroupId === void 0 ? null : _ref$routeGroupId;\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_RECORD\n    });\n    console.log(\"Start listen to route group : \" + routeGroupId + \" \");\n\n    try {\n      routeGroupDataServices.listenObject({\n        objectId: routeGroupId,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_RECORD_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_RECORD_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerToRecord() {\n  return function (dispatch) {\n    console.log(\"Removed route group listener\");\n    routeGroupDataServices.unlistenObject();\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/redux/routeGroup/action.js"],"names":["routeGroupDataServices","authBackendServices","type","actions","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","READ_RECORD","READ_RECORD_SUCCESS","READ_RECORD_ERROR","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPDATE","update","data","payload","readFromDatabase","dispatch","Promise","resolve","reject","readObjects","routeGroups","console","log","error","listenFromDatabase","listenObjects","updateListener","removeListenerFromDatabase","routeDataServices","unlistenObjects","listenToRecord","routeGroupId","listenObject","objectId","removeListenerToRecord","unlistenObject"],"mappings":"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","sourcesContent":["import { routeGroupDataServices } from \"../../services/database\";\r\nimport { authBackendServices } from \"../../services/backend\";\r\n\r\nconst type = \"routeGroup\";\r\n\r\nconst actions = {\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n\r\n  READ_RECORD: type + \"READ_RECORD\",\r\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\r\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\r\n\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function readFromDatabase() {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const routeGroups = await routeGroupDataServices.readObjects();\r\n        resolve(routeGroups);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_SUCCESS,\r\n          payload: { data: routeGroups },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function listenFromDatabase() {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    try {\r\n      console.log(`Start listen to entire route group.`)\r\n      routeGroupDataServices.listenObjects({\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_FROM_DATABASE_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_FROM_DATABASE_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerFromDatabase(){\r\n  return (dispatch) => {\r\n    console.log(\"Remove listener from route groups.\")\r\n    routeDataServices.unlistenObjects();\r\n  }\r\n}\r\n\r\nexport function listenToRecord({ routeGroupId = null,  }) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.READ_RECORD });\r\n    console.log(`Start listen to route group : ${routeGroupId} `)\r\n    try {\r\n      routeGroupDataServices.listenObject({\r\n        objectId: routeGroupId,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_RECORD_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_RECORD_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerToRecord() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed route group listener\")\r\n    routeGroupDataServices.unlistenObject();\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}