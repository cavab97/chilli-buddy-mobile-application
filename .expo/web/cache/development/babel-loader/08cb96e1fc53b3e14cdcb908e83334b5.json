{"ast":null,"code":"import { Notifications } from \"expo\";\nimport Constants from \"expo-constants\";\nimport notificationChannelInit from \"./notificationChannelInit\";\nimport notificationHandler from \"./notificationHandler\";\nexport function notificationInit() {\n  return new Promise(function (resolve, reject) {\n    notificationChannelInit();\n\n    if (Constants.isDevice) {\n      Notifications.getExpoPushTokenAsync().then(function (token) {\n        resolve({\n          token: token\n        });\n      }).catch(function (error) {\n        reject(error);\n      });\n    } else {\n      resolve({\n        token: null\n      });\n    }\n  });\n}\nexport function notificationOn() {\n  Notifications.addListener(notificationHandler);\n}\nexport function notificationClose() {}","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/marslab-library-react-native/utils/system/notification/index.js"],"names":["Notifications","Constants","notificationChannelInit","notificationHandler","notificationInit","Promise","resolve","reject","isDevice","getExpoPushTokenAsync","then","token","catch","error","notificationOn","addListener","notificationClose"],"mappings":"AAAA,SAASA,aAAT,QAA8B,MAA9B;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,OAAOC,uBAAP;AACA,OAAOC,mBAAP;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAC/B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,IAAAA,uBAAuB;;AACvB,QAAID,SAAS,CAACO,QAAd,EAAwB;AACpBR,MAAAA,aAAa,CAACS,qBAAd,GACKC,IADL,CACU,UAAAC,KAAK,EAAI;AACXL,QAAAA,OAAO,CAAC;AAAEK,UAAAA,KAAK,EAALA;AAAF,SAAD,CAAP;AACH,OAHL,EAIKC,KAJL,CAIW,UAAAC,KAAK,EAAI;AACZN,QAAAA,MAAM,CAACM,KAAD,CAAN;AACH,OANL;AAOH,KARD,MAQO;AACHP,MAAAA,OAAO,CAAC;AAAEK,QAAAA,KAAK,EAAG;AAAV,OAAD,CAAP;AACH;AACJ,GAbM,CAAP;AAcH;AAED,OAAO,SAASG,cAAT,GAA0B;AAE7Bd,EAAAA,aAAa,CAACe,WAAd,CAA0BZ,mBAA1B;AACH;AAED,OAAO,SAASa,iBAAT,GAA6B,CAGnC","sourcesContent":["import { Notifications } from \"expo\";\r\nimport Constants from \"expo-constants\";\r\nimport notificationChannelInit from \"./notificationChannelInit\";\r\nimport notificationHandler from \"./notificationHandler\";\r\n\r\nexport function notificationInit() {\r\n    return new Promise((resolve, reject) => {\r\n        notificationChannelInit();\r\n        if (Constants.isDevice) {\r\n            Notifications.getExpoPushTokenAsync()\r\n                .then(token => {\r\n                    resolve({ token });\r\n                })\r\n                .catch(error => {\r\n                    reject(error);\r\n                });\r\n        } else {\r\n            resolve({ token : null});\r\n        }\r\n    });\r\n}\r\n\r\nexport function notificationOn() {\r\n    // prevent memory leaks!\r\n    Notifications.addListener(notificationHandler);\r\n}\r\n\r\nexport function notificationClose() {\r\n    // prevent memory leaks!\r\n    //Notifications.removeListener();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}