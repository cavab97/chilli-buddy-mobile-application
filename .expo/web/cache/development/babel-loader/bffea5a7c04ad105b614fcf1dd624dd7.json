{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { database } from \"../../marslab-library-react-native/utils/helper\";\nvar objectName = \"event\";\nexport function readObjects() {\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).where(\"published.boolean\", \"==\", true).where(\"terminated.by\", \"==\", null).orderBy(\"endTime\", \"desc\").get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread({}, snapshot.data(), {\n          id: snapshot.id\n        });\n\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n\n        var processedData = _objectSpread({}, parent, {\n          created: created,\n          deleted: deleted,\n          updated: updated\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/services/database/event.js"],"names":["database","objectName","readObjects","Promise","resolve","reject","readTable","ref","where","orderBy","get","then","QuerySnapshot","result","forEach","snapshot","data","id","parent","processData","created","deleted","updated","processedData","push","catch","error"],"mappings":";;;;;;AAAA,SAASA,QAAT;AAEA,IAAMC,UAAU,GAAG,OAAnB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCL,IAAAA,QAAQ,CACLM,SADH,CACa;AAAEC,MAAAA,GAAG,EAAKN,UAAL;AAAL,KADb,EAEGO,KAFH,CAES,YAFT,EAEuB,IAFvB,EAE6B,IAF7B,EAGGA,KAHH,CAGS,mBAHT,EAG8B,IAH9B,EAGoC,IAHpC,EAIGA,KAJH,CAIS,eAJT,EAI0B,IAJ1B,EAIgC,IAJhC,EAKGC,OALH,CAKW,SALX,EAKqB,MALrB,EAMGC,GANH,GAOGC,IAPH,CAOQ,UAACC,aAAD,EAAmB;AACvB,UAAMC,MAAM,GAAG,EAAf;AACAD,MAAAA,aAAa,CAACE,OAAd,CAAsB,UAACC,QAAD,EAAc;AAClC,YAAMC,IAAI,qBACLD,QAAQ,CAACC,IAAT,EADK;AAERC,UAAAA,EAAE,EAAEF,QAAQ,CAACE;AAFL,UAAV;;AAKA,YAAMC,MAAM,GAAGlB,QAAQ,CAACmB,WAAT,CAAqB;AAAEH,UAAAA,IAAI,EAAJA;AAAF,SAArB,CAAf;AACA,YAAMI,OAAO,GAAGpB,QAAQ,CAACmB,WAAT,CAAqB;AAAEH,UAAAA,IAAI,EAAEA,IAAI,CAACI;AAAb,SAArB,CAAhB;AACA,YAAMC,OAAO,GAAGrB,QAAQ,CAACmB,WAAT,CAAqB;AAAEH,UAAAA,IAAI,EAAEA,IAAI,CAACK;AAAb,SAArB,CAAhB;AACA,YAAMC,OAAO,GAAGtB,QAAQ,CAACmB,WAAT,CAAqB;AAAEH,UAAAA,IAAI,EAAEA,IAAI,CAACM;AAAb,SAArB,CAAhB;;AAEA,YAAMC,aAAa,qBAAQL,MAAR;AAAgBE,UAAAA,OAAO,EAAPA,OAAhB;AAAyBC,UAAAA,OAAO,EAAPA,OAAzB;AAAkCC,UAAAA,OAAO,EAAPA;AAAlC,UAAnB;;AAEAT,QAAAA,MAAM,CAACW,IAAP,CAAYD,aAAZ;AACD,OAdD;AAeAnB,MAAAA,OAAO,CAACS,MAAD,CAAP;AACD,KAzBH,EA0BGY,KA1BH,CA0BS,UAACC,KAAD,EAAW;AAChBrB,MAAAA,MAAM,CAACqB,KAAD,CAAN;AACD,KA5BH;AA6BD,GA9BM,CAAP;AA+BD","sourcesContent":["import { database } from \"../../marslab-library-react-native/utils/helper\";\r\n\r\nconst objectName = \"event\";\r\n\r\nexport function readObjects() {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({ ref: `${objectName}Packaging0` })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .where(\"published.boolean\", \"==\", true)\r\n      .where(\"terminated.by\", \"==\", null)\r\n      .orderBy(\"endTime\",\"desc\")\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            id: snapshot.id,\r\n          };\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const processedData = { ...parent, created, deleted, updated };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}