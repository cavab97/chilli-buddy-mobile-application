{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { transactionBackendServices } from \"../../services/backend\";\nimport { transactionStorageServices } from \"../../services/storage\";\nvar type = \"transaction\";\nvar actions = {\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPLOAD_TO_STORAGE: type + \"UPLOAD_TO_STORAGE\",\n  UPLOAD_TO_STORAGE_SUCCESS: type + \"UPLOAD_TO_STORAGE_SUCCESS\",\n  UPLOAD_TO_STORAGE_ERROR: type + \"UPLOAD_TO_STORAGE_ERROR\",\n  UPDATE_UPLOAD_PROGRESS: type + \"UPDATE_UPLOAD_PROGRESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function submitToBackend(data, actionName) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.SUBMIT_TO_BACKEND\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var result, _data, routeId, shopId, routeTicketId, missionId, payment;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = {};\n              _context.prev = 1;\n              _context.t0 = actionName;\n              _context.next = _context.t0 === \"create\" ? 5 : 11;\n              break;\n\n            case 5:\n              _data = data, routeId = _data.routeId, shopId = _data.shopId, routeTicketId = _data.routeTicketId, missionId = _data.missionId, payment = _data.payment;\n              data = {\n                routeIds: [routeId],\n                shopIds: [shopId],\n                routeTicketIds: [routeTicketId],\n                missionIds: [missionId],\n                payment: payment\n              };\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(transactionBackendServices.create({\n                data: data\n              }));\n\n            case 9:\n              result = _context.sent;\n              return _context.abrupt(\"break\", 11);\n\n            case 11:\n              resolve(result);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context.next = 20;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t1 = _context[\"catch\"](1);\n              console.log(_context.t1);\n              reject(_context.t1);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_ERROR,\n                payload: {\n                  error: _context.t1\n                }\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 15]], Promise);\n    });\n  };\n}\nexport function uploadToStorage(data) {\n  return function (dispatch) {\n    dispatch({\n      type: actions.UPLOAD_TO_STORAGE\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var result, id, file, name;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              result = {};\n              id = data.id, file = data.file, name = data.name;\n              _context2.prev = 2;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(transactionStorageServices.uploadFile({\n                id: id,\n                file: file,\n                name: name,\n                progressListener: function progressListener(snap) {\n                  var progress = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n                  dispatch({\n                    type: actions.UPDATE_UPLOAD_PROGRESS,\n                    payload: {\n                      data: progress\n                    }\n                  });\n                }\n              }));\n\n            case 5:\n              result = _context2.sent;\n              resolve(result);\n              dispatch({\n                type: actions.UPLOAD_TO_STORAGE_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context2.next = 15;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.log(_context2.t0);\n              reject(_context2.t0);\n              dispatch({\n                type: actions.UPLOAD_TO_STORAGE_ERROR,\n                payload: {\n                  error: _context2.t0\n                }\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[2, 10]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/redux/transaction/action.js"],"names":["transactionBackendServices","transactionStorageServices","type","actions","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPLOAD_TO_STORAGE","UPLOAD_TO_STORAGE_SUCCESS","UPLOAD_TO_STORAGE_ERROR","UPDATE_UPLOAD_PROGRESS","UPDATE","update","data","payload","submitToBackend","actionName","dispatch","getState","Promise","resolve","reject","result","routeId","shopId","routeTicketId","missionId","payment","routeIds","shopIds","routeTicketIds","missionIds","create","console","log","error","uploadToStorage","id","file","name","uploadFile","progressListener","snap","progress","Math","round","bytesTransferred","totalBytes"],"mappings":"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","sourcesContent":["import { transactionBackendServices } from \"../../services/backend\";\r\nimport { transactionStorageServices } from \"../../services/storage\";\r\n\r\nconst type = \"transaction\";\r\n\r\nconst actions = {\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPLOAD_TO_STORAGE: type + \"UPLOAD_TO_STORAGE\",\r\n  UPLOAD_TO_STORAGE_SUCCESS: type + \"UPLOAD_TO_STORAGE_SUCCESS\",\r\n  UPLOAD_TO_STORAGE_ERROR : type + \"UPLOAD_TO_STORAGE_ERROR\",\r\n  UPDATE_UPLOAD_PROGRESS : type+ \"UPDATE_UPLOAD_PROGRESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function submitToBackend(data, actionName) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n\r\n      try {\r\n        switch (actionName) {\r\n          case \"create\":\r\n            const { routeId, shopId, routeTicketId, missionId, payment } = data;\r\n            data = {\r\n              routeIds: [routeId],\r\n              shopIds: [shopId],\r\n              routeTicketIds: [routeTicketId],\r\n              missionIds: [missionId],\r\n              payment\r\n            };\r\n\r\n            result = await transactionBackendServices.create({ data });\r\n            break;\r\n        }\r\n\r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function uploadToStorage(data) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.UPLOAD_TO_STORAGE });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n      const { id, file, name } = data;\r\n  \r\n      try {\r\n        result = await transactionStorageServices\r\n        .uploadFile({ \r\n          id, \r\n          file, \r\n          name,  \r\n          progressListener: snap => {\r\n            const progress = Math.round(\r\n              (snap.bytesTransferred / snap.totalBytes) * 100\r\n            );\r\n            dispatch({\r\n              type: actions.UPDATE_UPLOAD_PROGRESS,\r\n              payload: { data: progress },\r\n            });\r\n          }\r\n        });\r\n        \r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.UPLOAD_TO_STORAGE_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.UPLOAD_TO_STORAGE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n} \r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}