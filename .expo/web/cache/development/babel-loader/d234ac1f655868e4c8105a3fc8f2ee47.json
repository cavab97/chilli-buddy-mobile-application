{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"firebase\";\nimport 'firebase/firestore';\nimport { api } from \"../../../settings\";\nimport { isTimestampObj, timestampObjToMomentObj } from \"../../common\";\nvar firebaseConfig = api.firebaseConfig;\nvar firestore = firebase.firestore;\nvar firebaseApp = !firebase.apps.length && firebase.initializeApp(firebaseConfig);\nexport var GeoPoint = function GeoPoint(latitude, longitude) {\n  return new firebase.firestore.GeoPoint(latitude, longitude);\n};\nexport function readData(_ref) {\n  var ref = _ref.ref;\n  return new Promise(function (resolve, reject) {\n    firestore().doc(ref).get().then(function (snapshot) {\n      var exists = snapshot.exists;\n      var stringObject = String(ref + \" not found in database.\");\n\n      if (exists) {\n        resolve(snapshot.data());\n      } else {\n        throw stringObject;\n      }\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport var readRecord = function readRecord(_ref2) {\n  var ref = _ref2.ref;\n  return firestore().doc(ref);\n};\nexport var readTable = function readTable(_ref3) {\n  var ref = _ref3.ref;\n  return firestore().collection(ref);\n};\nexport function processData(_ref4) {\n  var data = _ref4.data;\n  var processedData = {};\n  Object.keys(data).forEach(function (field) {\n    var stagedData = processDataStage(data[field]);\n    return processedData = _objectSpread(_objectSpread({}, processedData), {}, _defineProperty({}, field, stagedData));\n  });\n  return processedData;\n}\n\nfunction processDataStage(data) {\n  if (isTimestampObj(data)) {\n    return timestampObjToMomentObj(data);\n  }\n\n  return data;\n}","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/marslab-library-react-native/utils/helper/database/firestore.js"],"names":["firebase","api","isTimestampObj","timestampObjToMomentObj","firebaseConfig","firestore","firebaseApp","apps","length","initializeApp","GeoPoint","latitude","longitude","readData","ref","Promise","resolve","reject","doc","get","then","snapshot","exists","stringObject","String","data","catch","error","readRecord","readTable","collection","processData","processedData","Object","keys","forEach","field","stagedData","processDataStage"],"mappings":";;;;;;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AAEA,SAASC,GAAT;AAEA,SACIC,cADJ,EAEIC,uBAFJ;IAKQC,c,GAAmBH,G,CAAnBG,c;IAEAC,S,GAAcL,Q,CAAdK,S;AAER,IAAMC,WAAW,GAAG,CAACN,QAAQ,CAACO,IAAT,CAAcC,MAAf,IAAyBR,QAAQ,CAACS,aAAT,CAAuBL,cAAvB,CAA7C;AAEA,OAAO,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAWC,SAAX;AAAA,SACtB,IAAIZ,QAAQ,CAACK,SAAT,CAAmBK,QAAvB,CAAgCC,QAAhC,EAA0CC,SAA1C,CADsB;AAAA,CAAjB;AAGP,OAAO,SAASC,QAAT,OAA2B;AAAA,MAAPC,GAAO,QAAPA,GAAO;AAChC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCZ,IAAAA,SAAS,GACNa,GADH,CACOJ,GADP,EAEGK,GAFH,GAGGC,IAHH,CAGQ,UAAAC,QAAQ,EAAI;AAChB,UAAMC,MAAM,GAAGD,QAAQ,CAACC,MAAxB;AACA,UAAMC,YAAY,GAAGC,MAAM,CAACV,GAAG,GAAG,yBAAP,CAA3B;;AACA,UAAIQ,MAAJ,EAAY;AACVN,QAAAA,OAAO,CAACK,QAAQ,CAACI,IAAT,EAAD,CAAP;AACD,OAFD,MAEO;AACL,cAAMF,YAAN;AACD;AACF,KAXH,EAYGG,KAZH,CAYS,UAAAC,KAAK,EAAI;AACdV,MAAAA,MAAM,CAACU,KAAD,CAAN;AACD,KAdH;AAeD,GAhBM,CAAP;AAiBD;AAED,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,MAAEd,GAAF,SAAEA,GAAF;AAAA,SAAWT,SAAS,GAAGa,GAAZ,CAAgBJ,GAAhB,CAAX;AAAA,CAAnB;AAEP,OAAO,IAAMe,SAAS,GAAG,SAAZA,SAAY;AAAA,MAAGf,GAAH,SAAGA,GAAH;AAAA,SAAaT,SAAS,GAAGyB,UAAZ,CAAuBhB,GAAvB,CAAb;AAAA,CAAlB;AAEP,OAAO,SAASiB,WAAT,QAA+B;AAAA,MAARN,IAAQ,SAARA,IAAQ;AACpC,MAAIO,aAAa,GAAG,EAApB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYT,IAAZ,EAAkBU,OAAlB,CAA0B,UAAAC,KAAK,EAAI;AACjC,QAAMC,UAAU,GAAGC,gBAAgB,CAACb,IAAI,CAACW,KAAD,CAAL,CAAnC;AAEA,WAAQJ,aAAa,mCAAQA,aAAR,2BAAwBI,KAAxB,EAAgCC,UAAhC,EAArB;AACD,GAJD;AAMA,SAAOL,aAAP;AACD;;AAED,SAASM,gBAAT,CAA0Bb,IAA1B,EAAgC;AAC9B,MAAIvB,cAAc,CAACuB,IAAD,CAAlB,EAA0B;AACxB,WAAOtB,uBAAuB,CAACsB,IAAD,CAA9B;AACD;;AAED,SAAOA,IAAP;AACD","sourcesContent":["import firebase from \"firebase\";\r\nimport 'firebase/firestore';\r\n\r\nimport { api } from \"../../../settings\";\r\n\r\nimport {\r\n    isTimestampObj,\r\n    timestampObjToMomentObj\r\n  } from \"../../common\";\r\n\r\nconst { firebaseConfig } = api;\r\n\r\nconst { firestore } = firebase;\r\n\r\nconst firebaseApp = !firebase.apps.length && firebase.initializeApp(firebaseConfig);\r\n\r\nexport const GeoPoint = (latitude, longitude) =>\r\n  new firebase.firestore.GeoPoint(latitude, longitude);\r\n\r\nexport function readData({ ref }) {\r\n  return new Promise((resolve, reject) => {\r\n    firestore()\r\n      .doc(ref)\r\n      .get()\r\n      .then(snapshot => {\r\n        const exists = snapshot.exists;\r\n        const stringObject = String(ref + \" not found in database.\");\r\n        if (exists) {\r\n          resolve(snapshot.data());\r\n        } else {\r\n          throw stringObject;\r\n        }\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport const readRecord = ({ref}) => firestore().doc(ref);\r\n\r\nexport const readTable = ({ ref }) => firestore().collection(ref);\r\n\r\nexport function processData({ data }) {\r\n  let processedData = {};\r\n\r\n  Object.keys(data).forEach(field => {\r\n    const stagedData = processDataStage(data[field]);\r\n\r\n    return (processedData = { ...processedData, [field]: stagedData });\r\n  });\r\n\r\n  return processedData;\r\n}\r\n\r\nfunction processDataStage(data) {\r\n  if (isTimestampObj(data)) {\r\n    return timestampObjToMomentObj(data);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}