{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport firebase from \"firebase\";\nimport { api } from \"../../../settings\";\nvar firebaseConfig = api.firebaseConfig;\nvar firebaseApp = !firebase.apps.length && firebase.initializeApp(firebaseConfig);\nexport var providers = {\n  EMAIL: \"email\",\n  PHONE: \"phone\",\n  FACEBOOK: \"facebook\",\n  GOOGLE: \"google\",\n  GITHUB: \"github\",\n  TWITTER: \"twitter\"\n};\nexport function signup(provider, info) {\n  return new Promise(function _callee(resolve, reject) {\n    var user;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            user = null;\n            _context.prev = 1;\n            _context.t0 = provider;\n            _context.next = _context.t0 === providers.EMAIL ? 5 : 9;\n            break;\n\n          case 5:\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(firebase.auth().createUserWithEmailAndPassword(info.email, info.password));\n\n          case 7:\n            user = _context.sent;\n            return _context.abrupt(\"break\", 9);\n\n          case 9:\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t1 = _context[\"catch\"](1);\n            reject({\n              error: _context.t1\n            });\n\n          case 14:\n            resolve({\n              user: user\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 11]], Promise);\n  });\n}\nexport function login(provider, info) {\n  return new Promise(function _callee2(resolve, reject) {\n    var user, captchaVerifier, confirmationResult, fbAuthProvider, googleAuthProvider, ghAuthProvider, twitterAuthProvider;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            user = null;\n            _context2.prev = 1;\n            _context2.t0 = provider;\n            _context2.next = _context2.t0 === providers.EMAIL ? 5 : _context2.t0 === providers.PHONE ? 10 : _context2.t0 === providers.FACEBOOK ? 16 : _context2.t0 === providers.GOOGLE ? 22 : _context2.t0 === providers.GITHUB ? 28 : _context2.t0 === providers.TWITTER ? 34 : 40;\n            break;\n\n          case 5:\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithEmailAndPassword(info.email, info.password));\n\n          case 7:\n            user = _context2.sent;\n            resolve(user);\n            return _context2.abrupt(\"break\", 40);\n\n          case 10:\n            captchaVerifier = {\n              type: \"recaptcha\",\n              verify: function verify() {\n                return Promise.resolve(info.recaptchaToken);\n              }\n            };\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithPhoneNumber(info.phoneNumber, captchaVerifier));\n\n          case 13:\n            confirmationResult = _context2.sent;\n            resolve(confirmationResult);\n            return _context2.abrupt(\"break\", 40);\n\n          case 16:\n            fbAuthProvider = new firebase.auth.FacebookAuthProvider();\n            _context2.next = 19;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithPopup(fbAuthProvider));\n\n          case 19:\n            user = _context2.sent;\n            resolve(user);\n            return _context2.abrupt(\"break\", 40);\n\n          case 22:\n            googleAuthProvider = new firebase.auth.GoogleAuthProvider();\n            _context2.next = 25;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithPopup(googleAuthProvider));\n\n          case 25:\n            user = _context2.sent;\n            resolve(user);\n            return _context2.abrupt(\"break\", 40);\n\n          case 28:\n            ghAuthProvider = new firebase.auth.GithubAuthProvider();\n            _context2.next = 31;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithPopup(ghAuthProvider));\n\n          case 31:\n            user = _context2.sent;\n            resolve(user);\n            return _context2.abrupt(\"break\", 40);\n\n          case 34:\n            twitterAuthProvider = new firebase.auth.TwitterAuthProvider();\n            _context2.next = 37;\n            return _regeneratorRuntime.awrap(firebase.auth().signInWithPopup(twitterAuthProvider));\n\n          case 37:\n            user = _context2.sent;\n            resolve(user);\n            return _context2.abrupt(\"break\", 40);\n\n          case 40:\n            _context2.next = 45;\n            break;\n\n          case 42:\n            _context2.prev = 42;\n            _context2.t1 = _context2[\"catch\"](1);\n            reject(_context2.t1);\n\n          case 45:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[1, 42]], Promise);\n  });\n}\nexport function logout() {\n  return new Promise(function _callee3(resolve, reject) {\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            firebase.auth().signOut().then(resolve({\n              status: \"Sign Out Success\"\n            })).catch(function (error) {\n              reject(error);\n            });\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n}\nexport function isAuthenticated(onIdTokenChanged) {\n  firebase.auth().onIdTokenChanged(onIdTokenChanged);\n}\nexport function resetPassword(email) {\n  return new Promise(function _callee4(resolve, reject) {\n    return _regeneratorRuntime.async(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            firebase.auth().sendPasswordResetEmail().then(resolve({\n              status: \"Reset Password Email Sent\"\n            })).catch(function (error) {\n              reject(error);\n            });\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n}","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/marslab-library-react-native/utils/helper/auth/firebaseAuth.js"],"names":["firebase","api","firebaseConfig","firebaseApp","apps","length","initializeApp","providers","EMAIL","PHONE","FACEBOOK","GOOGLE","GITHUB","TWITTER","signup","provider","info","Promise","resolve","reject","user","auth","createUserWithEmailAndPassword","email","password","error","login","signInWithEmailAndPassword","captchaVerifier","type","verify","recaptchaToken","signInWithPhoneNumber","phoneNumber","confirmationResult","fbAuthProvider","FacebookAuthProvider","signInWithPopup","googleAuthProvider","GoogleAuthProvider","ghAuthProvider","GithubAuthProvider","twitterAuthProvider","TwitterAuthProvider","logout","signOut","then","status","catch","isAuthenticated","onIdTokenChanged","resetPassword","sendPasswordResetEmail"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,GAAT;IAEQC,c,GAAmBD,G,CAAnBC,c;AAER,IAAMC,WAAW,GACf,CAACH,QAAQ,CAACI,IAAT,CAAcC,MAAf,IAAyBL,QAAQ,CAACM,aAAT,CAAuBJ,cAAvB,CAD3B;AAGA,OAAO,IAAMK,SAAS,GAAG;AACvBC,EAAAA,KAAK,EAAE,OADgB;AAEvBC,EAAAA,KAAK,EAAE,OAFgB;AAGvBC,EAAAA,QAAQ,EAAE,UAHa;AAIvBC,EAAAA,MAAM,EAAE,QAJe;AAKvBC,EAAAA,MAAM,EAAE,QALe;AAMvBC,EAAAA,OAAO,EAAE;AANc,CAAlB;AASP,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,IAA1B,EAAgC;AACrC,SAAO,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,IADa,GACN,IADM;AAAA;AAAA,0BAGPL,QAHO;AAAA,4CAIRR,SAAS,CAACC,KAJF;AAAA;;AAAA;AAAA;AAAA,6CAKER,QAAQ,CAClBqB,IADU,GAEVC,8BAFU,CAEqBN,IAAI,CAACO,KAF1B,EAEiCP,IAAI,CAACQ,QAFtC,CALF;;AAAA;AAKXJ,YAAAA,IALW;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAYfD,YAAAA,MAAM,CAAC;AAAEM,cAAAA,KAAK;AAAP,aAAD,CAAN;;AAZe;AAcjBP,YAAAA,OAAO,CAAC;AAAEE,cAAAA,IAAI,EAAJA;AAAF,aAAD,CAAP;;AAdiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AAgBD;AAED,OAAO,SAASM,KAAT,CAAeX,QAAf,EAAyBC,IAAzB,EAA+B;AACpC,SAAO,IAAIC,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,IADa,GACN,IADM;AAAA;AAAA,2BAGPL,QAHO;AAAA,8CAIRR,SAAS,CAACC,KAJF,wBAURD,SAAS,CAACE,KAVF,yBAqBRF,SAAS,CAACG,QArBF,yBA0BRH,SAAS,CAACI,MA1BF,yBA+BRJ,SAAS,CAACK,MA/BF,yBAoCRL,SAAS,CAACM,OApCF;AAAA;;AAAA;AAAA;AAAA,6CAKEb,QAAQ,CAClBqB,IADU,GAEVM,0BAFU,CAEiBX,IAAI,CAACO,KAFtB,EAE6BP,IAAI,CAACQ,QAFlC,CALF;;AAAA;AAKXJ,YAAAA,IALW;AAQXF,YAAAA,OAAO,CAACE,IAAD,CAAP;AARW;;AAAA;AAWLQ,YAAAA,eAXK,GAWa;AACtBC,cAAAA,IAAI,EAAE,WADgB;AAEtBC,cAAAA,MAAM,EAAE;AAAA,uBAAMb,OAAO,CAACC,OAAR,CAAgBF,IAAI,CAACe,cAArB,CAAN;AAAA;AAFc,aAXb;AAAA;AAAA,6CAgBsB/B,QAAQ,CACtCqB,IAD8B,GAE9BW,qBAF8B,CAERhB,IAAI,CAACiB,WAFG,EAEUL,eAFV,CAhBtB;;AAAA;AAgBLM,YAAAA,kBAhBK;AAmBXhB,YAAAA,OAAO,CAACgB,kBAAD,CAAP;AAnBW;;AAAA;AAsBPC,YAAAA,cAtBO,GAsBU,IAAInC,QAAQ,CAACqB,IAAT,CAAce,oBAAlB,EAtBV;AAAA;AAAA,6CAuBEpC,QAAQ,CAACqB,IAAT,GAAgBgB,eAAhB,CAAgCF,cAAhC,CAvBF;;AAAA;AAuBXf,YAAAA,IAvBW;AAwBXF,YAAAA,OAAO,CAACE,IAAD,CAAP;AAxBW;;AAAA;AA2BPkB,YAAAA,kBA3BO,GA2Bc,IAAItC,QAAQ,CAACqB,IAAT,CAAckB,kBAAlB,EA3Bd;AAAA;AAAA,6CA4BEvC,QAAQ,CAACqB,IAAT,GAAgBgB,eAAhB,CAAgCC,kBAAhC,CA5BF;;AAAA;AA4BXlB,YAAAA,IA5BW;AA6BXF,YAAAA,OAAO,CAACE,IAAD,CAAP;AA7BW;;AAAA;AAgCPoB,YAAAA,cAhCO,GAgCU,IAAIxC,QAAQ,CAACqB,IAAT,CAAcoB,kBAAlB,EAhCV;AAAA;AAAA,6CAiCEzC,QAAQ,CAACqB,IAAT,GAAgBgB,eAAhB,CAAgCG,cAAhC,CAjCF;;AAAA;AAiCXpB,YAAAA,IAjCW;AAkCXF,YAAAA,OAAO,CAACE,IAAD,CAAP;AAlCW;;AAAA;AAqCPsB,YAAAA,mBArCO,GAqCe,IAAI1C,QAAQ,CAACqB,IAAT,CAAcsB,mBAAlB,EArCf;AAAA;AAAA,6CAsCE3C,QAAQ,CAACqB,IAAT,GAAgBgB,eAAhB,CAAgCK,mBAAhC,CAtCF;;AAAA;AAsCXtB,YAAAA,IAtCW;AAuCXF,YAAAA,OAAO,CAACE,IAAD,CAAP;AAvCW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4CfD,YAAAA,MAAM,cAAN;;AA5Ce;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AA+CD;AAED,OAAO,SAASyB,MAAT,GAAkB;AACvB,SAAO,IAAI3B,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AACjBnB,YAAAA,QAAQ,CACLqB,IADH,GAEGwB,OAFH,GAGGC,IAHH,CAGQ5B,OAAO,CAAC;AAAE6B,cAAAA,MAAM,EAAE;AAAV,aAAD,CAHf,EAIGC,KAJH,CAIS,UAAAvB,KAAK,EAAI;AACdN,cAAAA,MAAM,CAACM,KAAD,CAAN;AACD,aANH;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AASD;AAED,OAAO,SAASwB,eAAT,CAAyBC,gBAAzB,EAA2C;AAChDlD,EAAAA,QAAQ,CAACqB,IAAT,GAAgB6B,gBAAhB,CAAiCA,gBAAjC;AACD;AAED,OAAO,SAASC,aAAT,CAAuB5B,KAAvB,EAA8B;AACnC,SAAO,IAAIN,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AACjBnB,YAAAA,QAAQ,CACLqB,IADH,GAEG+B,sBAFH,GAGGN,IAHH,CAGQ5B,OAAO,CAAC;AAAE6B,cAAAA,MAAM,EAAE;AAAV,aAAD,CAHf,EAIGC,KAJH,CAIS,UAAAvB,KAAK,EAAI;AACdN,cAAAA,MAAM,CAACM,KAAD,CAAN;AACD,aANH;;AADiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AASD","sourcesContent":["import firebase from \"firebase\";\r\nimport { api } from \"../../../settings\";\r\n\r\nconst { firebaseConfig } = api;\r\n\r\nconst firebaseApp =\r\n  !firebase.apps.length && firebase.initializeApp(firebaseConfig);\r\n\r\nexport const providers = {\r\n  EMAIL: \"email\",\r\n  PHONE: \"phone\",\r\n  FACEBOOK: \"facebook\",\r\n  GOOGLE: \"google\",\r\n  GITHUB: \"github\",\r\n  TWITTER: \"twitter\"\r\n};\r\n\r\nexport function signup(provider, info) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let user = null;\r\n    try {\r\n      switch (provider) {\r\n        case providers.EMAIL:\r\n          user = await firebase\r\n            .auth()\r\n            .createUserWithEmailAndPassword(info.email, info.password);\r\n          break;\r\n        default:\r\n      }\r\n    } catch (error) {\r\n      reject({ error });\r\n    }\r\n    resolve({ user });\r\n  });\r\n}\r\n\r\nexport function login(provider, info) {\r\n  return new Promise(async (resolve, reject) => {\r\n    let user = null;\r\n    try {\r\n      switch (provider) {\r\n        case providers.EMAIL:\r\n          user = await firebase\r\n            .auth()\r\n            .signInWithEmailAndPassword(info.email, info.password);\r\n          resolve(user);\r\n          break;\r\n        case providers.PHONE:\r\n          const captchaVerifier = {\r\n            type: \"recaptcha\",\r\n            verify: () => Promise.resolve(info.recaptchaToken)\r\n          };\r\n\r\n          const confirmationResult = await firebase\r\n            .auth()\r\n            .signInWithPhoneNumber(info.phoneNumber, captchaVerifier);\r\n          resolve(confirmationResult);\r\n          break;\r\n        case providers.FACEBOOK:\r\n          let fbAuthProvider = new firebase.auth.FacebookAuthProvider();\r\n          user = await firebase.auth().signInWithPopup(fbAuthProvider);\r\n          resolve(user);\r\n          break;\r\n        case providers.GOOGLE:\r\n          let googleAuthProvider = new firebase.auth.GoogleAuthProvider();\r\n          user = await firebase.auth().signInWithPopup(googleAuthProvider);\r\n          resolve(user);\r\n          break;\r\n        case providers.GITHUB:\r\n          let ghAuthProvider = new firebase.auth.GithubAuthProvider();\r\n          user = await firebase.auth().signInWithPopup(ghAuthProvider);\r\n          resolve(user);\r\n          break;\r\n        case providers.TWITTER:\r\n          let twitterAuthProvider = new firebase.auth.TwitterAuthProvider();\r\n          user = await firebase.auth().signInWithPopup(twitterAuthProvider);\r\n          resolve(user);\r\n          break;\r\n        default:\r\n      }\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport function logout() {\r\n  return new Promise(async (resolve, reject) => {\r\n    firebase\r\n      .auth()\r\n      .signOut()\r\n      .then(resolve({ status: \"Sign Out Success\" }))\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function isAuthenticated(onIdTokenChanged) {\r\n  firebase.auth().onIdTokenChanged(onIdTokenChanged);\r\n}\r\n\r\nexport function resetPassword(email) {\r\n  return new Promise(async (resolve, reject) => {\r\n    firebase\r\n      .auth()\r\n      .sendPasswordResetEmail()\r\n      .then(resolve({ status: \"Reset Password Email Sent\" }))\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}