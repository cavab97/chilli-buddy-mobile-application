{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport store from \"../../redux/store\";\nimport onLogin from \"../onLogIn\";\nimport cacheFonts from \"../../utils/system/cacheFonts\";\nimport { importedFonts, importedIcons } from \"../../settings/assets\";\nimport { notification_Init, read_System_Infomation_From_Database, read_System_Infomation_From_Device, third_Party_Service_Init, app_On_Booted, app_On_Boot_Failed } from \"../../redux/system/actions\";\nimport { permissionsRegistration } from \"../../utils/system\";\nimport { permission, api } from \"../../settings\";\nimport { checkAuthorization } from \"../../redux/auth/actions\";\nimport customOnBoot from \"../../../routes/onBoot\";\nvar requiredPermissions = permission.requiredPermissions;\n\n_loadAssetsAsync = function _loadAssetsAsync() {\n  var fontAssets, iconAssets;\n  return _regeneratorRuntime.async(function _loadAssetsAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          fontAssets = cacheFonts(importedFonts);\n          iconAssets = cacheFonts(importedIcons);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Promise.all([].concat(_toConsumableArray(fontAssets), _toConsumableArray(iconAssets))));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nexport default onBoot = function onBoot() {\n  var loadAssets, thirdPartyServiceInit, readSystemInfomationFromDevice, readSystemInfomationFromDatabase, bootCustom, notificationInit, user, isLoggedIn;\n  return _regeneratorRuntime.async(function onBoot$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          permissionsRegistration(requiredPermissions);\n          loadAssets = _loadAssetsAsync();\n          thirdPartyServiceInit = store.dispatch(third_Party_Service_Init());\n          readSystemInfomationFromDevice = store.dispatch(read_System_Infomation_From_Device());\n          readSystemInfomationFromDatabase = store.dispatch(read_System_Infomation_From_Database());\n          bootCustom = customOnBoot();\n          notificationInit = store.dispatch(notification_Init());\n          _context2.next = 9;\n          return _regeneratorRuntime.awrap(store.dispatch(checkAuthorization()));\n\n        case 9:\n          user = _context2.sent;\n          isLoggedIn = user !== null;\n          _context2.next = 13;\n          return _regeneratorRuntime.awrap(Promise.all([loadAssets, user, bootCustom, readSystemInfomationFromDatabase, notificationInit]).then(function () {\n            console.log(\"onbooted\");\n            store.dispatch(app_On_Booted());\n          }).catch(function (error) {\n            console.log(error);\n            store.dispatch(app_On_Boot_Failed(error));\n          }));\n\n        case 13:\n          if (isLoggedIn) {\n            onLogin();\n          }\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/marslab-library-react-native/routes/onBoot/index.js"],"names":["store","onLogin","cacheFonts","importedFonts","importedIcons","notification_Init","read_System_Infomation_From_Database","read_System_Infomation_From_Device","third_Party_Service_Init","app_On_Booted","app_On_Boot_Failed","permissionsRegistration","permission","api","checkAuthorization","customOnBoot","requiredPermissions","_loadAssetsAsync","fontAssets","iconAssets","Promise","all","onBoot","loadAssets","thirdPartyServiceInit","dispatch","readSystemInfomationFromDevice","readSystemInfomationFromDatabase","bootCustom","notificationInit","user","isLoggedIn","then","console","log","catch","error"],"mappings":";;AAAA,OAAOA,KAAP;AACA,OAAOC,OAAP;AAEA,OAAOC,UAAP;AACA,SAASC,aAAT,EAAwBC,aAAxB;AAEA,SACIC,iBADJ,EAEIC,oCAFJ,EAGIC,kCAHJ,EAIIC,wBAJJ,EAKIC,aALJ,EAMIC,kBANJ;AASA,SAASC,uBAAT;AACA,SAASC,UAAT,EAAsBC,GAAtB;AAEA,SAASC,kBAAT;AAEA,OAAOC,YAAP;IAEQC,mB,GAAwBJ,U,CAAxBI,mB;;AAGRC,gBAAgB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,UAAAA,UADS,GACIhB,UAAU,CAACC,aAAD,CADd;AAETgB,UAAAA,UAFS,GAEIjB,UAAU,CAACE,aAAD,CAFd;AAAA;AAAA,2CAGTgB,OAAO,CAACC,GAAR,8BAAgBH,UAAhB,sBAA+BC,UAA/B,GAHS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAMA,eAAeG,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBX,UAAAA,uBAAuB,CAACK,mBAAD,CAAvB;AAEMO,UAAAA,UAHc,GAGDN,gBAAgB,EAHf;AAKdO,UAAAA,qBALc,GAKUxB,KAAK,CAACyB,QAAN,CAC1BjB,wBAAwB,EADE,CALV;AASdkB,UAAAA,8BATc,GASmB1B,KAAK,CAACyB,QAAN,CACnClB,kCAAkC,EADC,CATnB;AAYdoB,UAAAA,gCAZc,GAYqB3B,KAAK,CAACyB,QAAN,CACrCnB,oCAAoC,EADC,CAZrB;AAgBdsB,UAAAA,UAhBc,GAgBDb,YAAY,EAhBX;AAkBdc,UAAAA,gBAlBc,GAkBK7B,KAAK,CAACyB,QAAN,CAAepB,iBAAiB,EAAhC,CAlBL;AAAA;AAAA,2CAoBDL,KAAK,CAACyB,QAAN,CAAeX,kBAAkB,EAAjC,CApBC;;AAAA;AAoBdgB,UAAAA,IApBc;AAqBdC,UAAAA,UArBc,GAqBDD,IAAI,KAAK,IArBR;AAAA;AAAA,2CAuBdV,OAAO,CAACC,GAAR,CAAY,CACdE,UADc,EAEdO,IAFc,EAGdF,UAHc,EAIdD,gCAJc,EAKdE,gBALc,CAAZ,EAODG,IAPC,CAOI,YAAM;AACRC,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAlC,YAAAA,KAAK,CAACyB,QAAN,CAAehB,aAAa,EAA5B;AACH,WAVC,EAWD0B,KAXC,CAWK,UAAAC,KAAK,EAAI;AACZH,YAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;AACApC,YAAAA,KAAK,CAACyB,QAAN,CAAef,kBAAkB,CAAC0B,KAAD,CAAjC;AACH,WAdC,CAvBc;;AAAA;AAuCpB,cAAIL,UAAJ,EAAgB;AACZ9B,YAAAA,OAAO;AACV;;AAzCmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB","sourcesContent":["import store from \"../../redux/store\";\r\nimport onLogin from \"../onLogIn\";\r\n\r\nimport cacheFonts from \"../../utils/system/cacheFonts\";\r\nimport { importedFonts, importedIcons } from \"../../settings/assets\";\r\n\r\nimport {\r\n    notification_Init,\r\n    read_System_Infomation_From_Database,\r\n    read_System_Infomation_From_Device,\r\n    third_Party_Service_Init,\r\n    app_On_Booted, \r\n    app_On_Boot_Failed\r\n} from \"../../redux/system/actions\";\r\n\r\nimport { permissionsRegistration } from \"../../utils/system\";\r\nimport { permission , api } from \"../../settings\";\r\n\r\nimport { checkAuthorization } from \"../../redux/auth/actions\";\r\n\r\nimport customOnBoot from \"../../../routes/onBoot\"\r\n\r\nconst { requiredPermissions } = permission\r\n\r\n\r\n_loadAssetsAsync = async () => {\r\n    const fontAssets = cacheFonts(importedFonts);\r\n    const iconAssets = cacheFonts(importedIcons);\r\n    await Promise.all([...fontAssets, ...iconAssets]);\r\n};\r\n\r\nexport default onBoot = async () => {\r\n    permissionsRegistration(requiredPermissions);\r\n\r\n    const loadAssets = _loadAssetsAsync();\r\n\r\n    const thirdPartyServiceInit = store.dispatch(\r\n        third_Party_Service_Init()\r\n    );\r\n\r\n    const readSystemInfomationFromDevice = store.dispatch(\r\n        read_System_Infomation_From_Device()\r\n    ); \r\n    const readSystemInfomationFromDatabase = store.dispatch(\r\n        read_System_Infomation_From_Database()\r\n    );\r\n\r\n    const bootCustom = customOnBoot()\r\n\r\n    const notificationInit = store.dispatch(notification_Init());\r\n\r\n    const user = await store.dispatch(checkAuthorization());\r\n    const isLoggedIn = user !== null;\r\n\r\n    await Promise.all([\r\n        loadAssets,\r\n        user,\r\n        bootCustom,\r\n        readSystemInfomationFromDatabase,\r\n        notificationInit\r\n    ])\r\n        .then(() => {\r\n            console.log(\"onbooted\")\r\n            store.dispatch(app_On_Booted());\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            store.dispatch(app_On_Boot_Failed(error));\r\n        });\r\n\r\n    if (isLoggedIn) {\r\n        onLogin();\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}