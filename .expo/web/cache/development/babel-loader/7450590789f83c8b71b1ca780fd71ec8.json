{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { routeTicketDataServices as objectDataServices } from \"@services/database\";\nimport { routeTicketBackendServices } from \"@services/backend\";\nvar type = \"routeTicket\";\nvar actions = {\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  READ_BY_USER: type + \"READ_BY_USER\",\n  READ_BY_USER_SUCCESS: type + \"READ_BY_USER_SUCCESS\",\n  READ_BY_USER_ERROR: type + \"READ_BY_USER_ERROR\",\n  READ_BY_OBJECTGROUP: type + \"READ_BY_OBJECTGROUP\",\n  READ_BY_OBJECTGROUP_SUCCESS: type + \"READ_BY_OBJECTGROUP_SUCCESS\",\n  READ_BY_OBJECTGROUP_ERROR: type + \"READ_BY_OBJECTGROUP_ERROR\",\n  READ_RECORD: type + \"READ_RECORD\",\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function readFromDatabase() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_BY_USER\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var uid, routes;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              uid = getState().Auth.user.uid;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(objectDataServices.readObjects({\n                groupId: uid\n              }));\n\n            case 4:\n              routes = _context.sent;\n              resolve(routes);\n              dispatch({\n                type: actions.READ_BY_USER_SUCCESS,\n                payload: {\n                  data: routes\n                }\n              });\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_BY_USER_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    });\n  };\n}\nexport function readByObjectGroup(_ref) {\n  var _ref$routeId = _ref.routeId,\n      routeId = _ref$routeId === void 0 ? null : _ref$routeId;\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_BY_OBJECTGROUP\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var routes;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(objectDataServices.readObjectsByObjectGroup({\n                groupId: routeId\n              }));\n\n            case 3:\n              routes = _context2.sent;\n              resolve(routes);\n              dispatch({\n                type: actions.READ_BY_OBJECTGROUP_SUCCESS,\n                payload: {\n                  data: routes\n                }\n              });\n              _context2.next = 13;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n              reject(_context2.t0);\n              dispatch({\n                type: actions.READ_BY_OBJECTGROUP_ERROR,\n                payload: {\n                  error: _context2.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport function listenFromDatabase() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n\n    try {\n      var uid = getState().Auth.user.uid;\n      console.log(\"Start listen to route ticket belong to user : \" + uid + \" \");\n      objectDataServices.listenObjects({\n        groupId: uid,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_FROM_DATABASE_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_FROM_DATABASE_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerFromDatabase() {\n  return function (dispatch) {\n    console.log(\"Removed listener to route ticket\");\n    objectDataServices.unlistenObjects();\n  };\n}\nexport function listenToRecord(_ref2) {\n  var _ref2$routeTicketId = _ref2.routeTicketId,\n      routeTicketId = _ref2$routeTicketId === void 0 ? null : _ref2$routeTicketId;\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_RECORD\n    });\n    console.log(\"Start listen to route ticket : \" + routeTicketId + \" \");\n\n    try {\n      objectDataServices.listenObject({\n        objectId: routeTicketId,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_RECORD_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_RECORD_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerToRecord() {\n  return function (dispatch) {\n    console.log(\"Removed route Ticket listener\");\n    objectDataServices.unlistenObject();\n    dispatch(update(null));\n  };\n}\nexport function submitToBackend(data, actionName) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.SUBMIT_TO_BACKEND\n    });\n    return new Promise(function _callee3(resolve, reject) {\n      var result, routeId, routeIds;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              result = {};\n              routeId = data.routeId;\n              routeIds = [routeId];\n              _context3.prev = 3;\n              _context3.t0 = actionName;\n              _context3.next = _context3.t0 === \"create\" ? 7 : 11;\n              break;\n\n            case 7:\n              _context3.next = 9;\n              return _regeneratorRuntime.awrap(routeTicketBackendServices.create({\n                data: {\n                  routeIds: routeIds\n                }\n              }));\n\n            case 9:\n              result = _context3.sent;\n              return _context3.abrupt(\"break\", 11);\n\n            case 11:\n              resolve(result);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context3.next = 20;\n              break;\n\n            case 15:\n              _context3.prev = 15;\n              _context3.t1 = _context3[\"catch\"](3);\n              console.log(_context3.t1);\n              reject(_context3.t1);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_ERROR,\n                payload: {\n                  error: _context3.t1\n                }\n              });\n\n            case 20:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[3, 15]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/redux/routeTicket/action.js"],"names":["routeTicketDataServices","objectDataServices","routeTicketBackendServices","type","actions","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","READ_BY_USER","READ_BY_USER_SUCCESS","READ_BY_USER_ERROR","READ_BY_OBJECTGROUP","READ_BY_OBJECTGROUP_SUCCESS","READ_BY_OBJECTGROUP_ERROR","READ_RECORD","READ_RECORD_SUCCESS","READ_RECORD_ERROR","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPDATE","update","data","payload","readFromDatabase","dispatch","getState","Promise","resolve","reject","uid","Auth","user","readObjects","groupId","routes","console","log","error","readByObjectGroup","routeId","readObjectsByObjectGroup","listenFromDatabase","listenObjects","updateListener","removeListenerFromDatabase","unlistenObjects","listenToRecord","routeTicketId","listenObject","objectId","removeListenerToRecord","unlistenObject","submitToBackend","actionName","result","routeIds","create"],"mappings":"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","sourcesContent":["import { routeTicketDataServices as objectDataServices } from \"@services/database\";\r\nimport { routeTicketBackendServices } from \"@services/backend\";\r\n\r\nconst type = \"routeTicket\";\r\n\r\nconst actions = {\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n\r\n  READ_BY_USER: type + \"READ_BY_USER\",\r\n  READ_BY_USER_SUCCESS: type + \"READ_BY_USER_SUCCESS\",\r\n  READ_BY_USER_ERROR: type + \"READ_BY_USER_ERROR\",\r\n\r\n  READ_BY_OBJECTGROUP: type + \"READ_BY_OBJECTGROUP\",\r\n  READ_BY_OBJECTGROUP_SUCCESS: type + \"READ_BY_OBJECTGROUP_SUCCESS\",\r\n  READ_BY_OBJECTGROUP_ERROR: type + \"READ_BY_OBJECTGROUP_ERROR\",\r\n\r\n  READ_RECORD: type + \"READ_RECORD\",\r\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\r\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\r\n\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function readFromDatabase() {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_BY_USER });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n\r\n        const { uid } = getState().Auth.user;\r\n        const routes = await objectDataServices.readObjects({\r\n          groupId: uid,\r\n        });\r\n\r\n        resolve(routes);\r\n        dispatch({\r\n          type: actions.READ_BY_USER_SUCCESS,\r\n          payload: { data: routes },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_BY_USER_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function readByObjectGroup({routeId = null}) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_BY_OBJECTGROUP });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const routes = await objectDataServices.readObjectsByObjectGroup({\r\n          groupId: routeId,\r\n        });\r\n\r\n        resolve(routes);\r\n        dispatch({\r\n          type: actions.READ_BY_OBJECTGROUP_SUCCESS,\r\n          payload: { data: routes },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_BY_OBJECTGROUP_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function listenFromDatabase() {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    try {\r\n      const { uid } = getState().Auth.user\r\n      \r\n      console.log(`Start listen to route ticket belong to user : ${uid} `)\r\n      objectDataServices.listenObjects({\r\n        groupId: uid,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_FROM_DATABASE_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_FROM_DATABASE_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerFromDatabase() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed listener to route ticket\")\r\n    objectDataServices.unlistenObjects();\r\n  }\r\n}\r\n\r\nexport function listenToRecord({ routeTicketId = null }) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.READ_RECORD });\r\n    console.log(`Start listen to route ticket : ${routeTicketId} `)\r\n    try {\r\n      objectDataServices.listenObject({\r\n        objectId: routeTicketId,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_RECORD_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_RECORD_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerToRecord() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed route Ticket listener\")\r\n    objectDataServices.unlistenObject();\r\n    dispatch(update(null))\r\n  }\r\n}\r\n\r\nexport function submitToBackend(data, actionName) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n\r\n      const { routeId } = data;\r\n      const routeIds = [routeId];\r\n\r\n      try {\r\n        switch (actionName) {\r\n          case \"create\":\r\n            result = await routeTicketBackendServices.create({data: {routeIds}})\r\n            break;\r\n        }\r\n\r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}