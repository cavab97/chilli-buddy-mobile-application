{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { database } from \"../../marslab-library-react-native/utils/helper\";\nvar objectGroupName = \"routeGroup\";\nvar objectName = \"route\";\nexport var GeoPoint = database.GeoPoint;\nexport function readAllObjects() {\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).where(\"published.by\", \">\", \"\").where(\"terminated.by\", \"==\", null).where(\"ended.boolean\", \"==\", false).get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread(_objectSpread(_objectSpread({}, snapshot.data()), snapshot.data().d), {}, {\n          id: snapshot.id\n        });\n\n        delete data[\"d\"];\n        var parent = database.processData({\n          data: data\n        });\n        var winner = database.processData({\n          data: data.winner\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n\n        var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n          created: created,\n          deleted: deleted,\n          updated: updated,\n          winner: winner\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readObjects(_ref) {\n  var groupId = _ref.groupId;\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: objectGroupName + \"Packaging0/\" + groupId + \"/\" + objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).where(\"published.by\", \">\", \"\").where(\"terminated.by\", \"==\", null).where(\"ended.boolean\", \"==\", false).get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread(_objectSpread(_objectSpread({}, snapshot.data()), snapshot.data().d), {}, {\n          id: snapshot.id\n        });\n\n        delete data[\"d\"];\n        var parent = database.processData({\n          data: data\n        });\n        var winner = database.processData({\n          data: data.winner\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n\n        var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n          created: created,\n          deleted: deleted,\n          updated: updated,\n          winner: winner\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readObject(_ref2) {\n  var id = _ref2.id;\n  return new Promise(function (resolve, reject) {\n    database.readData({\n      ref: objectName + \"Private0/\" + id\n    }).then(function (snapshot) {\n      var data = _objectSpread(_objectSpread(_objectSpread({}, snapshot), snapshot.d), {}, {\n        id: snapshot.id\n      });\n\n      delete data[\"d\"];\n      var parent = database.processData({\n        data: data\n      });\n      var winner = database.processData({\n        data: data.winner\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n\n      var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n        created: created,\n        deleted: deleted,\n        updated: updated,\n        winner: winner\n      });\n\n      resolve(processedData);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\n\nvar listener = function listener() {};\n\nexport function listenObjects(_ref3) {\n  var _ref3$groupId = _ref3.groupId,\n      groupId = _ref3$groupId === void 0 ? null : _ref3$groupId,\n      _ref3$updateListener = _ref3.updateListener,\n      updateListener = _ref3$updateListener === void 0 ? function () {} : _ref3$updateListener;\n  var twoWeeks = new Date();\n  twoWeeks.setDate(new Date().getDate() - 14);\n  listener = database.readTable({\n    ref: objectName + \"Private0\"\n  }).where(\"routeGroupId\", \"array-contains\", groupId).where(\"deleted.by\", \"==\", null).where(\"published.boolean\", \"==\", true).where(\"terminated.by\", \"==\", null).where(\"endTime\", \">\", twoWeeks).onSnapshot(function (QuerySnapshot) {\n    var result = [];\n    QuerySnapshot.forEach(function (snapshot) {\n      var data = _objectSpread(_objectSpread(_objectSpread({}, snapshot.data()), snapshot.data().d), {}, {\n        id: snapshot.id\n      });\n\n      delete data[\"d\"];\n      var parent = database.processData({\n        data: data\n      });\n      var winner = database.processData({\n        data: data.winner\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n\n      var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n        created: created,\n        deleted: deleted,\n        updated: updated,\n        winner: winner\n      });\n\n      result.push(processedData);\n    });\n    updateListener(result);\n  });\n}\nexport function unlistenObjects() {\n  listener();\n}\n\nvar objectListener = function objectListener() {};\n\nexport function listenObject(_ref4) {\n  var _ref4$objectId = _ref4.objectId,\n      objectId = _ref4$objectId === void 0 ? null : _ref4$objectId,\n      _ref4$updateListener = _ref4.updateListener,\n      updateListener = _ref4$updateListener === void 0 ? function () {} : _ref4$updateListener;\n  objectListener = database.readRecord({\n    ref: objectName + \"Private0/\" + objectId\n  }).onSnapshot(function (snapshot) {\n    var data = _objectSpread(_objectSpread(_objectSpread({}, snapshot.data()), snapshot.data().d), {}, {\n      id: snapshot.id\n    });\n\n    delete data[\"d\"];\n    var parent = database.processData({\n      data: data\n    });\n    var winner = database.processData({\n      data: data.winner\n    });\n    var created = database.processData({\n      data: data.created\n    });\n    var deleted = database.processData({\n      data: data.deleted\n    });\n    var updated = database.processData({\n      data: data.updated\n    });\n\n    var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n      created: created,\n      deleted: deleted,\n      updated: updated,\n      winner: winner\n    });\n\n    updateListener(processedData);\n  });\n}\nexport function unlistenObject() {\n  objectListener();\n}\nexport function readExpiredRoutes() {\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).where(\"published.boolean\", \"==\", true).where(\"endTime\", \"<\", new Date(Date.now())).where(\"terminated.by\", \"==\", null).get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n          id: snapshot.id\n        });\n\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n        var winner = database.processData({\n          data: data.winner\n        });\n        var published = database.processData({\n          data: data.published\n        });\n        var terminated = database.processData({\n          data: data.terminated\n        });\n        var pending = database.processData({\n          data: data.pending\n        });\n        var ongoing = database.processData({\n          data: data.ongoing\n        });\n        var ended = database.processData({\n          data: data.ended\n        });\n\n        var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n          created: created,\n          deleted: deleted,\n          updated: updated,\n          winner: winner,\n          published: published,\n          terminated: terminated,\n          pending: pending,\n          ongoing: ongoing,\n          ended: ended\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readEndedRoutes() {\n  return new Promise(function (resolve, reject) {\n    var twoWeeks = new Date();\n    twoWeeks.setDate(new Date().getDate() - 14);\n    database.readTable({\n      ref: objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).where(\"assignCompleted\", \"==\", true).where(\"ended.at\", \">\", twoWeeks).where(\"terminated.by\", \"==\", null).get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n          id: snapshot.id\n        });\n\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n        var winner = database.processData({\n          data: data.winner\n        });\n        var published = database.processData({\n          data: data.published\n        });\n        var terminated = database.processData({\n          data: data.terminated\n        });\n        var pending = database.processData({\n          data: data.pending\n        });\n        var ongoing = database.processData({\n          data: data.ongoing\n        });\n        var ended = database.processData({\n          data: data.ended\n        });\n\n        var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n          created: created,\n          deleted: deleted,\n          updated: updated,\n          winner: winner,\n          published: published,\n          terminated: terminated,\n          pending: pending,\n          ongoing: ongoing,\n          ended: ended\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/services/database/route.js"],"names":["database","objectGroupName","objectName","GeoPoint","readAllObjects","Promise","resolve","reject","readTable","ref","where","get","then","QuerySnapshot","result","forEach","snapshot","data","d","id","parent","processData","winner","created","deleted","updated","processedData","push","catch","error","readObjects","groupId","readObject","readData","listener","listenObjects","updateListener","twoWeeks","Date","setDate","getDate","onSnapshot","unlistenObjects","objectListener","listenObject","objectId","readRecord","unlistenObject","readExpiredRoutes","now","published","terminated","pending","ongoing","ended","readEndedRoutes"],"mappings":"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","sourcesContent":["import { database } from \"../../marslab-library-react-native/utils/helper\";\r\n\r\nconst objectGroupName = \"routeGroup\";\r\nconst objectName = \"route\";\r\n\r\nexport const GeoPoint = database.GeoPoint;\r\n\r\nexport function readAllObjects() {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({ ref: `${objectName}Packaging0` })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .where(\"published.by\", \">\", \"\")\r\n      .where(\"terminated.by\", \"==\", null)\r\n      .where(\"ended.boolean\", \"==\", false)\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            ...snapshot.data().d,\r\n            id: snapshot.id,\r\n          };\r\n          delete data[\"d\"];\r\n\r\n          const parent = database.processData({ data });\r\n          const winner = database.processData({ data: data.winner });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const processedData = { ...parent, created, deleted, updated, winner };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function readObjects({ groupId }) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({\r\n        ref: `${objectGroupName}Packaging0/${groupId}/${objectName}Packaging0`,\r\n      })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .where(\"published.by\", \">\", \"\")\r\n      .where(\"terminated.by\", \"==\", null)\r\n      .where(\"ended.boolean\", \"==\", false)\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            ...snapshot.data().d,\r\n            id: snapshot.id,\r\n          };\r\n          delete data[\"d\"];\r\n\r\n          const parent = database.processData({ data });\r\n          const winner = database.processData({ data: data.winner });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const processedData = { ...parent, created, deleted, updated,winner };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function readObject({ id }) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readData({ ref: `${objectName}Private0/${id}` })\r\n      .then((snapshot) => {\r\n        const data = {\r\n          ...snapshot,\r\n          ...snapshot.d,\r\n          id: snapshot.id,\r\n        };\r\n\r\n        delete data[\"d\"];\r\n\r\n        const parent = database.processData({ data });\r\n        const winner = database.processData({ data: data.winner });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n\r\n        const processedData = { ...parent, created, deleted, updated ,winner};\r\n\r\n        resolve(processedData);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nlet listener = () => {};\r\n\r\nexport function listenObjects({ groupId = null, updateListener = () => {} }) {\r\n  const twoWeeks = new Date();\r\n  twoWeeks.setDate(new Date().getDate() - 14);\r\n\r\n  listener = database\r\n    .readTable({\r\n      ref: `${objectName}Private0`,\r\n    })\r\n    .where(\"routeGroupId\", \"array-contains\", groupId)\r\n    .where(\"deleted.by\", \"==\", null)\r\n    .where(\"published.boolean\", \"==\", true)\r\n    .where(\"terminated.by\", \"==\", null)\r\n    .where(\"endTime\", \">\", twoWeeks)\r\n    .onSnapshot((QuerySnapshot) => {\r\n      const result = [];\r\n      QuerySnapshot.forEach((snapshot) => {\r\n        const data = {\r\n          ...snapshot.data(),\r\n          ...snapshot.data().d,\r\n          id: snapshot.id,\r\n        };\r\n        delete data[\"d\"];\r\n\r\n        const parent = database.processData({ data });\r\n        const winner = database.processData({ data: data.winner });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n\r\n        const processedData = { ...parent, created, deleted, updated, winner };\r\n\r\n        result.push(processedData);\r\n      });\r\n      updateListener(result);\r\n    });\r\n}\r\n\r\nexport function unlistenObjects() {\r\n  listener();\r\n}\r\n\r\nlet objectListener = () => {};\r\n\r\nexport function listenObject({ objectId = null, updateListener = () => {} }) {\r\n  objectListener = database\r\n    .readRecord({ ref: `${objectName}Private0/${objectId}` })\r\n    .onSnapshot((snapshot) => {\r\n      const data = {\r\n        ...snapshot.data(),\r\n        ...snapshot.data().d,\r\n        id: snapshot.id,\r\n      };\r\n      delete data[\"d\"];\r\n\r\n      const parent = database.processData({ data });\r\n      const winner = database.processData({ data: data.winner });\r\n      const created = database.processData({ data: data.created });\r\n      const deleted = database.processData({ data: data.deleted });\r\n      const updated = database.processData({ data: data.updated });\r\n\r\n      const processedData = { ...parent, created, deleted, updated,winner };\r\n\r\n      updateListener(processedData);\r\n    });\r\n}\r\n\r\nexport function unlistenObject() {\r\n  objectListener();\r\n}\r\n\r\nexport function readExpiredRoutes() {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({ ref: `${objectName}Packaging0` })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .where(\"published.boolean\", \"==\", true)\r\n      .where(\"endTime\", \"<\", new Date(Date.now()))\r\n      .where(\"terminated.by\", \"==\", null)\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            id: snapshot.id,\r\n          };\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const winner = database.processData({ data: data.winner });\r\n          const published = database.processData({ data: data.published });\r\n          const terminated = database.processData({ data: data.terminated });\r\n          const pending = database.processData({ data: data.pending });\r\n          const ongoing = database.processData({ data: data.ongoing });\r\n          const ended = database.processData({ data: data.ended });\r\n\r\n          const processedData = {\r\n            ...parent,\r\n            created,\r\n            deleted,\r\n            updated,\r\n            winner,\r\n            published,\r\n            terminated,\r\n            pending,\r\n            ongoing,\r\n            ended\r\n          };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function readEndedRoutes() {\r\n  return new Promise((resolve, reject) => {\r\n    const twoWeeks = new Date();\r\n    twoWeeks.setDate(new Date().getDate() - 14);\r\n\r\n    database\r\n      .readTable({ ref: `${objectName}Packaging0` })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .where(\"assignCompleted\", \"==\", true)\r\n      .where(\"ended.at\", \">\", twoWeeks)\r\n      .where(\"terminated.by\", \"==\", null)\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            id: snapshot.id,\r\n          };\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const winner = database.processData({ data: data.winner });\r\n          const published = database.processData({ data: data.published });\r\n          const terminated = database.processData({ data: data.terminated });\r\n          const pending = database.processData({ data: data.pending });\r\n          const ongoing = database.processData({ data: data.ongoing });\r\n          const ended = database.processData({ data: data.ended });\r\n\r\n          const processedData = {\r\n            ...parent,\r\n            created,\r\n            deleted,\r\n            updated,\r\n            winner,\r\n            published,\r\n            terminated,\r\n            pending,\r\n            ongoing,\r\n            ended\r\n          };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}