{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { userDataServices } from \"../../services/database\";\nimport { authBackendServices, userBackendServices } from \"../../services/backend\";\nvar type = \"user\";\nvar actions = {\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function readFromDatabase() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var uid, user;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              uid = getState().Auth.user.uid;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(userDataServices.readOwnInfo({\n                uid: uid\n              }));\n\n            case 4:\n              user = _context.sent;\n              resolve(user);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: user\n                }\n              });\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    });\n  };\n}\nexport function submitToBackend(data, actionName) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.SUBMIT_TO_BACKEND\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var result;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              result = {};\n              _context2.prev = 1;\n              _context2.t0 = actionName;\n              _context2.next = _context2.t0 === \"updateProfile\" ? 5 : _context2.t0 === \"unionNotificationToken\" ? 9 : _context2.t0 === \"removeNotificationToken\" ? 13 : 17;\n              break;\n\n            case 5:\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(authBackendServices.updateProfile({\n                data: data\n              }));\n\n            case 7:\n              result = _context2.sent;\n              return _context2.abrupt(\"break\", 17);\n\n            case 9:\n              _context2.next = 11;\n              return _regeneratorRuntime.awrap(userBackendServices.unionNotisToken({\n                data: data\n              }));\n\n            case 11:\n              result = _context2.sent;\n              return _context2.abrupt(\"break\", 17);\n\n            case 13:\n              _context2.next = 15;\n              return _regeneratorRuntime.awrap(userBackendServices.removeNotisToken({\n                data: data\n              }));\n\n            case 15:\n              result = _context2.sent;\n              return _context2.abrupt(\"break\", 17);\n\n            case 17:\n              resolve(result);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context2.next = 26;\n              break;\n\n            case 21:\n              _context2.prev = 21;\n              _context2.t1 = _context2[\"catch\"](1);\n              console.log(_context2.t1);\n              reject(_context2.t1);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_ERROR,\n                payload: {\n                  error: _context2.t1\n                }\n              });\n\n            case 26:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 21]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/marslab-library-react-native/redux/user/action.js"],"names":["userDataServices","authBackendServices","userBackendServices","type","actions","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPDATE","update","data","payload","readFromDatabase","dispatch","getState","Promise","resolve","reject","uid","Auth","user","readOwnInfo","console","log","error","submitToBackend","actionName","result","updateProfile","unionNotisToken","removeNotisToken"],"mappings":"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","sourcesContent":["import { userDataServices } from \"../../services/database\";\r\nimport { authBackendServices, userBackendServices } from \"../../services/backend\";\r\n\r\nconst type = \"user\";\r\n\r\nconst actions = {\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function readFromDatabase() {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const uid = getState().Auth.user.uid;\r\n        const user = await userDataServices.readOwnInfo({ uid });\r\n        resolve(user);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_SUCCESS,\r\n          payload: { data: user },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function submitToBackend(data, actionName) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n      try {\r\n        switch (actionName) {\r\n          case \"updateProfile\":\r\n            result = await authBackendServices.updateProfile({ data });\r\n            break;\r\n          case \"unionNotificationToken\":\r\n            result = await userBackendServices.unionNotisToken({ data });\r\n            break;\r\n          case \"removeNotificationToken\":\r\n            result = await userBackendServices.removeNotisToken({ data });\r\n            break;\r\n        }\r\n\r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}