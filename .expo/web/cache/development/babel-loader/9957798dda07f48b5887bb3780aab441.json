{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { rewardDataServices as objectDataServices } from \"../../services/database\";\nvar type = \"reward\";\nvar actions = {\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  READ_FROM_EVENT_REWARDS: type + \"READ_FROM_EVENT_REWARDS\",\n  READ_FROM_EVENT_REWARDS_SUCCESS: type + \"READ_FROM_EVENT_REWARDS_SUCCESS\",\n  READ_FROM_EVENT_REWARDS_ERROR: type + \"READ_FROM_EVENT_REWARDS_ERROR\",\n  READ_FROM_OWN_REWARDS: type + \"READ_FROM_OWN_REWARDS\",\n  READ_FROM_OWN_REWARDS_SUCCESS: type + \"READ_FROM_OWN_REWARDS_SUCCESS\",\n  READ_FROM_OWN_REWARDS_ERROR: type + \"READ_FROM_OWN_REWARDS_ERROR\",\n  READ_RECORD: type + \"READ_RECORD\",\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  MODAL_CONTROL: type + 'MODAL_CONTROL',\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport var modalControl = function modalControl() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  return {\n    type: actions.MODAL_CONTROL,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function readFromDatabase(_ref) {\n  var _ref$routeId = _ref.routeId,\n      routeId = _ref$routeId === void 0 ? null : _ref$routeId;\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var rewards;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(objectDataServices.readObjects({\n                groupId: routeId\n              }));\n\n            case 3:\n              rewards = _context.sent;\n              resolve(rewards);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: rewards\n                }\n              });\n              _context.next = 13;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport function readEventRewards(_ref2) {\n  var _ref2$eventId = _ref2.eventId,\n      eventId = _ref2$eventId === void 0 ? null : _ref2$eventId;\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_EVENT_REWARDS\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var eventRewards;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(objectDataServices.readEventRewards({\n                eventId: eventId\n              }));\n\n            case 3:\n              eventRewards = _context2.sent;\n              resolve(eventRewards);\n              dispatch({\n                type: actions.READ_FROM_EVENT_REWARDS_SUCCESS,\n                payload: {\n                  data: eventRewards\n                }\n              });\n              _context2.next = 13;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n              reject(_context2.t0);\n              dispatch({\n                type: actions.READ_FROM_EVENT_REWARDS_ERROR,\n                payload: {\n                  error: _context2.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport function listenFromDatabase(_ref3) {\n  var _ref3$routeId = _ref3.routeId,\n      routeId = _ref3$routeId === void 0 ? null : _ref3$routeId;\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n\n    try {\n      console.log(\"Start listen to rewards belong to route : \" + routeId + \" \");\n      objectDataServices.listenObjects({\n        groupId: routeId,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_FROM_DATABASE_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_FROM_DATABASE_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerFromDatabase() {\n  return function (dispatch) {\n    console.log(\"Removed listener from rewards\");\n    objectDataServices.unlistenObjects();\n  };\n}\nexport function listenToOwnRewards() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_OWN_REWARDS\n    });\n\n    try {\n      console.log(\"Start listen to own rewards \");\n      var uid = getState().Auth.user.uid;\n      objectDataServices.listenOwnRewards({\n        uid: uid,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_FROM_OWN_REWARDS_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_FROM_OWN_REWARDS_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerFromOwnRewards() {\n  return function (dispatch) {\n    console.log(\"Removed listener from own rewards\");\n    objectDataServices.unlistenOwnRewards();\n  };\n}\nexport function listenToRecord(_ref4) {\n  var _ref4$rewardId = _ref4.rewardId,\n      rewardId = _ref4$rewardId === void 0 ? null : _ref4$rewardId;\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_RECORD\n    });\n    console.log(\"Start listen to reward : \" + rewardId + \" \");\n\n    try {\n      objectDataServices.listenObject({\n        objectId: rewardId,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_RECORD_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_RECORD_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerToRecord() {\n  return function (dispatch) {\n    console.log(\"Removed reward listener\");\n    objectDataServices.unlistenObject();\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/redux/reward/action.js"],"names":["rewardDataServices","objectDataServices","type","actions","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","READ_FROM_EVENT_REWARDS","READ_FROM_EVENT_REWARDS_SUCCESS","READ_FROM_EVENT_REWARDS_ERROR","READ_FROM_OWN_REWARDS","READ_FROM_OWN_REWARDS_SUCCESS","READ_FROM_OWN_REWARDS_ERROR","READ_RECORD","READ_RECORD_SUCCESS","READ_RECORD_ERROR","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","MODAL_CONTROL","UPDATE","update","data","payload","modalControl","readFromDatabase","routeId","dispatch","getState","Promise","resolve","reject","readObjects","groupId","rewards","console","log","error","readEventRewards","eventId","eventRewards","listenFromDatabase","listenObjects","updateListener","removeListenerFromDatabase","unlistenObjects","listenToOwnRewards","uid","Auth","user","listenOwnRewards","removeListenerFromOwnRewards","unlistenOwnRewards","listenToRecord","rewardId","listenObject","objectId","removeListenerToRecord","unlistenObject"],"mappings":"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","sourcesContent":["import { rewardDataServices as objectDataServices } from \"../../services/database\";\r\n\r\nconst type = \"reward\";\r\n\r\nconst actions = {\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n\r\n  READ_FROM_EVENT_REWARDS: type + \"READ_FROM_EVENT_REWARDS\",\r\n  READ_FROM_EVENT_REWARDS_SUCCESS: type + \"READ_FROM_EVENT_REWARDS_SUCCESS\",\r\n  READ_FROM_EVENT_REWARDS_ERROR: type + \"READ_FROM_EVENT_REWARDS_ERROR\",\r\n\r\n  READ_FROM_OWN_REWARDS: type + \"READ_FROM_OWN_REWARDS\",\r\n  READ_FROM_OWN_REWARDS_SUCCESS: type + \"READ_FROM_OWN_REWARDS_SUCCESS\",\r\n  READ_FROM_OWN_REWARDS_ERROR: type + \"READ_FROM_OWN_REWARDS_ERROR\",\r\n\r\n  READ_RECORD: type + \"READ_RECORD\",\r\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\r\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\r\n\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  MODAL_CONTROL: type + 'MODAL_CONTROL',\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport const modalControl = (data = null) => {\r\n  return{\r\n    type: actions.MODAL_CONTROL,\r\n    payload: { data },\r\n  }\r\n}\r\n\r\nexport function readFromDatabase({ routeId = null }) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        \r\n        const rewards = await objectDataServices.readObjects({\r\n          groupId: routeId,\r\n        });\r\n\r\n        resolve(rewards);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_SUCCESS,\r\n          payload: { data: rewards },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function readEventRewards({ eventId = null }) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_EVENT_REWARDS});\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        \r\n        const eventRewards = await objectDataServices.readEventRewards({\r\n          eventId\r\n        });\r\n\r\n        resolve(eventRewards);\r\n        dispatch({\r\n          type: actions.READ_FROM_EVENT_REWARDS_SUCCESS,\r\n          payload: { data: eventRewards },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_EVENT_REWARDS_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n\r\nexport function listenFromDatabase({ routeId = null }) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    try {\r\n      \r\n      console.log(`Start listen to rewards belong to route : ${routeId} `)\r\n      objectDataServices.listenObjects({\r\n        groupId: routeId,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_FROM_DATABASE_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    }catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_FROM_DATABASE_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerFromDatabase() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed listener from rewards\")\r\n    objectDataServices.unlistenObjects();\r\n  }\r\n}\r\n\r\nexport function listenToOwnRewards() {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_OWN_REWARDS });\r\n    try {\r\n      console.log(`Start listen to own rewards `)\r\n      const uid = getState().Auth.user.uid;\r\n      objectDataServices.listenOwnRewards({\r\n        uid,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_FROM_OWN_REWARDS_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_FROM_OWN_REWARDS_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerFromOwnRewards() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed listener from own rewards\")\r\n    objectDataServices.unlistenOwnRewards();\r\n  }\r\n}\r\n\r\nexport function listenToRecord({ rewardId = null }) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.READ_RECORD });\r\n    console.log(`Start listen to reward : ${rewardId} `)\r\n    try {\r\n      objectDataServices.listenObject({\r\n        objectId: rewardId,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_RECORD_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_RECORD_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerToRecord() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed reward listener\")\r\n    objectDataServices.unlistenObject();\r\n  }\r\n}\r\n\r\n\r\n\r\n// export function submitToBackend(data, actionName) {\r\n//   return (dispatch, getState) => {\r\n//     dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n//     return new Promise(async (resolve, reject) => {\r\n//       let result = {};\r\n\r\n//       const { routeId } = data;\r\n//       const routeIds = [routeId]\r\n\r\n//       try {\r\n//         switch (actionName) {\r\n//           case \"create\":\r\n//             result = await routeTicketBackendServices.create({data: {routeIds}})\r\n//             break;\r\n//         }\r\n\r\n//         resolve(result);\r\n//         dispatch({\r\n//           type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n//           payload: { data: result },\r\n//         });\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//         reject(error);\r\n//         dispatch({\r\n//           type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n//           payload: { error },\r\n//         });\r\n//       }\r\n//     });\r\n//   };\r\n// }\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}