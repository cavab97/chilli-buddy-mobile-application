{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Gogogain\\\\Gogogain - User\\\\src\\\\screens\\\\subscreen\\\\Prizes\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Prizes } from \"@components/templates\";\nimport { readFromDatabase as readRewards, update, modalControl } from \"@redux/reward/action\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n\n    _this.rewardPress = function (reward) {\n      _this.props.update(reward);\n\n      _this.props.modalControl();\n    };\n\n    _this.modalControl = function () {\n      _this.props.modalControl();\n    };\n\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var routeId = this.props.navigation.state.params.routeId;\n      this.props.readRewards({\n        routeId: routeId\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$reward = this.props.reward,\n          rewards = _this$props$reward.rewards,\n          reward = _this$props$reward.reward,\n          readLoading = _this$props$reward.readLoading,\n          modalActive = _this$props$reward.modalActive;\n      var rewardsGroup = [];\n      rewards.forEach(function (item) {\n        var sameElement = rewardsGroup.filter(function (data) {\n          return data.title === item.title;\n        });\n\n        if (sameElement.length === 0) {\n          item[\"quantity\"] = rewards.filter(function (data) {\n            return data.title === item.title;\n          }).length;\n          rewardsGroup.push(item);\n        } else if (sameElement[0].images.length === 0 && item.images.length > 0) {\n          var _index = rewardsGroup.indexOf(sameElement[0]);\n\n          sameElement[0].images.push(item.images[0]);\n          rewardsGroup[_index] = sameElement[0];\n        }\n      });\n      return React.createElement(Prizes, {\n        data: rewardsGroup,\n        readLoading: readLoading,\n        showModal: modalActive,\n        reward: reward,\n        rewardPress: this.rewardPress.bind(this),\n        modalControl: this.modalControl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var reward = state.Reward;\n  return {\n    reward: reward\n  };\n};\n\nexport default connect(mapStateToProps, {\n  readRewards: readRewards,\n  modalControl: modalControl,\n  update: update\n})(index);","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/screens/subscreen/Prizes/index.js"],"names":["React","Component","connect","Prizes","readFromDatabase","readRewards","update","modalControl","index","props","rewardPress","reward","routeId","navigation","state","params","rewards","readLoading","modalActive","rewardsGroup","forEach","item","sameElement","filter","data","title","length","push","images","indexOf","bind","mapStateToProps","Reward"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Prizes } from \"@components/templates\";\r\n\r\nimport { \r\n  readFromDatabase as readRewards,\r\n  update,\r\n  modalControl\r\n} from \"@redux/reward/action\";\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { routeId } = this.props.navigation.state.params;\r\n    this.props.readRewards({ routeId });\r\n  }\r\n\r\n  rewardPress = (reward) => {\r\n    this.props.update(reward);\r\n    this.props.modalControl();\r\n  }\r\n\r\n  modalControl = () => {\r\n    this.props.modalControl();\r\n  }\r\n\r\n  render() {\r\n    const { rewards, reward, readLoading, modalActive } = this.props.reward;\r\n    \r\n    const rewardsGroup = [];\r\n    rewards.forEach(item => {\r\n      const sameElement = rewardsGroup.filter(data => {return data.title === item.title});\r\n\r\n      if(sameElement.length === 0){\r\n        item[\"quantity\"] = rewards.filter(data => data.title === item.title).length;\r\n        rewardsGroup.push(item);\r\n\r\n      }else if(sameElement[0].images.length === 0 && item.images.length > 0){\r\n        // get image in a reward group\r\n        const index = rewardsGroup.indexOf(sameElement[0]);\r\n\r\n        sameElement[0].images.push(item.images[0]);\r\n\r\n        rewardsGroup[index] = sameElement[0];\r\n      }\r\n    });\r\n\r\n    return (\r\n      <Prizes \r\n        data = {rewardsGroup}\r\n        readLoading = {readLoading}\r\n        showModal = {modalActive}\r\n        reward = {reward}\r\n        rewardPress = {this.rewardPress.bind(this)}\r\n        modalControl = {this.modalControl}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const reward = state.Reward;\r\n\r\n    return {\r\n        reward,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { readRewards, modalControl, update })(index);\r\n"]},"metadata":{},"sourceType":"module"}