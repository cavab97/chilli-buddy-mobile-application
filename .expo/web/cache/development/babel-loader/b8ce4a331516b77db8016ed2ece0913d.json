{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Gogogain\\\\Gogogain - User\\\\src\\\\screens\\\\subscreen\\\\CompletedUser\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { UserCompleted } from \"@components/templates\";\nimport { readByObjectGroup as readRouteTicket } from \"@redux/routeTicket/action\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var routeId = this.props.navigation.state.params.routeId;\n      this.props.readRouteTicket({\n        routeId: routeId\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$routeTick = this.props.routeTicketState,\n          routeTickets = _this$props$routeTick.routeTickets,\n          readLoading = _this$props$routeTick.readLoading;\n      var uid = this.props.uid;\n\n      var noUserImage = require(\"../../../assets/gogogain/Mascot-C.png\");\n\n      var validUser = [];\n      routeTickets.forEach(function (routeTicket) {\n        if (routeTicket.completedMissions.length === routeTicket.route.totalMissions) {\n          validUser.push(routeTicket);\n        }\n      });\n      validUser = validUser.sort(function (a, b) {\n        return a.id - b.id;\n      });\n      return React.createElement(UserCompleted, {\n        data: validUser,\n        uid: uid,\n        noUserImage: noUserImage,\n        message: \"Join our LUCKY DRAW by complete any station mission!\",\n        termsAndConditions: \"Term and Condition Apply.\",\n        noUserMessage: \"No any user complete yet\",\n        readLoading: readLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var routeTicketState = state.RouteTicket;\n  var uid = state.Auth.user.uid;\n  return {\n    routeTicketState: routeTicketState,\n    uid: uid\n  };\n};\n\nexport default connect(mapStateToProps, {\n  readRouteTicket: readRouteTicket\n})(index);","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/screens/subscreen/CompletedUser/index.js"],"names":["React","Component","connect","Actions","UserCompleted","readByObjectGroup","readRouteTicket","index","props","state","routeId","navigation","params","routeTicketState","routeTickets","readLoading","uid","noUserImage","require","validUser","forEach","routeTicket","completedMissions","length","route","totalMissions","push","sort","a","b","id","mapStateToProps","RouteTicket","Auth","user"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AAEA,SAASC,iBAAiB,IAAIC,eAA9B,QAAqD,2BAArD;;IAGMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa,EAAb;AAFiB;AAGlB;;;;wCAEmB;AAAA,UACVC,OADU,GACE,KAAKF,KAAL,CAAWG,UAAX,CAAsBF,KAAtB,CAA4BG,MAD9B,CACVF,OADU;AAElB,WAAKF,KAAL,CAAWF,eAAX,CAA2B;AAAEI,QAAAA,OAAO,EAAPA;AAAF,OAA3B;AACD;;;2CAEsB,CAAE;;;6BAEhB;AAAA,kCAC+B,KAAKF,KAAL,CAAWK,gBAD1C;AAAA,UACCC,YADD,yBACCA,YADD;AAAA,UACeC,WADf,yBACeA,WADf;AAAA,UAECC,GAFD,GAES,KAAKR,KAFd,CAECQ,GAFD;;AAGP,UAAMC,WAAW,GAAGC,OAAO,yCAA3B;;AAEA,UAAIC,SAAS,GAAG,EAAhB;AAEAL,MAAAA,YAAY,CAACM,OAAb,CAAqB,UAACC,WAAD,EAAiB;AAClC,YAAGA,WAAW,CAACC,iBAAZ,CAA8BC,MAA9B,KAAyCF,WAAW,CAACG,KAAZ,CAAkBC,aAA9D,EAA4E;AACxEN,UAAAA,SAAS,CAACO,IAAV,CAAeL,WAAf;AACH;AACJ,OAJD;AAMAF,MAAAA,SAAS,GAAGA,SAAS,CAACQ,IAAV,CAAe,UAACC,CAAD,EAAGC,CAAH,EAAS;AAClC,eAAQD,CAAC,CAACE,EAAH,GAAUD,CAAC,CAACC,EAAnB;AACD,OAFW,CAAZ;AAKA,aACE,oBAAC,aAAD;AACE,QAAA,IAAI,EAAEX,SADR;AAEE,QAAA,GAAG,EAAEH,GAFP;AAGE,QAAA,WAAW,EAAEC,WAHf;AAIE,QAAA,OAAO,EAAC,sDAJV;AAKE,QAAA,kBAAkB,EAAC,2BALrB;AAME,QAAA,aAAa,EAAC,0BANhB;AAOE,QAAA,WAAW,EAAEF,WAPf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAWD;;;;EA1CiBd,S;;AA6CpB,IAAM8B,eAAe,GAAG,SAAlBA,eAAkB,CAACtB,KAAD,EAAW;AACjC,MAAMI,gBAAgB,GAAGJ,KAAK,CAACuB,WAA/B;AADiC,MAEzBhB,GAFyB,GAEjBP,KAAK,CAACwB,IAAN,CAAWC,IAFM,CAEzBlB,GAFyB;AAIjC,SAAO;AACLH,IAAAA,gBAAgB,EAAhBA,gBADK;AAELG,IAAAA,GAAG,EAAHA;AAFK,GAAP;AAID,CARD;;AAUA,eAAed,OAAO,CAAC6B,eAAD,EAAkB;AAAEzB,EAAAA,eAAe,EAAfA;AAAF,CAAlB,CAAP,CAA8CC,KAA9C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { UserCompleted } from \"@components/templates\";\r\n\r\nimport { readByObjectGroup as readRouteTicket } from \"@redux/routeTicket/action\";\r\n\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { routeId } = this.props.navigation.state.params;\r\n    this.props.readRouteTicket({ routeId });\r\n  }\r\n\r\n  componentWillUnmount() {}\r\n\r\n  render() {\r\n    const { routeTickets, readLoading } = this.props.routeTicketState;\r\n    const { uid } = this.props;\r\n    const noUserImage = require(\"../../../assets/gogogain/Mascot-C.png\")\r\n\r\n    let validUser = [];\r\n\r\n    routeTickets.forEach((routeTicket) => {\r\n        if(routeTicket.completedMissions.length === routeTicket.route.totalMissions){\r\n            validUser.push(routeTicket);\r\n        }\r\n    });\r\n\r\n    validUser = validUser.sort((a,b) => {\r\n      return (a.id) - (b.id)\r\n    })\r\n\r\n\r\n    return (\r\n      <UserCompleted\r\n        data={validUser}\r\n        uid={uid}\r\n        noUserImage={noUserImage}\r\n        message=\"Join our LUCKY DRAW by complete any station mission!\"\r\n        termsAndConditions=\"Term and Condition Apply.\"\r\n        noUserMessage=\"No any user complete yet\"\r\n        readLoading={readLoading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const routeTicketState = state.RouteTicket;\r\n  const { uid } = state.Auth.user;\r\n\r\n  return {\r\n    routeTicketState,\r\n    uid,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, { readRouteTicket })(index);\r\n"]},"metadata":{},"sourceType":"module"}