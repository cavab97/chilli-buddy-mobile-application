{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Gogogain\\\\Gogogain - User\\\\src\\\\screens\\\\main\\\\RouteGroups\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { RouteGroupList } from \"@components/templates\";\nimport { listenFromDatabase, removeListenerFromDatabase } from \"@redux/routeGroup/action\";\nimport { readFromDatabase as readRoutes } from \"@redux/route/action\";\nimport clone from \"clone\";\nimport styles from \"./styles\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n\n    _this.onRouteMapPress = function (routeGroup) {\n      var id = routeGroup.id;\n      Actions.Routes({\n        routeGroupId: id\n      });\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.listenFromDatabase();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeListenerFromDatabase();\n    }\n  }, {\n    key: \"onRankingPress\",\n    value: function onRankingPress() {\n      Actions.EventRanking();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var readLoading = this.props.readLoading;\n\n      var _clone = clone(this.props),\n          routeGroups = _clone.routeGroups;\n\n      var validRouteGroups = [];\n      routeGroups.forEach(function (routeGroup) {\n        var ongoingRoutes = routeGroup.ongoingRoutes,\n            pendingRoutes = routeGroup.pendingRoutes,\n            endRoutes = routeGroup.endRoutes,\n            id = routeGroup.id;\n\n        if (ongoingRoutes || pendingRoutes || endRoutes) {\n          validRouteGroups.push(routeGroup);\n        }\n      });\n\n      var backgroundImage = require(\"../../../assets/gogogain/RouteMap_FA_Blue_15_BackgroundEvent.png\");\n\n      return React.createElement(RouteGroupList, {\n        title: \"Tournaments\",\n        subtitle: \"Leaderboard\",\n        data: validRouteGroups,\n        subtitle2: \"Active : \",\n        subtitle3: \"To Be Unlocked : \",\n        onRouteMapPress: this.onRouteMapPress,\n        onRankingPress: this.onRankingPress.bind(this),\n        readLoading: readLoading,\n        backgroundImage: backgroundImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var routes = state.Route.routes;\n  return _objectSpread(_objectSpread({}, state.RouteGroup), {}, {\n    routes: routes\n  });\n};\n\nexport default connect(mapStateToProps, {\n  listenFromDatabase: listenFromDatabase,\n  removeListenerFromDatabase: removeListenerFromDatabase,\n  readRoutes: readRoutes\n})(index);","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/screens/main/RouteGroups/index.js"],"names":["React","Component","connect","Actions","RouteGroupList","listenFromDatabase","removeListenerFromDatabase","readFromDatabase","readRoutes","clone","styles","index","props","onRouteMapPress","routeGroup","id","Routes","routeGroupId","state","EventRanking","readLoading","routeGroups","validRouteGroups","forEach","ongoingRoutes","pendingRoutes","endRoutes","push","backgroundImage","require","onRankingPress","bind","mapStateToProps","routes","Route","RouteGroup"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,kBAAT,EAA6BC,0BAA7B,QAA+D,0BAA/D;AACA,SAASC,gBAAgB,IAAIC,UAA7B,QAA+C,qBAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,MAAP;;IAEMC,K;;;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAcnBC,eAdmB,GAcD,UAACC,UAAD,EAAgB;AAAA,UACtBC,EADsB,GACfD,UADe,CACtBC,EADsB;AAG9BZ,MAAAA,OAAO,CAACa,MAAR,CAAe;AAACC,QAAAA,YAAY,EAAGF;AAAhB,OAAf;AACH,KAlBkB;;AAEf,UAAKG,KAAL,GAAa,EAAb;AAFe;AAIlB;;;;wCAEmB;AAChB,WAAKN,KAAL,CAAWP,kBAAX;AACH;;;2CAEqB;AAClB,WAAKO,KAAL,CAAWN,0BAAX;AACH;;;qCAQgB;AACbH,MAAAA,OAAO,CAACgB,YAAR;AACH;;;6BAEQ;AAAA,UACGC,WADH,GACmB,KAAKR,KADxB,CACGQ,WADH;;AAAA,mBAEmBX,KAAK,CAAC,KAAKG,KAAN,CAFxB;AAAA,UAEGS,WAFH,UAEGA,WAFH;;AAIL,UAAMC,gBAAgB,GAAG,EAAzB;AAEAD,MAAAA,WAAW,CAACE,OAAZ,CAAoB,UAACT,UAAD,EAAc;AAAA,YACtBU,aADsB,GAC0BV,UAD1B,CACtBU,aADsB;AAAA,YACPC,aADO,GAC0BX,UAD1B,CACPW,aADO;AAAA,YACQC,SADR,GAC0BZ,UAD1B,CACQY,SADR;AAAA,YACmBX,EADnB,GAC0BD,UAD1B,CACmBC,EADnB;;AAE9B,YAAGS,aAAa,IAAIC,aAAjB,IAAkCC,SAArC,EAAgD;AAC5CJ,UAAAA,gBAAgB,CAACK,IAAjB,CAAsBb,UAAtB;AACH;AACJ,OALD;;AAOA,UAAMc,eAAe,GAAGC,OAAO,oEAA/B;;AAEA,aACI,oBAAC,cAAD;AACI,QAAA,KAAK,EAAC,aADV;AAEI,QAAA,QAAQ,EAAC,aAFb;AAGI,QAAA,IAAI,EAAEP,gBAHV;AAII,QAAA,SAAS,EAAC,WAJd;AAKI,QAAA,SAAS,EAAC,mBALd;AAMI,QAAA,eAAe,EAAE,KAAKT,eAN1B;AAOI,QAAA,cAAc,EAAE,KAAKiB,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAPpB;AAQI,QAAA,WAAW,EAAIX,WARnB;AASI,QAAA,eAAe,EAAIQ,eATvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAaH;;;;EArDe3B,S;;AAwDpB,IAAM+B,eAAe,GAAG,SAAlBA,eAAkB,CAAAd,KAAK,EAAI;AAC7B,MAAMe,MAAM,GAAGf,KAAK,CAACgB,KAAN,CAAYD,MAA3B;AAEA,yCAAWf,KAAK,CAACiB,UAAjB;AAA6BF,IAAAA,MAAM,EAANA;AAA7B;AACH,CAJD;;AAMA,eAAe/B,OAAO,CAAC8B,eAAD,EAAkB;AAAE3B,EAAAA,kBAAkB,EAAlBA,kBAAF;AAAsBC,EAAAA,0BAA0B,EAA1BA,0BAAtB;AAAkDE,EAAAA,UAAU,EAAVA;AAAlD,CAAlB,CAAP,CAAyFG,KAAzF,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { RouteGroupList } from \"@components/templates\";\r\nimport { listenFromDatabase, removeListenerFromDatabase } from \"@redux/routeGroup/action\";\r\nimport { readFromDatabase as readRoutes } from \"@redux/route/action\";\r\nimport clone from \"clone\"\r\n\r\nimport styles from \"./styles\";\r\n\r\nclass index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n \r\n    componentDidMount() {\r\n        this.props.listenFromDatabase();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.removeListenerFromDatabase();\r\n    }\r\n\r\n    onRouteMapPress = (routeGroup) => {\r\n        const { id } = routeGroup\r\n\r\n        Actions.Routes({routeGroupId : id});\r\n    }\r\n\r\n    onRankingPress() {\r\n        Actions.EventRanking();\r\n    }\r\n\r\n    render() {\r\n        const { readLoading } = this.props\r\n        const { routeGroups } = clone(this.props)\r\n\r\n        const validRouteGroups = []\r\n        \r\n        routeGroups.forEach((routeGroup)=>{\r\n            const { ongoingRoutes, pendingRoutes, endRoutes, id } = routeGroup\r\n            if(ongoingRoutes || pendingRoutes || endRoutes) {\r\n                validRouteGroups.push(routeGroup)\r\n            }\r\n        })\r\n\r\n        const backgroundImage = require(\"../../../assets/gogogain/RouteMap_FA_Blue_15_BackgroundEvent.png\")\r\n\r\n        return (\r\n            <RouteGroupList\r\n                title=\"Tournaments\"\r\n                subtitle=\"Leaderboard\"\r\n                data={validRouteGroups}\r\n                subtitle2=\"Active : \"\r\n                subtitle3=\"To Be Unlocked : \"\r\n                onRouteMapPress={this.onRouteMapPress}\r\n                onRankingPress={this.onRankingPress.bind(this)}\r\n                readLoading = {readLoading}\r\n                backgroundImage = {backgroundImage}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    const routes = state.Route.routes;\r\n\r\n    return {...state.RouteGroup, routes};\r\n};\r\n\r\nexport default connect(mapStateToProps, { listenFromDatabase, removeListenerFromDatabase, readRoutes })(index);\r\n"]},"metadata":{},"sourceType":"module"}