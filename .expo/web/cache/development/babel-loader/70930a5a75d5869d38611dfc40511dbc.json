{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { database } from \"../../marslab-library-react-native/utils/helper\";\nvar objectGroupName = \"routeTicket\";\nvar objectName = \"transaction\";\n\nvar objectListener = function objectListener() {};\n\nexport function listenObjectsByRouteTicket(_ref) {\n  var _ref$routeTicketId = _ref.routeTicketId,\n      routeTicketId = _ref$routeTicketId === void 0 ? null : _ref$routeTicketId,\n      _ref$updateListener = _ref.updateListener,\n      updateListener = _ref$updateListener === void 0 ? function () {} : _ref$updateListener;\n  objectListener = database.readTable({\n    ref: objectGroupName + \"Packaging0/\" + routeTicketId + \"/\" + objectName + \"Packaging0\"\n  }).where(\"deleted.at\", \"==\", null).onSnapshot(function (QuerySnapshot) {\n    var result = [];\n    QuerySnapshot.forEach(function (snapshot) {\n      var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n        id: snapshot.id\n      });\n\n      var parent = database.processData({\n        data: data\n      });\n\n      var processedData = _objectSpread({}, parent);\n\n      result.push(processedData);\n    });\n    updateListener(result);\n  });\n}\nexport function unlistenObjectsByRouteTicket() {\n  objectListener();\n}","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/services/database/transaction.js"],"names":["database","objectGroupName","objectName","objectListener","listenObjectsByRouteTicket","routeTicketId","updateListener","readTable","ref","where","onSnapshot","QuerySnapshot","result","forEach","snapshot","data","id","parent","processData","processedData","push","unlistenObjectsByRouteTicket"],"mappings":";;;;;;AAAA,SAASA,QAAT;AAEA,IAAMC,eAAe,GAAG,aAAxB;AACA,IAAMC,UAAU,GAAG,aAAnB;;AAEA,IAAIC,cAAc,GAAG,0BAAM,CAAE,CAA7B;;AAEA,OAAO,SAASC,0BAAT,OAAyF;AAAA,gCAAnDC,aAAmD;AAAA,MAAnDA,aAAmD,mCAAnC,IAAmC;AAAA,iCAA7BC,cAA6B;AAAA,MAA7BA,cAA6B,oCAAZ,YAAM,CAAE,CAAI;AAC9FH,EAAAA,cAAc,GAAGH,QAAQ,CACpBO,SADY,CACF;AAAEC,IAAAA,GAAG,EAAKP,eAAL,mBAAkCI,aAAlC,SAAmDH,UAAnD;AAAL,GADE,EAEZO,KAFY,CAEN,YAFM,EAEQ,IAFR,EAEc,IAFd,EAGZC,UAHY,CAGD,UAAAC,aAAa,EAAI;AAC3B,QAAMC,MAAM,GAAG,EAAf;AACAD,IAAAA,aAAa,CAACE,OAAd,CAAsB,UAAAC,QAAQ,EAAI;AAChC,UAAMC,IAAI,mCACLD,QAAQ,CAACC,IAAT,EADK;AAERC,QAAAA,EAAE,EAAEF,QAAQ,CAACE;AAFL,QAAV;;AAKA,UAAMC,MAAM,GAAGjB,QAAQ,CAACkB,WAAT,CAAqB;AAAEH,QAAAA,IAAI,EAAJA;AAAF,OAArB,CAAf;;AAEA,UAAMI,aAAa,qBAAQF,MAAR,CAAnB;;AAEAL,MAAAA,MAAM,CAACQ,IAAP,CAAYD,aAAZ;AACD,KAXD;AAYAb,IAAAA,cAAc,CAACM,MAAD,CAAd;AACD,GAlBY,CAAjB;AAmBD;AAED,OAAO,SAASS,4BAAT,GAAwC;AAC7ClB,EAAAA,cAAc;AACf","sourcesContent":["import { database } from \"../../marslab-library-react-native/utils/helper\";\r\n\r\nconst objectGroupName = \"routeTicket\";\r\nconst objectName = \"transaction\";\r\n\r\nlet objectListener = () => {};\r\n\r\nexport function listenObjectsByRouteTicket({ routeTicketId = null, updateListener = () => {} }) {\r\n  objectListener = database\r\n      .readTable({ ref: `${objectGroupName}Packaging0/${routeTicketId}/${objectName}Packaging0` })\r\n      .where(\"deleted.at\", \"==\", null)\r\n      .onSnapshot(QuerySnapshot => {\r\n        const result = [];\r\n        QuerySnapshot.forEach(snapshot => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            id: snapshot.id\r\n          };\r\n          \r\n          const parent = database.processData({ data });\r\n\r\n          const processedData = { ...parent };\r\n          \r\n          result.push(processedData);\r\n        });\r\n        updateListener(result);\r\n      })\r\n}\r\n\r\nexport function unlistenObjectsByRouteTicket() {\r\n  objectListener();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}