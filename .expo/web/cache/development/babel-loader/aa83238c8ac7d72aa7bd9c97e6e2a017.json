{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from 'firebase';\nimport 'firebase/firestore';\nimport { GeoCollectionReference, GeoFirestore, GeoQuery, GeoQuerySnapshot, encodeGeohash } from 'geofirestore';\nimport { permissionsRegistration, LOCATION } from \"../../marslab-library-react-native/utils/system\";\nvar type = \"shop\";\nvar actions = {\n  PERMISSION_VERIFICATION: type + \"PERMISSION_VERIFICATION\",\n  PERMISSION_VERIFICATION_SUCCESS: type + \"PERMISSION_VERIFICATIONSUCCESS\",\n  PERMISSION_VERIFICATION_ERROR: type + \"PERMISSION_VERIFICATION_ERROR\",\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\"\n};\nvar firestore = firebase.firestore;\nexport var COLLECTION = 'shopPackaging0';\nvar geoFirestore = new GeoFirestore(firestore());\nvar geoCollectionReference = geoFirestore.collection(COLLECTION);\nexport function verifyPermission() {\n  return function (dispatch) {\n    dispatch({\n      type: actions.PERMISSION_VERIFICATION\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var _await$permissionsReg, _await$permissionsReg2, locationPermission, permissions;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(permissionsRegistration([LOCATION]));\n\n            case 3:\n              _await$permissionsReg = _context.sent;\n              _await$permissionsReg2 = _slicedToArray(_await$permissionsReg, 1);\n              locationPermission = _await$permissionsReg2[0];\n              permissions = {\n                location: locationPermission\n              };\n              resolve(permissions);\n              dispatch({\n                type: actions.PERMISSION_VERIFICATION,\n                payload: {\n                  data: {\n                    permissions: permissions\n                  }\n                }\n              });\n              _context.next = 16;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](0);\n              reject(_context.t0);\n              console.log(_context.t0);\n              dispatch({\n                type: actions.PERMISSION_VERIFICATION_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 11]], Promise);\n    });\n  };\n}\nexport function loadShops(_ref) {\n  var radius = _ref.radius,\n      latitude = _ref.latitude,\n      longtitude = _ref.longtitude,\n      selectedCategory = _ref.selectedCategory;\n  var limit = 0;\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function (resolve, reject) {\n      radius < 15 ? limit = 0 : limit = 100;\n      selectedCategory !== null && geoCollectionReference.where('categories', 'array-contains-any', [selectedCategory]).limit(limit).near({\n        center: new firebase.firestore.GeoPoint(latitude, longtitude),\n        radius: radius\n      }).get().then(function (snapshot) {\n        var Data = [];\n        snapshot.forEach(function (doc) {\n          if (doc.data().deleted_at === null) {\n            Data.push(_objectSpread({}, doc, {\n              id: doc.id\n            }));\n          }\n\n          ;\n        });\n        Data.sort(function (a, b) {\n          return a.distance - b.distance;\n        });\n        Data = Data.map(function (item) {\n          return _objectSpread({}, item.data(), {\n            distance: item.distance,\n            id: item.id\n          });\n        });\n        dispatch({\n          type: actions.READ_FROM_DATABASE_SUCCESS\n        });\n        resolve(Data);\n      }).catch(function (error) {\n        console.log(error);\n        dispatch({\n          type: actions.READ_FROM_DATABASE_ERROR\n        });\n        reject(error);\n      });\n      selectedCategory === null && geoCollectionReference.limit(limit).near({\n        center: new firebase.firestore.GeoPoint(latitude, longtitude),\n        radius: radius\n      }).get().then(function (snapshot) {\n        var Data = [];\n        snapshot.forEach(function (doc) {\n          {\n            Data.push(_objectSpread({}, doc, {\n              id: doc.id\n            }));\n          }\n          ;\n        });\n        Data.sort(function (a, b) {\n          return a.distance - b.distance;\n        });\n        Data = Data.map(function (item) {\n          return _objectSpread({}, item.data(), {\n            distance: item.distance,\n            id: item.id\n          });\n        });\n        dispatch({\n          type: actions.READ_FROM_DATABASE_SUCCESS\n        });\n        resolve(Data);\n      }).catch(function (error) {\n        console.log(error);\n        dispatch({\n          type: actions.READ_FROM_DATABASE_ERROR\n        });\n        reject(error);\n      });\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/redux/shops/action.js"],"names":["firebase","GeoCollectionReference","GeoFirestore","GeoQuery","GeoQuerySnapshot","encodeGeohash","permissionsRegistration","LOCATION","type","actions","PERMISSION_VERIFICATION","PERMISSION_VERIFICATION_SUCCESS","PERMISSION_VERIFICATION_ERROR","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","firestore","COLLECTION","geoFirestore","geoCollectionReference","collection","verifyPermission","dispatch","Promise","resolve","reject","locationPermission","permissions","location","payload","data","console","log","error","loadShops","radius","latitude","longtitude","selectedCategory","limit","where","near","center","GeoPoint","get","then","snapshot","Data","forEach","doc","deleted_at","push","id","sort","a","b","distance","map","item","catch"],"mappings":";;;;;;;;AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,OAAO,oBAAP;AACA,SAASC,sBAAT,EAAiCC,YAAjC,EAA+CC,QAA/C,EAAyDC,gBAAzD,EAA2EC,aAA3E,QAA+F,cAA/F;AAEA,SAASC,uBAAT,EAAkCC,QAAlC;AAEA,IAAMC,IAAI,GAAG,MAAb;AAEA,IAAMC,OAAO,GAAG;AACZC,EAAAA,uBAAuB,EAAEF,IAAI,GAAG,yBADpB;AAEZG,EAAAA,+BAA+B,EAAEH,IAAI,GAAG,gCAF5B;AAGZI,EAAAA,6BAA6B,EAAEJ,IAAI,GAAG,+BAH1B;AAKZK,EAAAA,kBAAkB,EAAEL,IAAI,GAAG,oBALf;AAMZM,EAAAA,0BAA0B,EAAEN,IAAI,GAAG,4BANvB;AAOZO,EAAAA,wBAAwB,EAAEP,IAAI,GAAG;AAPrB,CAAhB;IAUQQ,S,GAAchB,Q,CAAdgB,S;AAER,OAAO,IAAMC,UAAU,GAAG,gBAAnB;AAEP,IAAMC,YAAY,GAAG,IAAIhB,YAAJ,CAAiBc,SAAS,EAA1B,CAArB;AAGA,IAAMG,sBAAsB,GAAGD,YAAY,CAACE,UAAb,CAAwBH,UAAxB,CAA/B;AAEA,OAAO,SAASI,gBAAT,GAA2B;AAC9B,SAAO,UAAAC,QAAQ,EAAG;AACdA,IAAAA,QAAQ,CAAC;AAACd,MAAAA,IAAI,EAACC,OAAO,CAACC;AAAd,KAAD,CAAR;AACA,WAAO,IAAIa,OAAJ,CAAY,iBAAMC,OAAN,EAAcC,MAAd;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEwBnB,uBAAuB,CAAC,CAACC,QAAD,CAAD,CAF/C;;AAAA;AAAA;AAAA;AAEJmB,cAAAA,kBAFI;AAGLC,cAAAA,WAHK,GAGS;AAACC,gBAAAA,QAAQ,EAACF;AAAV,eAHT;AAIXF,cAAAA,OAAO,CAACG,WAAD,CAAP;AACAL,cAAAA,QAAQ,CAAC;AAACd,gBAAAA,IAAI,EAACC,OAAO,CAACC,uBAAd;AAAuCmB,gBAAAA,OAAO,EAAC;AAACC,kBAAAA,IAAI,EAAC;AAACH,oBAAAA,WAAW,EAAXA;AAAD;AAAN;AAA/C,eAAD,CAAR;AALW;AAAA;;AAAA;AAAA;AAAA;AAOXF,cAAAA,MAAM,aAAN;AACAM,cAAAA,OAAO,CAACC,GAAR;AACAV,cAAAA,QAAQ,CAAC;AAACd,gBAAAA,IAAI,EAACC,OAAO,CAACG,6BAAd;AAA6CiB,gBAAAA,OAAO,EAAC;AAACI,kBAAAA,KAAK;AAAN;AAArD,eAAD,CAAR;;AATW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ,CAAP;AAYH,GAdD;AAeH;AAED,OAAO,SAASC,SAAT,OAAkE;AAAA,MAA9CC,MAA8C,QAA9CA,MAA8C;AAAA,MAAvCC,QAAuC,QAAvCA,QAAuC;AAAA,MAA9BC,UAA8B,QAA9BA,UAA8B;AAAA,MAAnBC,gBAAmB,QAAnBA,gBAAmB;AACrE,MAAIC,KAAK,GAAG,CAAZ;AACA,SAAO,UAACjB,QAAD,EAAc;AACjBA,IAAAA,QAAQ,CAAC;AAACd,MAAAA,IAAI,EAAEC,OAAO,CAACI;AAAf,KAAD,CAAR;AACA,WAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAEpCU,MAAAA,MAAM,GAAG,EAAT,GACII,KAAK,GAAG,CADZ,GACgBA,KAAK,GAAG,GADxB;AAEAD,MAAAA,gBAAgB,KAAK,IAArB,IACAnB,sBAAsB,CACjBqB,KADL,CACW,YADX,EACwB,oBADxB,EAC6C,CAACF,gBAAD,CAD7C,EAEKC,KAFL,CAEWA,KAFX,EAEkBE,IAFlB,CAEuB;AACfC,QAAAA,MAAM,EAAE,IAAI1C,QAAQ,CAACgB,SAAT,CAAmB2B,QAAvB,CAAgCP,QAAhC,EAA0CC,UAA1C,CADO;AAEfF,QAAAA,MAAM,EAAEA;AAFO,OAFvB,EAMES,GANF,GAMQC,IANR,CAMa,UAACC,QAAD,EAAc;AACvB,YAAIC,IAAI,GAAC,EAAT;AACAD,QAAAA,QAAQ,CAACE,OAAT,CAAiB,UAASC,GAAT,EAAc;AAC3B,cAAGA,GAAG,CAACnB,IAAJ,GAAWoB,UAAX,KAA0B,IAA7B,EACA;AAACH,YAAAA,IAAI,CAACI,IAAL,mBAAcF,GAAd;AAAkBG,cAAAA,EAAE,EAACH,GAAG,CAACG;AAAzB;AAA8B;;AAAA;AAClC,SAHD;AAKAL,QAAAA,IAAI,CAACM,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAzB;AAAA,SAAV;AAEAT,QAAAA,IAAI,GAAGA,IAAI,CAACU,GAAL,CAAS,UAACC,IAAD,EAAQ;AACpB,mCAAWA,IAAI,CAAC5B,IAAL,EAAX;AAAwB0B,YAAAA,QAAQ,EAACE,IAAI,CAACF,QAAtC;AAAgDJ,YAAAA,EAAE,EAACM,IAAI,CAACN;AAAxD;AACH,SAFM,CAAP;AAGA9B,QAAAA,QAAQ,CAAC;AAACd,UAAAA,IAAI,EAAEC,OAAO,CAACK;AAAf,SAAD,CAAR;AACAU,QAAAA,OAAO,CAACuB,IAAD,CAAP;AACF,OApBF,EAoBIY,KApBJ,CAoBU,UAAC1B,KAAD,EAAW;AACjBF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAX,QAAAA,QAAQ,CAAC;AAACd,UAAAA,IAAI,EAAEC,OAAO,CAACM;AAAf,SAAD,CAAR;AAEAU,QAAAA,MAAM,CAACQ,KAAD,CAAN;AAAc,OAxBlB,CADA;AA4BAK,MAAAA,gBAAgB,KAAK,IAArB,IACAnB,sBAAsB,CACjBoB,KADL,CACWA,KADX,EACkBE,IADlB,CACuB;AACfC,QAAAA,MAAM,EAAE,IAAI1C,QAAQ,CAACgB,SAAT,CAAmB2B,QAAvB,CAAgCP,QAAhC,EAA0CC,UAA1C,CADO;AAEfF,QAAAA,MAAM,EAAEA;AAFO,OADvB,EAKES,GALF,GAKQC,IALR,CAKa,UAACC,QAAD,EAAc;AACvB,YAAIC,IAAI,GAAC,EAAT;AAEAD,QAAAA,QAAQ,CAACE,OAAT,CAAiB,UAASC,GAAT,EAAc;AAG3B;AAACF,YAAAA,IAAI,CAACI,IAAL,mBAAcF,GAAd;AAAkBG,cAAAA,EAAE,EAACH,GAAG,CAACG;AAAzB;AAA8B;AAAA;AAClC,SAJD;AAMAL,QAAAA,IAAI,CAACM,IAAL,CAAU,UAACC,CAAD,EAAIC,CAAJ;AAAA,iBAAUD,CAAC,CAACE,QAAF,GAAaD,CAAC,CAACC,QAAzB;AAAA,SAAV;AAEAT,QAAAA,IAAI,GAAGA,IAAI,CAACU,GAAL,CAAS,UAACC,IAAD,EAAQ;AACpB,mCAAWA,IAAI,CAAC5B,IAAL,EAAX;AAAwB0B,YAAAA,QAAQ,EAACE,IAAI,CAACF,QAAtC;AAAgDJ,YAAAA,EAAE,EAACM,IAAI,CAACN;AAAxD;AACH,SAFM,CAAP;AAGA9B,QAAAA,QAAQ,CAAC;AAACd,UAAAA,IAAI,EAAEC,OAAO,CAACK;AAAf,SAAD,CAAR;AACAU,QAAAA,OAAO,CAACuB,IAAD,CAAP;AACF,OArBF,EAsBCY,KAtBD,CAsBO,UAAC1B,KAAD,EAAW;AACdF,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACAX,QAAAA,QAAQ,CAAC;AAACd,UAAAA,IAAI,EAAEC,OAAO,CAACM;AAAf,SAAD,CAAR;AAEAU,QAAAA,MAAM,CAACQ,KAAD,CAAN;AAAc,OA1BlB,CADA;AA4BK,KA5DF,CAAP;AA8DH,GAhED;AAiEH;AAED,eAAexB,OAAf","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport { GeoCollectionReference, GeoFirestore, GeoQuery, GeoQuerySnapshot ,encodeGeohash} from 'geofirestore';\r\n\r\nimport { permissionsRegistration, LOCATION } from \"../../marslab-library-react-native/utils/system\"\r\n\r\nconst type = \"shop\"\r\n\r\nconst actions = {\r\n    PERMISSION_VERIFICATION: type + \"PERMISSION_VERIFICATION\",\r\n    PERMISSION_VERIFICATION_SUCCESS: type + \"PERMISSION_VERIFICATIONSUCCESS\",\r\n    PERMISSION_VERIFICATION_ERROR: type + \"PERMISSION_VERIFICATION_ERROR\",\r\n\r\n    READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n    READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n    READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\"\r\n  };\r\n\r\nconst { firestore } = firebase\r\n\r\nexport const COLLECTION = 'shopPackaging0';\r\n// Create a GeoFirestore reference\r\nconst geoFirestore = new GeoFirestore(firestore());\r\n\r\n// Create a GeoCollection reference\r\nconst geoCollectionReference = geoFirestore.collection(COLLECTION);\r\n\r\nexport function verifyPermission(){\r\n    return dispatch =>{\r\n        dispatch({type:actions.PERMISSION_VERIFICATION})\r\n        return new Promise(async(resolve,reject)=>{\r\n            try{\r\n                const [locationPermission] = await permissionsRegistration([LOCATION])\r\n                const permissions = {location:locationPermission}\r\n                resolve(permissions)\r\n                dispatch({type:actions.PERMISSION_VERIFICATION, payload:{data:{permissions}}})\r\n            }catch(error){\r\n                reject(error)\r\n                console.log(error)\r\n                dispatch({type:actions.PERMISSION_VERIFICATION_ERROR, payload:{error}})\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport function loadShops({radius,latitude,longtitude,selectedCategory}) {\r\n    let limit = 0;\r\n    return (dispatch) => {\r\n        dispatch({type: actions.READ_FROM_DATABASE});\r\n        return new Promise((resolve, reject) => {\r\n\r\n            radius < 15?\r\n                limit = 0 : limit = 100\r\n            selectedCategory !== null &&\r\n            geoCollectionReference\r\n                .where('categories','array-contains-any',[selectedCategory])\r\n                .limit(limit).near({\r\n                    center: new firebase.firestore.GeoPoint(latitude, longtitude),\r\n                    radius: radius\r\n             })\r\n             .get().then((snapshot) => {\r\n                var Data=[];\r\n                snapshot.forEach(function(doc) {\r\n                    if(doc.data().deleted_at === null)\r\n                    {Data.push({...doc,id:doc.id})};\r\n                }); \r\n\r\n                Data.sort((a, b) => a.distance - b.distance)\r\n\r\n                Data = Data.map((item)=>{\r\n                    return {...item.data(), distance:item.distance, id:item.id}\r\n                })\r\n                dispatch({type: actions.READ_FROM_DATABASE_SUCCESS});\r\n                resolve(Data);\r\n             }).catch((error) => {\r\n                console.log(error)\r\n                dispatch({type: actions.READ_FROM_DATABASE_ERROR});\r\n                \r\n                reject(error)});\r\n                \r\n           \r\n            selectedCategory === null &&\r\n            geoCollectionReference\r\n                .limit(limit).near({\r\n                    center: new firebase.firestore.GeoPoint(latitude, longtitude),\r\n                    radius: radius\r\n             })\r\n             .get().then((snapshot) => {\r\n                var Data=[];\r\n                \r\n                snapshot.forEach(function(doc) {\r\n                    //console.log(doc.data().displayName, doc.data().deleted_at)\r\n                    //if(doc.data().deleted_at === null)\r\n                    {Data.push({...doc,id:doc.id})};\r\n                }); \r\n\r\n                Data.sort((a, b) => a.distance - b.distance)\r\n                \r\n                Data = Data.map((item)=>{\r\n                    return {...item.data(), distance:item.distance, id:item.id}\r\n                })\r\n                dispatch({type: actions.READ_FROM_DATABASE_SUCCESS});\r\n                resolve(Data);\r\n             })\r\n            .catch((error) => {\r\n                console.log(error)\r\n                dispatch({type: actions.READ_FROM_DATABASE_ERROR});\r\n                \r\n                reject(error)});\r\n                }\r\n        )\r\n    }\r\n}\r\n\r\nexport default actions\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}