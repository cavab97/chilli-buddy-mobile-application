{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as Permissions from \"expo-permissions\";\nexport var LOCATION = Permissions.LOCATION;\nexport var NOTIFICATIONS = Permissions.NOTIFICATIONS;\nexport var CAMERA = Permissions.CAMERA;\nexport var AUDIO_RECORDING = Permissions.AUDIO_RECORDING;\nexport var CONTACTS = Permissions.CONTACTS;\nexport var REMINDERS = Permissions.REMINDERS;\nexport function permissionsRegistration() {\n  var permissionTypeArray,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function permissionsRegistration$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          permissionTypeArray = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : [];\n          return _context3.abrupt(\"return\", new Promise(function _callee2(resolve, reject) {\n            var permissionStatus;\n            return _regeneratorRuntime.async(function _callee2$(_context2) {\n              while (1) {\n                switch (_context2.prev = _context2.next) {\n                  case 0:\n                    permissionStatus = [];\n                    _context2.prev = 1;\n                    _context2.next = 4;\n                    return _regeneratorRuntime.awrap(Promise.all(permissionTypeArray.map(function _callee(permissionType, index) {\n                      var status;\n                      return _regeneratorRuntime.async(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              _context.next = 2;\n                              return _regeneratorRuntime.awrap(Permissions.getAsync(permissionType));\n\n                            case 2:\n                              status = _context.sent;\n                              status = status.status;\n\n                              if (!(status !== \"granted\")) {\n                                _context.next = 10;\n                                break;\n                              }\n\n                              console.log(\"Requesting \" + permissionType + \" Permissions\");\n                              _context.next = 8;\n                              return _regeneratorRuntime.awrap(Permissions.askAsync(permissionType));\n\n                            case 8:\n                              status = _context.sent;\n                              status = status.status;\n\n                            case 10:\n                              permissionStatus.push(status);\n                              console.log(permissionType + \" Permission : \" + status);\n\n                            case 12:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, null, null, null, Promise);\n                    })));\n\n                  case 4:\n                    resolve(permissionStatus);\n                    _context2.next = 10;\n                    break;\n\n                  case 7:\n                    _context2.prev = 7;\n                    _context2.t0 = _context2[\"catch\"](1);\n                    reject(_context2.t0);\n\n                  case 10:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }\n            }, null, null, [[1, 7]], Promise);\n          }));\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function permissionChecking(permissionType) {\n  return _regeneratorRuntime.async(function permissionChecking$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n            Permissions.getAsync(permissionType).then(function (status) {\n              resolve(status.status);\n            }).catch(function (error) {\n              reject(error);\n            });\n          }));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/marslab-library-react-native/utils/system/permission/index.js"],"names":["Permissions","LOCATION","NOTIFICATIONS","CAMERA","AUDIO_RECORDING","CONTACTS","REMINDERS","permissionsRegistration","permissionTypeArray","Promise","resolve","reject","permissionStatus","all","map","permissionType","index","getAsync","status","console","log","askAsync","push","permissionChecking","then","catch","error"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,kBAA7B;AAEA,OAAO,IAAMC,QAAQ,GAAGD,WAAW,CAACC,QAA7B;AACP,OAAO,IAAMC,aAAa,GAAGF,WAAW,CAACE,aAAlC;AACP,OAAO,IAAMC,MAAM,GAAGH,WAAW,CAACG,MAA3B;AACP,OAAO,IAAMC,eAAe,GAAGJ,WAAW,CAACI,eAApC;AACP,OAAO,IAAMC,QAAQ,GAAGL,WAAW,CAACK,QAA7B;AACP,OAAO,IAAMC,SAAS,GAAGN,WAAW,CAACM,SAA9B;AAEP,OAAO,SAAeC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuCC,UAAAA,mBAAvC,8DAA6D,EAA7D;AAAA,4CACE,IAAIC,OAAJ,CAAY,kBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,oBAAAA,gBADW,GACQ,EADR;AAAA;AAAA;AAAA,qDAGTH,OAAO,CAACI,GAAR,CACJL,mBAAmB,CAACM,GAApB,CAAwB,iBAAOC,cAAP,EAAuBC,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DAEPhB,WAAW,CAACiB,QAAZ,CAAqBF,cAArB,CAFO;;AAAA;AAEtBG,8BAAAA,MAFsB;AAGtBA,8BAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;;AAHsB,oCAKlBA,MAAM,KAAK,SALO;AAAA;AAAA;AAAA;;AAMpBC,8BAAAA,OAAO,CAACC,GAAR,iBAA0BL,cAA1B;AANoB;AAAA,+DAOLf,WAAW,CAACqB,QAAZ,CAAqBN,cAArB,CAPK;;AAAA;AAOpBG,8BAAAA,MAPoB;AAQpBA,8BAAAA,MAAM,GAAGA,MAAM,CAACA,MAAhB;;AARoB;AAUtBN,8BAAAA,gBAAgB,CAACU,IAAjB,CAAsBJ,MAAtB;AACAC,8BAAAA,OAAO,CAACC,GAAR,CAAYL,cAAc,GAAG,gBAAjB,GAAoCG,MAAhD;;AAXsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxB,CADI,CAHS;;AAAA;AAkBfR,oBAAAA,OAAO,CAACE,gBAAD,CAAP;AAlBe;AAAA;;AAAA;AAAA;AAAA;AAoBfD,oBAAAA,MAAM,cAAN;;AApBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAZ,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0BP,OAAO,SAAeY,kBAAf,CAAkCR,cAAlC;AAAA;AAAA;AAAA;AAAA;AAAA,4CACE,IAAIN,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCX,YAAAA,WAAW,CAACiB,QAAZ,CAAqBF,cAArB,EACGS,IADH,CACQ,UAAAN,MAAM,EAAI;AACdR,cAAAA,OAAO,CAACQ,MAAM,CAACA,MAAR,CAAP;AACD,aAHH,EAIGO,KAJH,CAIS,UAAAC,KAAK,EAAI;AACdf,cAAAA,MAAM,CAACe,KAAD,CAAN;AACD,aANH;AAOD,WARM,CADF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import * as Permissions from \"expo-permissions\";\r\n\r\nexport const LOCATION = Permissions.LOCATION;\r\nexport const NOTIFICATIONS = Permissions.NOTIFICATIONS;\r\nexport const CAMERA = Permissions.CAMERA;\r\nexport const AUDIO_RECORDING = Permissions.AUDIO_RECORDING;\r\nexport const CONTACTS = Permissions.CONTACTS;\r\nexport const REMINDERS = Permissions.REMINDERS;\r\n\r\nexport async function permissionsRegistration(permissionTypeArray = []) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const permissionStatus = [];\r\n    try {\r\n      await Promise.all(\r\n        permissionTypeArray.map(async (permissionType, index) => {\r\n          let status;\r\n          status = await Permissions.getAsync(permissionType);\r\n          status = status.status;\r\n\r\n          if (status !== \"granted\") {\r\n            console.log(`Requesting ${permissionType} Permissions`);\r\n            status = await Permissions.askAsync(permissionType);\r\n            status = status.status;\r\n          }\r\n          permissionStatus.push(status);\r\n          console.log(permissionType + \" Permission : \" + status);\r\n        })\r\n      );\r\n      resolve(permissionStatus);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n}\r\n\r\nexport async function permissionChecking(permissionType) {\r\n  return new Promise((resolve, reject) => {\r\n    Permissions.getAsync(permissionType)\r\n      .then(status => {\r\n        resolve(status.status);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}