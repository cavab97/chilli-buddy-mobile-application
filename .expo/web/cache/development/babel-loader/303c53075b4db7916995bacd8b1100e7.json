{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ZuMei\\\\gogogainUser\\\\src\\\\screens\\\\main\\\\RouteGroups\\\\Routes\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { AreaRouteGroupList } from \"../../../../components/templates\";\nimport { listenFromDatabase, removeListenerFromDatabase } from \"../../../../redux/route/action\";\nimport styles from \"./styles\";\nimport clone from \"clone\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var routeGroupId = this.props.navigation.state.params.routeGroupId;\n      this.props.listenFromDatabase({\n        routeGroupId: routeGroupId\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeListenerFromDatabase();\n    }\n  }, {\n    key: \"onSingleRouteMapPress\",\n    value: function onSingleRouteMapPress(route) {\n      var id = route.id;\n      Actions.Route({\n        routeId: id\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var readLoading = this.props.routeState.readLoading;\n      var routeTickets = this.props.routeTicketState.routeTickets;\n\n      var _clone = clone(this.props.routeState),\n          routes = _clone.routes;\n\n      var joinedRoutes = [];\n      var nojoinedRoutes = [];\n      routes.forEach(function (route) {\n        var routeTicket = routeTickets.filter(function (routeTicket) {\n          return routeTicket.routeIds[0] === route.id;\n        });\n\n        if (routeTicket.length > 0) {\n          joinedRoutes.push(_objectSpread({}, route, {\n            routeTicketId: routeTicket[0].id,\n            numberCompletedMissions: routeTicket[0].numberCompletedMissions,\n            joinedAt: routeTicket[0].created.at\n          }));\n          return;\n        } else {\n          nojoinedRoutes.push(_objectSpread({}, route, {\n            routeTicketId: null,\n            numberCompletedMissions: 0,\n            joinedAt: null\n          }));\n          return;\n        }\n      });\n      joinedRoutes.sort(function (a, b) {\n        return b.joinedAt - a.joinedAt;\n      });\n      nojoinedRoutes.sort(function (a, b) {\n        return b.created.at - a.created.at;\n      });\n      routes = [].concat(joinedRoutes, nojoinedRoutes);\n      return React.createElement(AreaRouteGroupList, {\n        data: routes,\n        totalMissionTitle: \"Total Mission : \",\n        periodTitle: \"Period : \",\n        seatLeftTitle: \"Seat Left : \",\n        completeTitle: \"Complete : \",\n        winnerTitle: \"Winner : \",\n        periodEndTitle: \"Period End : \",\n        prizeTitle: \"Prize : \",\n        completeInTitle: \"Complete in : \",\n        routeTitle: \"Route \",\n        onSingleRouteMapPress: this.onSingleRouteMapPress.bind(this),\n        readLoading: readLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var routeState = state.Route;\n  var routeTicketState = state.RouteTicket;\n  return {\n    routeState: routeState,\n    routeTicketState: routeTicketState\n  };\n};\n\nexport default connect(mapStateToProps, {\n  listenFromDatabase: listenFromDatabase,\n  removeListenerFromDatabase: removeListenerFromDatabase\n})(index);","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/screens/main/RouteGroups/Routes/index.js"],"names":["React","Component","connect","Actions","AreaRouteGroupList","listenFromDatabase","removeListenerFromDatabase","styles","clone","index","props","state","routeGroupId","navigation","params","route","id","Route","routeId","readLoading","routeState","routeTickets","routeTicketState","routes","joinedRoutes","nojoinedRoutes","forEach","routeTicket","filter","routeIds","length","push","routeTicketId","numberCompletedMissions","joinedAt","created","at","sort","a","b","onSingleRouteMapPress","bind","mapStateToProps","RouteTicket"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { AreaRouteGroupList } from \"../../../../components/templates\";\r\n\r\nimport {\r\n  listenFromDatabase,\r\n  removeListenerFromDatabase,\r\n} from \"../../../../redux/route/action\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nimport clone from \"clone\";\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { routeGroupId } = this.props.navigation.state.params;\r\n    this.props.listenFromDatabase({ routeGroupId });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.removeListenerFromDatabase();\r\n  }\r\n\r\n  onSingleRouteMapPress(route) {\r\n    const { id } = route;\r\n    Actions.Route({ routeId: id });\r\n  }\r\n\r\n  render() {\r\n    const { readLoading } = this.props.routeState;\r\n    const { routeTickets } = this.props.routeTicketState;\r\n    let { routes } = clone(this.props.routeState);\r\n\r\n    const joinedRoutes = [];\r\n    const nojoinedRoutes = [];\r\n\r\n    //Merge route with corresponding route ticket\r\n    routes.forEach((route) => {\r\n      const routeTicket = routeTickets.filter(\r\n        (routeTicket) => routeTicket.routeIds[0] === route.id\r\n      );\r\n\r\n      if (routeTicket.length > 0) {\r\n        joinedRoutes.push({\r\n          ...route,\r\n          routeTicketId: routeTicket[0].id,\r\n          numberCompletedMissions: routeTicket[0].numberCompletedMissions,\r\n          joinedAt: routeTicket[0].created.at,\r\n        });\r\n        return;\r\n      } else {\r\n        nojoinedRoutes.push({\r\n          ...route,\r\n          routeTicketId: null,\r\n          numberCompletedMissions: 0,\r\n          joinedAt: null,\r\n        });\r\n        return;\r\n      }\r\n    });\r\n\r\n    joinedRoutes.sort((a,b)=> b.joinedAt - a.joinedAt)\r\n    nojoinedRoutes.sort((a,b)=> b.created.at - a.created.at)\r\n\r\n    routes = [...joinedRoutes, ...nojoinedRoutes]\r\n\r\n\r\n    return (\r\n      <AreaRouteGroupList\r\n        data={routes}\r\n        totalMissionTitle=\"Total Mission : \"\r\n        periodTitle=\"Period : \"\r\n        seatLeftTitle=\"Seat Left : \"\r\n        completeTitle=\"Complete : \"\r\n        winnerTitle=\"Winner : \"\r\n        periodEndTitle=\"Period End : \"\r\n        prizeTitle=\"Prize : \"\r\n        completeInTitle=\"Complete in : \"\r\n        routeTitle=\"Route \"\r\n        onSingleRouteMapPress={this.onSingleRouteMapPress.bind(this)}\r\n        readLoading={readLoading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const routeState = state.Route;\r\n  const routeTicketState = state.RouteTicket;\r\n\r\n  return {\r\n    routeState,\r\n    routeTicketState,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  listenFromDatabase,\r\n  removeListenerFromDatabase,\r\n})(index);\r\n"]},"metadata":{},"sourceType":"module"}