{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ZuMei\\\\gogogainUser\\\\node_modules\\\\react-native-phone-input\\\\lib\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport PropTypes from \"prop-types\";\nimport Country from \"./country\";\nimport Flags from \"./resources/flags\";\nimport PhoneNumber from \"./phoneNumber\";\nimport styles from \"./styles\";\nimport CountryPicker from \"./countryPicker\";\n\nvar PhoneInput = function (_Component) {\n  _inherits(PhoneInput, _Component);\n\n  var _super = _createSuper(PhoneInput);\n\n  _createClass(PhoneInput, null, [{\n    key: \"setCustomCountriesData\",\n    value: function setCustomCountriesData(json) {\n      Country.setCustomCountriesData(json);\n    }\n  }]);\n\n  function PhoneInput(props, context) {\n    var _this;\n\n    _classCallCheck(this, PhoneInput);\n\n    _this = _super.call(this, props, context);\n    _this.onChangePhoneNumber = _this.onChangePhoneNumber.bind(_assertThisInitialized(_this));\n    _this.onPressFlag = _this.onPressFlag.bind(_assertThisInitialized(_this));\n    _this.selectCountry = _this.selectCountry.bind(_assertThisInitialized(_this));\n    _this.getFlag = _this.getFlag.bind(_assertThisInitialized(_this));\n    _this.getISOCode = _this.getISOCode.bind(_assertThisInitialized(_this));\n    var _this$props = _this.props,\n        countriesList = _this$props.countriesList,\n        disabled = _this$props.disabled,\n        initialCountry = _this$props.initialCountry;\n\n    if (countriesList) {\n      Country.setCustomCountriesData(countriesList);\n    }\n\n    var countryData = PhoneNumber.getCountryDataByCode(initialCountry);\n    _this.state = {\n      iso2: initialCountry,\n      disabled: disabled,\n      formattedNumber: countryData ? \"+\" + countryData.dialCode : \"\",\n      value: null,\n      inputValue: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(PhoneInput, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (this.props.value) {\n        this.updateFlagAndFormatNumber(this.props.value);\n      }\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var value = nextProps.value,\n          disabled = nextProps.disabled;\n      this.setState({\n        disabled: disabled\n      });\n\n      if (value && value !== this.state.value) {\n        this.setState({\n          value: value\n        });\n        this.updateFlagAndFormatNumber(value);\n      }\n    }\n  }, {\n    key: \"onChangePhoneNumber\",\n    value: function onChangePhoneNumber(number) {\n      var _this2 = this;\n\n      var actionAfterSetState = this.props.onChangePhoneNumber ? function () {\n        _this2.props.onChangePhoneNumber(number);\n      } : null;\n      this.updateFlagAndFormatNumber(number, actionAfterSetState);\n    }\n  }, {\n    key: \"onPressFlag\",\n    value: function onPressFlag() {\n      if (this.props.onPressFlag) {\n        this.props.onPressFlag();\n      } else {\n        if (this.state.iso2) this.picker.selectCountry(this.state.iso2);\n        this.picker.show();\n      }\n    }\n  }, {\n    key: \"getPickerData\",\n    value: function getPickerData() {\n      return PhoneNumber.getAllCountries().map(function (country, index) {\n        return {\n          key: index,\n          image: Flags.get(country.iso2),\n          label: country.name,\n          dialCode: \"+\" + country.dialCode,\n          iso2: country.iso2\n        };\n      });\n    }\n  }, {\n    key: \"getCountryCode\",\n    value: function getCountryCode() {\n      var countryData = PhoneNumber.getCountryDataByCode(this.state.iso2);\n      return countryData ? countryData.dialCode : null;\n    }\n  }, {\n    key: \"getAllCountries\",\n    value: function getAllCountries() {\n      return PhoneNumber.getAllCountries();\n    }\n  }, {\n    key: \"getFlag\",\n    value: function getFlag(iso2) {\n      return Flags.get(iso2);\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode() {\n      return PhoneNumber.getDialCode(this.state.formattedNumber);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.state.formattedNumber.replace(/\\s/g, '');\n    }\n  }, {\n    key: \"getNumberType\",\n    value: function getNumberType() {\n      return PhoneNumber.getNumberType(this.state.formattedNumber, this.state.iso2);\n    }\n  }, {\n    key: \"getISOCode\",\n    value: function getISOCode() {\n      return this.state.iso2;\n    }\n  }, {\n    key: \"selectCountry\",\n    value: function selectCountry(iso2) {\n      var _this3 = this;\n\n      if (this.state.iso2 !== iso2) {\n        var countryData = PhoneNumber.getCountryDataByCode(iso2);\n\n        if (countryData) {\n          this.setState({\n            iso2: iso2,\n            formattedNumber: \"+\" + countryData.dialCode\n          }, function () {\n            _this3.updateFlagAndFormatNumber(_this3.state.inputValue);\n\n            if (_this3.props.onSelectCountry) _this3.props.onSelectCountry(iso2);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber() {\n      if (this.state.inputValue.length < 3) return false;\n      return PhoneNumber.isValidNumber(this.state.formattedNumber, this.state.iso2);\n    }\n  }, {\n    key: \"format\",\n    value: function format(text) {\n      return this.props.autoFormat ? PhoneNumber.format(text, this.state.iso2) : text;\n    }\n  }, {\n    key: \"updateFlagAndFormatNumber\",\n    value: function updateFlagAndFormatNumber(number) {\n      var actionAfterSetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var _this$props2 = this.props,\n          allowZeroAfterCountryCode = _this$props2.allowZeroAfterCountryCode,\n          initialCountry = _this$props2.initialCountry;\n      var iso2 = this.getISOCode() || initialCountry;\n      var formattedPhoneNumber = number;\n\n      if (number) {\n        var countryCode = this.getCountryCode();\n\n        if (formattedPhoneNumber[0] !== \"+\" && countryCode !== null) {\n          formattedPhoneNumber = '+' + countryCode.toString() + formattedPhoneNumber.toString();\n        }\n\n        formattedPhoneNumber = allowZeroAfterCountryCode ? formattedPhoneNumber : this.possiblyEliminateZeroAfterCountryCode(formattedPhoneNumber);\n        iso2 = PhoneNumber.getCountryCodeOfNumber(formattedPhoneNumber);\n      }\n\n      this.setState({\n        iso2: iso2,\n        formattedNumber: formattedPhoneNumber,\n        inputValue: number\n      }, actionAfterSetState);\n    }\n  }, {\n    key: \"possiblyEliminateZeroAfterCountryCode\",\n    value: function possiblyEliminateZeroAfterCountryCode(number) {\n      var dialCode = PhoneNumber.getDialCode(number);\n      return number.startsWith(dialCode + \"0\") ? dialCode + number.substr(dialCode.length + 1) : number;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.inputPhone.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.inputPhone.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state = this.state,\n          iso2 = _this$state.iso2,\n          inputValue = _this$state.inputValue,\n          disabled = _this$state.disabled;\n      var TextComponent = this.props.textComponent || TextInput;\n      return React.createElement(View, {\n        style: [styles.container, this.props.style],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: this.onPressFlag,\n        disabled: disabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 9\n        }\n      }, React.createElement(Image, {\n        source: Flags.get(iso2),\n        style: [styles.flag, this.props.flagStyle],\n        onPress: this.onPressFlag,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      })), React.createElement(View, {\n        style: {\n          flex: 1,\n          marginLeft: this.props.offset || 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 9\n        }\n      }, React.createElement(TextComponent, _extends({\n        ref: function ref(_ref) {\n          _this4.inputPhone = _ref;\n        },\n        editable: !disabled,\n        autoCorrect: false,\n        style: [styles.text, this.props.textStyle],\n        onChangeText: function onChangeText(text) {\n          _this4.onChangePhoneNumber(text);\n        },\n        keyboardType: \"phone-pad\",\n        underlineColorAndroid: \"rgba(0,0,0,0)\",\n        value: inputValue\n      }, this.props.textProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }\n      }))), React.createElement(CountryPicker, {\n        ref: function ref(_ref2) {\n          _this4.picker = _ref2;\n        },\n        selectedCountry: iso2,\n        onSubmit: this.selectCountry,\n        buttonColor: this.props.pickerButtonColor,\n        buttonTextStyle: this.props.pickerButtonTextStyle,\n        cancelText: this.props.cancelText,\n        cancelTextStyle: this.props.cancelTextStyle,\n        confirmText: this.props.confirmText,\n        confirmTextStyle: this.props.confirmTextStyle,\n        pickerBackgroundColor: this.props.pickerBackgroundColor,\n        itemStyle: this.props.pickerItemStyle,\n        onPressCancel: this.props.onPressCancel,\n        onPressConfirm: this.props.onPressConfirm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return PhoneInput;\n}(Component);\n\nexport { PhoneInput as default };\nvar styleType = PropTypes.oneOfType([PropTypes.object, PropTypes.number]);\nPhoneInput.propTypes = {\n  textComponent: PropTypes.func,\n  initialCountry: PropTypes.string,\n  onChangePhoneNumber: PropTypes.func,\n  value: PropTypes.string,\n  style: styleType,\n  flagStyle: styleType,\n  textStyle: styleType,\n  offset: PropTypes.number,\n  textProps: PropTypes.object,\n  onSelectCountry: PropTypes.func,\n  onPressCancel: PropTypes.func,\n  onPressConfirm: PropTypes.func,\n  pickerButtonColor: PropTypes.string,\n  pickerBackgroundColor: PropTypes.string,\n  pickerItemStyle: styleType,\n  countriesList: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    iso2: PropTypes.string,\n    dialCode: PropTypes.string,\n    priority: PropTypes.number,\n    areaCodes: PropTypes.arrayOf(PropTypes.string)\n  })),\n  cancelText: PropTypes.string,\n  cancelTextStyle: styleType,\n  confirmText: PropTypes.string,\n  confirmTextTextStyle: styleType,\n  disabled: PropTypes.bool,\n  allowZeroAfterCountryCode: PropTypes.bool\n};\nPhoneInput.defaultProps = {\n  initialCountry: \"us\",\n  disabled: false,\n  allowZeroAfterCountryCode: true\n};","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/node_modules/react-native-phone-input/lib/index.js"],"names":["React","Component","PropTypes","Country","Flags","PhoneNumber","styles","CountryPicker","PhoneInput","json","setCustomCountriesData","props","context","onChangePhoneNumber","bind","onPressFlag","selectCountry","getFlag","getISOCode","countriesList","disabled","initialCountry","countryData","getCountryDataByCode","state","iso2","formattedNumber","dialCode","value","inputValue","updateFlagAndFormatNumber","nextProps","setState","number","actionAfterSetState","picker","show","getAllCountries","map","country","index","key","image","get","label","name","getDialCode","replace","getNumberType","onSelectCountry","length","isValidNumber","text","autoFormat","format","allowZeroAfterCountryCode","formattedPhoneNumber","countryCode","getCountryCode","toString","possiblyEliminateZeroAfterCountryCode","getCountryCodeOfNumber","startsWith","substr","inputPhone","focus","blur","TextComponent","textComponent","TextInput","container","style","flag","flagStyle","flex","marginLeft","offset","ref","textStyle","textProps","pickerButtonColor","pickerButtonTextStyle","cancelText","cancelTextStyle","confirmText","confirmTextStyle","pickerBackgroundColor","pickerItemStyle","onPressCancel","onPressConfirm","styleType","oneOfType","object","propTypes","func","string","arrayOf","shape","priority","areaCodes","confirmTextTextStyle","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Image, TextInput, TouchableWithoutFeedback, View } from \"react-native\";\nimport PropTypes from \"prop-types\";\n\nimport Country from \"./country\";\nimport Flags from \"./resources/flags\";\nimport PhoneNumber from \"./phoneNumber\";\nimport styles from \"./styles\";\nimport CountryPicker from \"./countryPicker\";\n\nexport default class PhoneInput extends Component {\n  static setCustomCountriesData(json) {\n    Country.setCustomCountriesData(json);\n  }\n\n  constructor(props, context) {\n    super(props, context);\n\n    this.onChangePhoneNumber = this.onChangePhoneNumber.bind(this);\n    this.onPressFlag = this.onPressFlag.bind(this);\n    this.selectCountry = this.selectCountry.bind(this);\n    this.getFlag = this.getFlag.bind(this);\n    this.getISOCode = this.getISOCode.bind(this);\n\n    const { countriesList, disabled, initialCountry } = this.props;\n\n    if (countriesList) {\n      Country.setCustomCountriesData(countriesList);\n    }\n    const countryData = PhoneNumber.getCountryDataByCode(initialCountry);\n\n    this.state = {\n      iso2: initialCountry,\n      disabled,\n      formattedNumber: countryData ? `+${countryData.dialCode}` : \"\",\n      value: null,\n      inputValue: \"\",\n    };\n  }\n\n  componentWillMount() {\n    if (this.props.value) {\n      this.updateFlagAndFormatNumber(this.props.value);\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const { value, disabled } = nextProps;\n    this.setState({ disabled });\n\n    if (value && value !== this.state.value) {\n      this.setState({ value });\n      this.updateFlagAndFormatNumber(value);\n    }\n  }\n\n  onChangePhoneNumber(number) {\n    const actionAfterSetState = this.props.onChangePhoneNumber\n      ? () => {\n          this.props.onChangePhoneNumber(number);\n        }\n      : null;\n    this.updateFlagAndFormatNumber(number, actionAfterSetState);\n  }\n\n  onPressFlag() {\n    if (this.props.onPressFlag) {\n      this.props.onPressFlag();\n    } else {\n      if (this.state.iso2) this.picker.selectCountry(this.state.iso2);\n      this.picker.show();\n    }\n  }\n\n  getPickerData() {\n    return PhoneNumber.getAllCountries().map((country, index) => ({\n      key: index,\n      image: Flags.get(country.iso2),\n      label: country.name,\n      dialCode: `+${country.dialCode}`,\n      iso2: country.iso2\n    }));\n  }\n\n  getCountryCode() {\n    const countryData = PhoneNumber.getCountryDataByCode(this.state.iso2);\n    return countryData ? countryData.dialCode : null;\n  }\n\n  getAllCountries() {\n    return PhoneNumber.getAllCountries();\n  }\n\n  getFlag(iso2) {\n    return Flags.get(iso2);\n  }\n\n  getDialCode() {\n    return PhoneNumber.getDialCode(this.state.formattedNumber);\n  }\n\n  getValue() {\n    return this.state.formattedNumber.replace(/\\s/g,'');\n  }\n\n  getNumberType() {\n    return PhoneNumber.getNumberType(\n      this.state.formattedNumber,\n      this.state.iso2\n    );\n  }\n\n  getISOCode() {\n    return this.state.iso2;\n  }\n\n  selectCountry(iso2) {\n    if (this.state.iso2 !== iso2) {\n      const countryData = PhoneNumber.getCountryDataByCode(iso2);\n      if (countryData) {\n        this.setState(\n          {\n            iso2,\n            formattedNumber: `+${countryData.dialCode}`\n          },\n          () => {\n            this.updateFlagAndFormatNumber(this.state.inputValue)\n            if (this.props.onSelectCountry) this.props.onSelectCountry(iso2);\n          }\n        );\n      }\n    }\n  }\n\n  isValidNumber() {\n    if (this.state.inputValue.length < 3) return false;\n    return PhoneNumber.isValidNumber(\n      this.state.formattedNumber,\n      this.state.iso2\n    );\n  }\n\n  format(text) {\n    return this.props.autoFormat\n      ? PhoneNumber.format(text, this.state.iso2)\n      : text;\n  }\n\n  updateFlagAndFormatNumber(number, actionAfterSetState = null) {\n    const { allowZeroAfterCountryCode, initialCountry } = this.props;\n    let iso2 = this.getISOCode() || initialCountry;\n    let formattedPhoneNumber = number;\n    if (number) {\n      const countryCode = this.getCountryCode();\n      if (formattedPhoneNumber[0] !== \"+\" && countryCode !== null) {\n        formattedPhoneNumber = '+' + countryCode.toString() + formattedPhoneNumber.toString();\n      }\n      formattedPhoneNumber = allowZeroAfterCountryCode\n        ? formattedPhoneNumber\n        : this.possiblyEliminateZeroAfterCountryCode(formattedPhoneNumber);\n      iso2 = PhoneNumber.getCountryCodeOfNumber(formattedPhoneNumber);\n    }\n    this.setState({ iso2, formattedNumber: formattedPhoneNumber, inputValue: number }, actionAfterSetState);\n  }\n\n  possiblyEliminateZeroAfterCountryCode(number) {\n    const dialCode = PhoneNumber.getDialCode(number);\n    return number.startsWith(`${dialCode}0`)\n      ? dialCode + number.substr(dialCode.length + 1)\n      : number;\n  }\n\n  focus() {\n    this.inputPhone.focus();\n  }\n\n  blur() {\n    this.inputPhone.blur();\n  }\n\n  render() {\n    const { iso2, inputValue, disabled } = this.state;\n    const TextComponent = this.props.textComponent || TextInput;\n    return (\n      <View style={[styles.container, this.props.style]}>\n        <TouchableWithoutFeedback\n          onPress={this.onPressFlag}\n          disabled={disabled}\n        >\n          <Image\n            source={Flags.get(iso2)}\n            style={[styles.flag, this.props.flagStyle]}\n            onPress={this.onPressFlag}\n          />\n        </TouchableWithoutFeedback>\n        <View style={{ flex: 1, marginLeft: this.props.offset || 10 }}>\n          <TextComponent\n            ref={ref => {\n              this.inputPhone = ref;\n            }}\n            editable={!disabled}\n            autoCorrect={false}\n            style={[styles.text, this.props.textStyle]}\n            onChangeText={text => {\n              this.onChangePhoneNumber(text);\n            }}\n            keyboardType=\"phone-pad\"\n            underlineColorAndroid=\"rgba(0,0,0,0)\"\n            value={inputValue}\n            {...this.props.textProps}\n          />\n        </View>\n\n        <CountryPicker\n          ref={ref => {\n            this.picker = ref;\n          }}\n          selectedCountry={iso2}\n          onSubmit={this.selectCountry}\n          buttonColor={this.props.pickerButtonColor}\n          buttonTextStyle={this.props.pickerButtonTextStyle}\n          cancelText={this.props.cancelText}\n          cancelTextStyle={this.props.cancelTextStyle}\n          confirmText={this.props.confirmText}\n          confirmTextStyle={this.props.confirmTextStyle}\n          pickerBackgroundColor={this.props.pickerBackgroundColor}\n          itemStyle={this.props.pickerItemStyle}\n          onPressCancel={this.props.onPressCancel}\n          onPressConfirm={this.props.onPressConfirm}\n        />\n      </View>\n    );\n  }\n}\n\nconst styleType = PropTypes.oneOfType([PropTypes.object, PropTypes.number]);\n\nPhoneInput.propTypes = {\n  textComponent: PropTypes.func,\n  initialCountry: PropTypes.string,\n  onChangePhoneNumber: PropTypes.func,\n  value: PropTypes.string,\n  style: styleType,\n  flagStyle: styleType,\n  textStyle: styleType,\n  offset: PropTypes.number,\n  textProps: PropTypes.object,\n  onSelectCountry: PropTypes.func,\n  onPressCancel: PropTypes.func,\n  onPressConfirm: PropTypes.func,\n  pickerButtonColor: PropTypes.string,\n  pickerBackgroundColor: PropTypes.string,\n  pickerItemStyle: styleType,\n  countriesList: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      iso2: PropTypes.string,\n      dialCode: PropTypes.string,\n      priority: PropTypes.number,\n      areaCodes: PropTypes.arrayOf(PropTypes.string)\n    })\n  ),\n  cancelText: PropTypes.string,\n  cancelTextStyle: styleType,\n  confirmText: PropTypes.string,\n  confirmTextTextStyle: styleType,\n  disabled: PropTypes.bool,\n  allowZeroAfterCountryCode: PropTypes.bool\n};\n\nPhoneInput.defaultProps = {\n  initialCountry: \"us\",\n  disabled: false,\n  allowZeroAfterCountryCode: true\n};\n"]},"metadata":{},"sourceType":"module"}