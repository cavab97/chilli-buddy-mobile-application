{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\limwe\\\\Documents\\\\application\\\\gogogain-app\\\\gogogain-user\\\\src\\\\screens\\\\auth\\\\logIn\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { api } from \"../../../settings\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar authDomain = api.firebaseConfig.authDomain;\nimport { View, Image, ImageBackground, KeyboardAvoidingView, Text, ScrollView, TouchableOpacity, TouchableWithoutFeedBack, WebView } from \"../../../marslab-library-react-native/components/atoms\";\nimport { InputTextField } from \"../../../marslab-library-react-native/components/molecules\";\nimport { update, loginWithPhoneNumber } from \"../../../marslab-library-react-native/redux/auth/actions\";\nimport styles from \"./styles\";\nimport clone from \"clone\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n\n    _this.onRecordChange = function (key, value) {\n      var _clone = clone(_this.props),\n          loginDetails = _clone.loginDetails;\n\n      if (key) loginDetails[key] = value;\n\n      _this.props.update(loginDetails);\n    };\n\n    _this.onSendSMS = function (_ref) {\n      var phoneNumber = _ref.phoneNumber,\n          recaptchaToken = _ref.recaptchaToken;\n      var loginWithPhoneNumber = _this.props.loginWithPhoneNumber;\n\n      try {\n        loginWithPhoneNumber({\n          phoneNumber: phoneNumber,\n          recaptchaToken: recaptchaToken\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.loginDetails.confirmationResult !== this.props.loginDetails.confirmationResult && this.props.loginDetails.confirmationResult) {\n        Actions.push(\"loginTAC\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          loginDetails = _this$props.loginDetails,\n          loading = _this$props.loading;\n      var phoneNumber = loginDetails.phoneNumber,\n          recaptchaToken = loginDetails.recaptchaToken;\n      return React.createElement(ImageBackground, {\n        source: require(\"../../../../assets/Login.jpg\"),\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedBack, {\n        onPress: Keyboard.dismiss,\n        accessible: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, React.createElement(KeyboardAvoidingView, {\n        behavior: \"position\",\n        style: {\n          flex: 1\n        },\n        keyboardVerticalOffset: Platform.OS === \"ios\" ? -200 : null,\n        enabled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, React.createElement(ScrollView, {\n        showsVerticalScrollIndicator: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.containerpart1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, \"Login\"), React.createElement(Image, {\n        source: require(\"../../../assets/gogogain/login_logo.png\"),\n        style: styles.logoImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 17\n        }\n      })), React.createElement(View, {\n        style: styles.containerpart2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, React.createElement(InputTextField, {\n        onChangeText: this.onRecordChange.bind(this, \"phoneNumber\"),\n        value: phoneNumber,\n        inputStyle: styles.inputStyle,\n        placeholderText: \"ENTER PHONE NUMBER\",\n        placeholderTextColor: \"rgba(255,255,255, 0.5)\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }\n      })), React.createElement(View, {\n        style: styles.containerpart3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.submitContainer,\n        onPress: this.onSendSMS.bind(this, {\n          phoneNumber: phoneNumber,\n          recaptchaToken: recaptchaToken\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: [styles.text],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 19\n        }\n      }, \"Request TAC\")), React.createElement(WebView, {\n        style: {\n          height: 500,\n          width: 300,\n          borderWidth: 2\n        },\n        source: {\n          uri: \"https://\" + authDomain + \"/authrecaptcha\"\n        },\n        onMessage: function onMessage(event) {\n          var recaptchaToken = event.nativeEvent.data;\n\n          _this2.onRecordChange(\"recaptchaToken\", recaptchaToken);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }\n      }))))));\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref2) {\n  var Auth = _ref2.Auth;\n  var loginDetails = Auth.loginDetails,\n      loading = Auth.loading,\n      error = Auth.error;\n  return {\n    loginDetails: loginDetails,\n    loading: loading,\n    error: error\n  };\n};\n\nexport default connect(mapStateToProps, {\n  update: update,\n  loginWithPhoneNumber: loginWithPhoneNumber\n})(index);","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/screens/auth/logIn/index.js"],"names":["React","Component","connect","Actions","api","authDomain","firebaseConfig","View","Image","ImageBackground","KeyboardAvoidingView","Text","ScrollView","TouchableOpacity","TouchableWithoutFeedBack","WebView","InputTextField","update","loginWithPhoneNumber","styles","clone","index","props","onRecordChange","key","value","loginDetails","onSendSMS","phoneNumber","recaptchaToken","error","console","log","prevProps","prevState","snapshot","confirmationResult","push","loading","require","container","Keyboard","dismiss","flex","Platform","OS","containerpart1","logoImage","containerpart2","bind","inputStyle","containerpart3","submitContainer","text","height","width","borderWidth","uri","event","nativeEvent","data","mapStateToProps","Auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { api } from \"../../../settings\"\r\n\r\nimport { Keyboard, Alert, Platform } from \"react-native\";\r\n\r\nconst { authDomain } = api.firebaseConfig;\r\n\r\nimport {\r\n  View,\r\n  Image,\r\n  ImageBackground,\r\n  KeyboardAvoidingView,\r\n  Text,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  TouchableWithoutFeedBack,\r\n  WebView\r\n} from \"../../../marslab-library-react-native/components/atoms\";\r\n\r\nimport { InputTextField } from \"../../../marslab-library-react-native/components/molecules\";\r\n\r\nimport {\r\n  update,\r\n  loginWithPhoneNumber\r\n} from \"../../../marslab-library-react-native/redux/auth/actions\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nimport clone from \"clone\";\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot){\r\n    if (\r\n      prevProps.loginDetails.confirmationResult !== this.props.loginDetails.confirmationResult &&\r\n      this.props.loginDetails.confirmationResult\r\n    ) {\r\n      Actions.push(\"loginTAC\");\r\n    }\r\n  }\r\n\r\n  onRecordChange = (key, value) => {\r\n    let { loginDetails } = clone(this.props);\r\n    if (key) loginDetails[key] = value;\r\n    this.props.update(loginDetails);\r\n  };\r\n\r\n  onSendSMS = ({phoneNumber, recaptchaToken}) => {\r\n    const { loginWithPhoneNumber } = this.props;\r\n    try {\r\n      loginWithPhoneNumber({ phoneNumber, recaptchaToken });\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { loginDetails, loading } = this.props;\r\n    const { phoneNumber, recaptchaToken } = loginDetails;\r\n\r\n    return (\r\n      <ImageBackground\r\n        source={require(\"../../../../assets/Login.jpg\")}\r\n        style={styles.container}\r\n      >\r\n        <TouchableWithoutFeedBack onPress={Keyboard.dismiss} accessible={false}>\r\n          <KeyboardAvoidingView\r\n            //behavior={Platform.OS === \"ios\" ? \"padding\" : null}\r\n            behavior=\"position\"\r\n            style={{ flex: 1 }}\r\n            keyboardVerticalOffset={Platform.OS === \"ios\" ? -200 : null}\r\n            enabled\r\n          >\r\n            <ScrollView showsVerticalScrollIndicator={false}>\r\n              {/* <View style={{ marginBottom: 120 }}>\r\n                <View\r\n                  style={{\r\n                    marginTop: 120,\r\n                    alignItems: \"center\",\r\n                    justifyContent: \"center\"\r\n                  }}\r\n                >\r\n                    <KeyboardAvoidingView\r\n                        //behavior={Platform.OS === \"ios\" ? \"padding\" : null}\r\n                        behavior=\"position\"\r\n                        style={{ flex: 1 }}\r\n                        keyboardVerticalOffset={\r\n                            Platform.OS === \"ios\" ? -200 : null\r\n                        }\r\n                        enabled\r\n                    >\r\n                        <ScrollView showsVerticalScrollIndicator={false}> */}\r\n              <View style={styles.containerpart1}>\r\n                <Text>Login</Text>\r\n                <Image\r\n                  source={require(\"../../../assets/gogogain/login_logo.png\")}\r\n                  style={styles.logoImage}\r\n                />\r\n              </View>\r\n              <View style={styles.containerpart2}>\r\n                <InputTextField\r\n                  onChangeText={this.onRecordChange.bind(this, \"phoneNumber\")}\r\n                  value={phoneNumber}\r\n                  inputStyle={styles.inputStyle}\r\n                  placeholderText=\"ENTER PHONE NUMBER\"\r\n                  placeholderTextColor=\"rgba(255,255,255, 0.5)\"\r\n                />\r\n              </View>\r\n              <View style={styles.containerpart3}>\r\n                <TouchableOpacity\r\n                  style={styles.submitContainer}\r\n                  onPress={this.onSendSMS.bind(this,{phoneNumber, recaptchaToken} )}\r\n                >\r\n                  <Text style={[styles.text]}>Request TAC</Text>\r\n                </TouchableOpacity>\r\n                <WebView\r\n                  style={{ height: 500, width: 300, borderWidth: 2 }}\r\n                  source={{\r\n                    uri: `https://${authDomain}/authrecaptcha`\r\n                  }}\r\n                  onMessage={(event)=>{\r\n                    const recaptchaToken = event.nativeEvent.data;\r\n                    this.onRecordChange(\"recaptchaToken\",recaptchaToken)\r\n                  }}\r\n                />\r\n              </View>\r\n\r\n              {/* <View style={{ marginBottom: 120 }}>\r\n                                <View\r\n                                    style={{\r\n                                        flex: 1,\r\n                                        marginTop: 120,\r\n                                        alignItems: \"center\",\r\n                                        justifyContent: \"center\"\r\n                                    }}\r\n                                >\r\n                                    <Image\r\n                                        source={require(\"../../../assets/login_logo.png\")}\r\n                                        style={styles.logoImage}\r\n                                    />\r\n                                </View>\r\n\r\n                <InputTextField\r\n                  style={styles.inputTitle}\r\n                  title=\"Email Address\"\r\n                  onChangeText={this.onUsernameChanged.bind(this)}\r\n                  value={this.props.email}\r\n                />\r\n\r\n                <InputTextField\r\n                  style={styles.inputTitle}\r\n                  title=\"Password\"\r\n                  onChangeText={this.onPasswordChanged.bind(this)}\r\n                  value={this.props.email}\r\n                  isSecure\r\n                />\r\n                <TouchableOpacity onPress={this.onResetPasswordPress}>\r\n                  <Text\r\n                    style={[styles.text, styles.link, { textAlign: \"right\" }]}\r\n                  >\r\n                    Forgot Password?\r\n                  </Text>\r\n                </TouchableOpacity>\r\n\r\n                                <TouchableOpacity\r\n                                    style={styles.submitContainer}\r\n                                    onPress={this.onLoginButtonPress.bind(this)}\r\n                                >\r\n                                    <Text\r\n                                        style={[\r\n                                            styles.text,\r\n                                            {\r\n                                                color: \"#FFF\",\r\n                                                fontWeight: \"600\",\r\n                                                fontSize: 16\r\n                                            }\r\n                                        ]}\r\n                                    >\r\n                                        Login\r\n                                    </Text>\r\n                                </TouchableOpacity>\r\n                                \r\n                            </View> */}\r\n            </ScrollView>\r\n          </KeyboardAvoidingView>\r\n        </TouchableWithoutFeedBack>\r\n      </ImageBackground>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ Auth }) => {\r\n  const { loginDetails, loading, error } = Auth;\r\n\r\n  return { loginDetails, loading, error };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  update,\r\n  loginWithPhoneNumber\r\n})(index);\r\n"]},"metadata":{},"sourceType":"module"}