{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { database } from \"../../marslab-library-react-native/utils/helper\";\nvar objectName = \"routeGroup\";\nexport var GeoPoint = database.GeoPoint;\nexport function readObjects() {\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread({}, snapshot.data(), {}, snapshot.data().d, {\n          id: snapshot.id\n        });\n\n        delete data[\"d\"];\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n\n        var processedData = _objectSpread({}, parent, {\n          created: created,\n          deleted: deleted,\n          updated: updated\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readObject(_ref) {\n  var id = _ref.id;\n  return new Promise(function (resolve, reject) {\n    database.readData({\n      ref: objectName + \"Public0/\" + id\n    }).then(function (snapshot) {\n      var data = _objectSpread({}, snapshot, {}, snapshot.d, {\n        id: snapshot.id\n      });\n\n      delete data[\"d\"];\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n\n      var processedData = _objectSpread({}, parent, {\n        created: created,\n        deleted: deleted,\n        updated: updated\n      });\n\n      resolve(processedData);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\n\nvar objectsListener = function objectsListener() {};\n\nexport function listenObjects(_ref2) {\n  var _ref2$updateListener = _ref2.updateListener,\n      updateListener = _ref2$updateListener === void 0 ? function () {} : _ref2$updateListener;\n  objectsListener = database.readTable({\n    ref: objectName + \"Packaging0\"\n  }).where(\"deleted.by\", \"==\", null).onSnapshot(function (QuerySnapshot) {\n    var result = [];\n    QuerySnapshot.forEach(function (snapshot) {\n      var data = _objectSpread({}, snapshot.data(), {}, snapshot.data().d, {\n        id: snapshot.id\n      });\n\n      delete data[\"d\"];\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n\n      var processedData = _objectSpread({}, parent, {\n        created: created,\n        deleted: deleted,\n        updated: updated\n      });\n\n      result.push(processedData);\n    });\n    updateListener(result);\n  });\n}\nexport function unlistenObjects() {\n  objectsListener();\n}\n\nvar objectListener = function objectListener() {};\n\nexport function listenObject(_ref3) {\n  var _ref3$objectId = _ref3.objectId,\n      objectId = _ref3$objectId === void 0 ? null : _ref3$objectId,\n      _ref3$updateListener = _ref3.updateListener,\n      updateListener = _ref3$updateListener === void 0 ? function () {} : _ref3$updateListener;\n  objectListener = database.readRecord({\n    ref: objectName + \"Public0/\" + objectId\n  }).onSnapshot(function (snapshot) {\n    var data = _objectSpread({}, snapshot.data(), {}, snapshot.data().d, {\n      id: snapshot.id\n    });\n\n    delete data[\"d\"];\n    var parent = database.processData({\n      data: data\n    });\n    var created = database.processData({\n      data: data.created\n    });\n    var deleted = database.processData({\n      data: data.deleted\n    });\n    var updated = database.processData({\n      data: data.updated\n    });\n\n    var processedData = _objectSpread({}, parent, {\n      created: created,\n      deleted: deleted,\n      updated: updated\n    });\n\n    updateListener(processedData);\n  });\n}\nexport function unlistenObject() {\n  objectListener();\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/services/database/routeGroup.js"],"names":["database","objectName","GeoPoint","readObjects","Promise","resolve","reject","readTable","ref","where","get","then","QuerySnapshot","result","forEach","snapshot","data","d","id","parent","processData","created","deleted","updated","processedData","push","catch","error","readObject","readData","objectsListener","listenObjects","updateListener","onSnapshot","unlistenObjects","objectListener","listenObject","objectId","readRecord","unlistenObject"],"mappings":"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","sourcesContent":["import { database } from \"../../marslab-library-react-native/utils/helper\";\r\n\r\nconst objectName = \"routeGroup\";\r\n\r\nexport const GeoPoint = database.GeoPoint;\r\n\r\nexport function readObjects() {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({ ref: `${objectName}Packaging0` })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            ...snapshot.data().d,\r\n            id: snapshot.id,\r\n          };\r\n          delete data[\"d\"];\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const processedData = { ...parent, created, deleted, updated };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function readObject({ id }) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readData({ ref: `${objectName}Public0/${id}` })\r\n      .then((snapshot) => {\r\n        const data = {\r\n          ...snapshot,\r\n          ...snapshot.d,\r\n          id: snapshot.id,\r\n        };\r\n\r\n        delete data[\"d\"];\r\n\r\n        const parent = database.processData({ data });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n\r\n        const processedData = { ...parent, created, deleted, updated };\r\n\r\n        resolve(processedData);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nlet objectsListener = () => {};\r\n\r\nexport function listenObjects({ updateListener = () => {} }) {\r\n  objectsListener = database\r\n    .readTable({ ref: `${objectName}Packaging0` })\r\n    .where(\"deleted.by\", \"==\", null)\r\n    .onSnapshot((QuerySnapshot) => {\r\n      const result = [];\r\n      QuerySnapshot.forEach((snapshot) => {\r\n        const data = {\r\n          ...snapshot.data(),\r\n          ...snapshot.data().d,\r\n          id: snapshot.id,\r\n        };\r\n        delete data[\"d\"];\r\n\r\n        const parent = database.processData({ data });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n\r\n        const processedData = { ...parent, created, deleted, updated };\r\n\r\n        result.push(processedData);\r\n      });\r\n\r\n      updateListener(result);\r\n    });\r\n}\r\n\r\nexport function unlistenObjects() {\r\n  objectsListener();\r\n}\r\n\r\nlet objectListener = () => {};\r\n\r\nexport function listenObject({ objectId = null, updateListener = () => {} }) {\r\n  objectListener = database\r\n    .readRecord({ ref: `${objectName}Public0/${objectId}` })\r\n    .onSnapshot((snapshot) => {\r\n      const data = {\r\n        ...snapshot.data(),\r\n        ...snapshot.data().d,\r\n        id: snapshot.id,\r\n      };\r\n      delete data[\"d\"];\r\n\r\n      const parent = database.processData({ data });\r\n      const created = database.processData({ data: data.created });\r\n      const deleted = database.processData({ data: data.deleted });\r\n      const updated = database.processData({ data: data.updated });\r\n\r\n      const processedData = { ...parent, created, deleted, updated };\r\n\r\n      updateListener(processedData);\r\n    });\r\n}\r\n\r\nexport function unlistenObject() {\r\n  objectListener();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}