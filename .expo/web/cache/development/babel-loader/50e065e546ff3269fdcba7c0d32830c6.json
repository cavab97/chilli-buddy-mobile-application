{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { transactionBackendServices } from \"../../services/backend\";\nvar type = \"transaction\";\nvar actions = {\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function submitToBackend(data, actionName) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.SUBMIT_TO_BACKEND\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var result, _data, routeId, shopId, routeTicketId, missionId, payment;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = {};\n              _context.prev = 1;\n              _context.t0 = actionName;\n              _context.next = _context.t0 === \"create\" ? 5 : 11;\n              break;\n\n            case 5:\n              _data = data, routeId = _data.routeId, shopId = _data.shopId, routeTicketId = _data.routeTicketId, missionId = _data.missionId, payment = _data.payment;\n              data = {\n                routeIds: [routeId],\n                shopIds: [shopId],\n                routeTicketIds: [routeTicketId],\n                missionIds: [missionId],\n                payment: payment\n              };\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(transactionBackendServices.create({\n                data: data\n              }));\n\n            case 9:\n              result = _context.sent;\n              return _context.abrupt(\"break\", 11);\n\n            case 11:\n              resolve(result);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context.next = 20;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t1 = _context[\"catch\"](1);\n              console.log(_context.t1);\n              reject(_context.t1);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_ERROR,\n                payload: {\n                  error: _context.t1\n                }\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 15]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/redux/transaction/action.js"],"names":["transactionBackendServices","type","actions","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPDATE","update","data","payload","submitToBackend","actionName","dispatch","getState","Promise","resolve","reject","result","routeId","shopId","routeTicketId","missionId","payment","routeIds","shopIds","routeTicketIds","missionIds","create","console","log","error"],"mappings":";AAAA,SAASA,0BAAT;AAEA,IAAMC,IAAI,GAAG,aAAb;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,iBAAiB,EAAEF,IAAI,GAAG,mBADZ;AAEdG,EAAAA,uBAAuB,EAAEH,IAAI,GAAG,yBAFlB;AAGdI,EAAAA,yBAAyB,EAAEJ,IAAI,GAAG,2BAHpB;AAKdK,EAAAA,MAAM,EAAEL,IAAI,GAAG;AALD,CAAhB;AAQA,OAAO,IAAMM,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAU;AAC9B,SAAO;AACLP,IAAAA,IAAI,EAAEC,OAAO,CAACI,MADT;AAELG,IAAAA,OAAO,EAAE;AAAED,MAAAA,IAAI,EAAJA;AAAF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,SAASE,eAAT,CAAyBF,IAAzB,EAA+BG,UAA/B,EAA2C;AAChD,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7BD,IAAAA,QAAQ,CAAC;AAAEX,MAAAA,IAAI,EAAEC,OAAO,CAACC;AAAhB,KAAD,CAAR;AACA,WAAO,IAAIW,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbC,cAAAA,MADa,GACJ,EADI;AAAA;AAAA,4BAIPN,UAJO;AAAA,8CAKR,QALQ;AAAA;;AAAA;AAAA,sBAMoDH,IANpD,EAMHU,OANG,SAMHA,OANG,EAMMC,MANN,SAMMA,MANN,EAMcC,aANd,SAMcA,aANd,EAM6BC,SAN7B,SAM6BA,SAN7B,EAMwCC,OANxC,SAMwCA,OANxC;AAOXd,cAAAA,IAAI,GAAG;AACLe,gBAAAA,QAAQ,EAAE,CAACL,OAAD,CADL;AAELM,gBAAAA,OAAO,EAAE,CAACL,MAAD,CAFJ;AAGLM,gBAAAA,cAAc,EAAE,CAACL,aAAD,CAHX;AAILM,gBAAAA,UAAU,EAAE,CAACL,SAAD,CAJP;AAKLC,gBAAAA,OAAO,EAAPA;AALK,eAAP;AAPW;AAAA,+CAeItB,0BAA0B,CAAC2B,MAA3B,CAAkC;AAAEnB,gBAAAA,IAAI,EAAJA;AAAF,eAAlC,CAfJ;;AAAA;AAeXS,cAAAA,MAfW;AAAA;;AAAA;AAmBfF,cAAAA,OAAO,CAACE,MAAD,CAAP;AACAL,cAAAA,QAAQ,CAAC;AACPX,gBAAAA,IAAI,EAAEC,OAAO,CAACG,yBADP;AAEPI,gBAAAA,OAAO,EAAE;AAAED,kBAAAA,IAAI,EAAES;AAAR;AAFF,eAAD,CAAR;AApBe;AAAA;;AAAA;AAAA;AAAA;AAyBfW,cAAAA,OAAO,CAACC,GAAR;AACAb,cAAAA,MAAM,aAAN;AACAJ,cAAAA,QAAQ,CAAC;AACPX,gBAAAA,IAAI,EAAEC,OAAO,CAACE,uBADP;AAEPK,gBAAAA,OAAO,EAAE;AAAEqB,kBAAAA,KAAK;AAAP;AAFF,eAAD,CAAR;;AA3Be;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ,CAAP;AAiCD,GAnCD;AAoCD;AAED,eAAe5B,OAAf","sourcesContent":["import { transactionBackendServices } from \"../../services/backend\";\r\n\r\nconst type = \"transaction\";\r\n\r\nconst actions = {\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function submitToBackend(data, actionName) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n\r\n      try {\r\n        switch (actionName) {\r\n          case \"create\":\r\n            const { routeId, shopId, routeTicketId, missionId, payment } = data;\r\n            data = {\r\n              routeIds: [routeId],\r\n              shopIds: [shopId],\r\n              routeTicketIds: [routeTicketId],\r\n              missionIds: [missionId],\r\n              payment\r\n            };\r\n\r\n            result = await transactionBackendServices.create({ data });\r\n            break;\r\n        }\r\n\r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}