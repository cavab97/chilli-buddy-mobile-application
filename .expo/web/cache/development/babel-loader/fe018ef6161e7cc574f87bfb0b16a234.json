{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { storage } from \"../../marslab-library-react-native/utils/helper\";\nimport { convertFileToBlob } from \"../../marslab-library-react-native/utils/common\";\nvar objectName = \"users\";\nexport function uploadFile(_ref) {\n  var id = _ref.id,\n      _ref$name = _ref.name,\n      name = _ref$name === void 0 ? null : _ref$name,\n      _ref$file = _ref.file,\n      file = _ref$file === void 0 ? null : _ref$file,\n      _ref$progressListener = _ref.progressListener,\n      progressListener = _ref$progressListener === void 0 ? null : _ref$progressListener;\n  return new Promise(function _callee(resolve, reject) {\n    var ref, metadata, convertedFile;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ref = objectName + \"/\" + id;\n            metadata = {\n              contentType: 'image/jpeg'\n            };\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(convertFileToBlob({\n              file: file\n            }).catch(function (error) {\n              reject(error);\n            }));\n\n          case 4:\n            convertedFile = _context.sent;\n            storage.uploadFile({\n              ref: ref,\n              name: name,\n              file: convertedFile,\n              progressListener: progressListener,\n              metadata: metadata\n            }).then(function (_ref2) {\n              var url = _ref2.url;\n              resolve({\n                url: url\n              });\n            }).catch(function (error) {\n              reject(error);\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n}","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/services/storage/user.js"],"names":["storage","convertFileToBlob","objectName","uploadFile","id","name","file","progressListener","Promise","resolve","reject","ref","metadata","contentType","catch","error","convertedFile","then","url"],"mappings":";AAAA,SAASA,OAAT;AACA,SAASC,iBAAT;AAEA,IAAMC,UAAU,GAAG,OAAnB;AAEA,OAAO,SAASC,UAAT,OAA+E;AAAA,MAAzDC,EAAyD,QAAzDA,EAAyD;AAAA,uBAArDC,IAAqD;AAAA,MAArDA,IAAqD,0BAA9C,IAA8C;AAAA,uBAAxCC,IAAwC;AAAA,MAAxCA,IAAwC,0BAAjC,IAAiC;AAAA,mCAA3BC,gBAA2B;AAAA,MAA3BA,gBAA2B,sCAAR,IAAQ;AACpF,SAAO,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACXC,YAAAA,GADW,GACFT,UADE,SACYE,EADZ;AAGXQ,YAAAA,QAHW,GAGA;AACfC,cAAAA,WAAW,EAAE;AADE,aAHA;AAAA;AAAA,6CAOWZ,iBAAiB,CAAC;AAAEK,cAAAA,IAAI,EAAJA;AAAF,aAAD,CAAjB,CAA4BQ,KAA5B,CAAkC,UAAAC,KAAK,EAAI;AAErEL,cAAAA,MAAM,CAACK,KAAD,CAAN;AACD,aAH2B,CAPX;;AAAA;AAOXC,YAAAA,aAPW;AAYjBhB,YAAAA,OAAO,CACJG,UADH,CACc;AAAEQ,cAAAA,GAAG,EAAHA,GAAF;AAAON,cAAAA,IAAI,EAAJA,IAAP;AAAaC,cAAAA,IAAI,EAAEU,aAAnB;AAAkCT,cAAAA,gBAAgB,EAAhBA,gBAAlC;AAAoDK,cAAAA,QAAQ,EAARA;AAApD,aADd,EAEGK,IAFH,CAEQ,iBAAa;AAAA,kBAAVC,GAAU,SAAVA,GAAU;AACjBT,cAAAA,OAAO,CAAC;AAAES,gBAAAA,GAAG,EAAHA;AAAF,eAAD,CAAP;AACD,aAJH,EAKGJ,KALH,CAKS,UAAAC,KAAK,EAAI;AACdL,cAAAA,MAAM,CAACK,KAAD,CAAN;AACD,aAPH;;AAZiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AAqBD","sourcesContent":["import { storage } from \"../../marslab-library-react-native/utils/helper\";\r\nimport { convertFileToBlob } from \"../../marslab-library-react-native/utils/common\";\r\n\r\nconst objectName = \"users\";\r\n\r\nexport function uploadFile({ id, name = null, file = null, progressListener = null }) {\r\n  return new Promise(async (resolve, reject) => {\r\n    const ref = `${objectName}/${id}`;\r\n\r\n    const metadata = {\r\n      contentType: 'image/jpeg',\r\n    };\r\n\r\n    const convertedFile = await convertFileToBlob({ file }).catch(error => {\r\n      //console.log(error)\r\n      reject(error)\r\n    });\r\n\r\n    storage\r\n      .uploadFile({ ref, name, file: convertedFile, progressListener, metadata })\r\n      .then(({ url }) => {\r\n        resolve({ url });\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}