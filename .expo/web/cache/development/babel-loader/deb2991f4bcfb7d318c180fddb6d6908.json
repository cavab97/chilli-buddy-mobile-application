{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from \"../isEmpty\";\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\nvar ListViewDataSource = function () {\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  ListViewDataSource.prototype.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n\n    return this.cloneWithRowsAndSections({\n      s1: dataBlob\n    }, ['s1'], rowIds);\n  };\n\n  ListViewDataSource.prototype.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  };\n\n  ListViewDataSource.prototype.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  };\n\n  ListViewDataSource.prototype.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  };\n\n  ListViewDataSource.prototype.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  };\n\n  ListViewDataSource.prototype.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  };\n\n  ListViewDataSource.prototype.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n\n    return null;\n  };\n\n  ListViewDataSource.prototype.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n\n    return null;\n  };\n\n  ListViewDataSource.prototype.getSectionLengths = function getSectionLengths() {\n    var results = [];\n\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n\n    return results;\n  };\n\n  ListViewDataSource.prototype.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  };\n\n  ListViewDataSource.prototype.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  };\n\n  ListViewDataSource.prototype._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    this._dirtySections = [];\n    this._dirtyRows = [];\n    var dirty;\n\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex];\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n\n  var result = {};\n\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n\n  return result;\n}\n\nexport default ListViewDataSource;","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/node_modules/react-native-web/dist/vendor/react-native/ListView/ListViewDataSource.js"],"names":["_classCallCheck","instance","Constructor","TypeError","invariant","isEmpty","warning","defaultGetRowData","dataBlob","sectionID","rowID","defaultGetSectionHeaderData","ListViewDataSource","params","rowHasChanged","_rowHasChanged","_getRowData","getRowData","_sectionHeaderHasChanged","sectionHeaderHasChanged","_getSectionHeaderData","getSectionHeaderData","_dataBlob","_dirtyRows","_dirtySections","_cachedRowCount","rowIdentities","sectionIdentities","prototype","cloneWithRows","rowIds","concat","cloneWithRowsAndSections","s1","length","newSource","Object","keys","forEach","push","countRows","_calculateDirtyArrays","getRowCount","getRowAndSectionCount","rowShouldUpdate","sectionIndex","rowIndex","needsUpdate","undefined","getRowIDForFlatIndex","index","accessIndex","ii","getSectionIDForFlatIndex","getSectionLengths","results","sectionHeaderShouldUpdate","prevDataBlob","prevSectionIDs","prevRowIDs","prevSectionsHash","keyedDictionaryFromArray","prevRowsHash","dirty","sIndex","rIndex","allRowIDs","totalRows","sectionIdx","rowIDs","arr","result","key"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @providesModule ListViewDataSource\n * \n * @format\n */\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport invariant from 'fbjs/lib/invariant';\nimport isEmpty from '../isEmpty';\nimport warning from 'fbjs/lib/warning';\n\nfunction defaultGetRowData(dataBlob, sectionID, rowID) {\n  return dataBlob[sectionID][rowID];\n}\n\nfunction defaultGetSectionHeaderData(dataBlob, sectionID) {\n  return dataBlob[sectionID];\n}\n\n/**\n * Provides efficient data processing and access to the\n * `ListView` component.  A `ListViewDataSource` is created with functions for\n * extracting data from the input blob, and comparing elements (with default\n * implementations for convenience).  The input blob can be as simple as an\n * array of strings, or an object with rows nested inside section objects.\n *\n * To update the data in the datasource, use `cloneWithRows` (or\n * `cloneWithRowsAndSections` if you care about sections).  The data in the\n * data source is immutable, so you can't modify it directly.  The clone methods\n * suck in the new data and compute a diff for each row so ListView knows\n * whether to re-render it or not.\n *\n * In this example, a component receives data in chunks, handled by\n * `_onDataArrived`, which concats the new data onto the old data and updates the\n * data source.  We use `concat` to create a new array - mutating `this._data`,\n * e.g. with `this._data.push(newRowData)`, would be an error. `_rowHasChanged`\n * understands the shape of the row data and knows how to efficiently compare\n * it.\n *\n * ```\n * getInitialState: function() {\n *   var ds = new ListView.DataSource({rowHasChanged: this._rowHasChanged});\n *   return {ds};\n * },\n * _onDataArrived(newData) {\n *   this._data = this._data.concat(newData);\n *   this.setState({\n *     ds: this.state.ds.cloneWithRows(this._data)\n *   });\n * }\n * ```\n */\n\nvar ListViewDataSource = function () {\n  /**\n   * You can provide custom extraction and `hasChanged` functions for section\n   * headers and rows.  If absent, data will be extracted with the\n   * `defaultGetRowData` and `defaultGetSectionHeaderData` functions.\n   *\n   * The default extractor expects data of one of the following forms:\n   *\n   *      { sectionID_1: { rowID_1: <rowData1>, ... }, ... }\n   *\n   *    or\n   *\n   *      { sectionID_1: [ <rowData1>, <rowData2>, ... ], ... }\n   *\n   *    or\n   *\n   *      [ [ <rowData1>, <rowData2>, ... ], ... ]\n   *\n   * The constructor takes in a params argument that can contain any of the\n   * following:\n   *\n   * - getRowData(dataBlob, sectionID, rowID);\n   * - getSectionHeaderData(dataBlob, sectionID);\n   * - rowHasChanged(prevRowData, nextRowData);\n   * - sectionHeaderHasChanged(prevSectionData, nextSectionData);\n   */\n  function ListViewDataSource(params) {\n    _classCallCheck(this, ListViewDataSource);\n\n    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');\n    this._rowHasChanged = params.rowHasChanged;\n    this._getRowData = params.getRowData || defaultGetRowData;\n    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;\n    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;\n\n    this._dataBlob = null;\n    this._dirtyRows = [];\n    this._dirtySections = [];\n    this._cachedRowCount = 0;\n\n    // These two private variables are accessed by outsiders because ListView\n    // uses them to iterate over the data in this class.\n    this.rowIdentities = [];\n    this.sectionIdentities = [];\n  }\n\n  /**\n   * Clones this `ListViewDataSource` with the specified `dataBlob` and\n   * `rowIdentities`. The `dataBlob` is just an arbitrary blob of data. At\n   * construction an extractor to get the interesting information was defined\n   * (or the default was used).\n   *\n   * The `rowIdentities` is a 2D array of identifiers for rows.\n   * ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...].  If not provided, it's\n   * assumed that the keys of the section data are the row identities.\n   *\n   * Note: This function does NOT clone the data in this data source. It simply\n   * passes the functions defined at construction to a new data source with\n   * the data specified. If you wish to maintain the existing data you must\n   * handle merging of old and new data separately and then pass that into\n   * this function as the `dataBlob`.\n   */\n\n\n  ListViewDataSource.prototype.cloneWithRows = function cloneWithRows(dataBlob, rowIdentities) {\n    var rowIds = rowIdentities ? [[].concat(rowIdentities)] : null;\n    if (!this._sectionHeaderHasChanged) {\n      this._sectionHeaderHasChanged = function () {\n        return false;\n      };\n    }\n    return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);\n  };\n\n  /**\n   * This performs the same function as the `cloneWithRows` function but here\n   * you also specify what your `sectionIdentities` are. If you don't care\n   * about sections you should safely be able to use `cloneWithRows`.\n   *\n   * `sectionIdentities` is an array of identifiers for sections.\n   * ie. ['s1', 's2', ...].  The identifiers should correspond to the keys or array indexes\n   * of the data you wish to include.  If not provided, it's assumed that the\n   * keys of dataBlob are the section identities.\n   *\n   * Note: this returns a new object!\n   *\n   * ```\n   * const dataSource = ds.cloneWithRowsAndSections({\n   *   addresses: ['row 1', 'row 2'],\n   *   phone_numbers: ['data 1', 'data 2'],\n   * }, ['phone_numbers']);\n   * ```\n   */\n\n\n  ListViewDataSource.prototype.cloneWithRowsAndSections = function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {\n    invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');\n    invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');\n\n    var newSource = new ListViewDataSource({\n      getRowData: this._getRowData,\n      getSectionHeaderData: this._getSectionHeaderData,\n      rowHasChanged: this._rowHasChanged,\n      sectionHeaderHasChanged: this._sectionHeaderHasChanged\n    });\n    newSource._dataBlob = dataBlob;\n    if (sectionIdentities) {\n      newSource.sectionIdentities = sectionIdentities;\n    } else {\n      newSource.sectionIdentities = Object.keys(dataBlob);\n    }\n    if (rowIdentities) {\n      newSource.rowIdentities = rowIdentities;\n    } else {\n      newSource.rowIdentities = [];\n      newSource.sectionIdentities.forEach(function (sectionID) {\n        newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));\n      });\n    }\n    newSource._cachedRowCount = countRows(newSource.rowIdentities);\n\n    newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);\n\n    return newSource;\n  };\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowCount` will return the number of rows in the filtered data source.\n   */\n\n\n  ListViewDataSource.prototype.getRowCount = function getRowCount() {\n    return this._cachedRowCount;\n  };\n\n  /**\n   * Returns the total number of rows in the data source (see `getRowCount` for how this is calculated) plus the number of sections in the data.\n   *\n   * If you are specifying the rowIdentities or sectionIdentities, then `getRowAndSectionCount` will return the number of rows & sections in the filtered data source.\n   */\n\n\n  ListViewDataSource.prototype.getRowAndSectionCount = function getRowAndSectionCount() {\n    return this._cachedRowCount + this.sectionIdentities.length;\n  };\n\n  /**\n   * Returns if the row is dirtied and needs to be rerendered\n   */\n\n\n  ListViewDataSource.prototype.rowShouldUpdate = function rowShouldUpdate(sectionIndex, rowIndex) {\n    var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);\n    return needsUpdate;\n  };\n\n  /**\n   * Gets the data required to render the row.\n   */\n\n\n  ListViewDataSource.prototype.getRowData = function getRowData(sectionIndex, rowIndex) {\n    var sectionID = this.sectionIdentities[sectionIndex];\n    var rowID = this.rowIdentities[sectionIndex][rowIndex];\n    warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);\n    return this._getRowData(this._dataBlob, sectionID, rowID);\n  };\n\n  /**\n   * Gets the rowID at index provided if the dataSource arrays were flattened,\n   * or null of out of range indexes.\n   */\n\n\n  ListViewDataSource.prototype.getRowIDForFlatIndex = function getRowIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.rowIdentities[ii][accessIndex];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Gets the sectionID at index provided if the dataSource arrays were flattened,\n   * or null for out of range indexes.\n   */\n\n\n  ListViewDataSource.prototype.getSectionIDForFlatIndex = function getSectionIDForFlatIndex(index) {\n    var accessIndex = index;\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      if (accessIndex >= this.rowIdentities[ii].length) {\n        accessIndex -= this.rowIdentities[ii].length;\n      } else {\n        return this.sectionIdentities[ii];\n      }\n    }\n    return null;\n  };\n\n  /**\n   * Returns an array containing the number of rows in each section\n   */\n\n\n  ListViewDataSource.prototype.getSectionLengths = function getSectionLengths() {\n    var results = [];\n    for (var ii = 0; ii < this.sectionIdentities.length; ii++) {\n      results.push(this.rowIdentities[ii].length);\n    }\n    return results;\n  };\n\n  /**\n   * Returns if the section header is dirtied and needs to be rerendered\n   */\n\n\n  ListViewDataSource.prototype.sectionHeaderShouldUpdate = function sectionHeaderShouldUpdate(sectionIndex) {\n    var needsUpdate = this._dirtySections[sectionIndex];\n    warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);\n    return needsUpdate;\n  };\n\n  /**\n   * Gets the data required to render the section header\n   */\n\n\n  ListViewDataSource.prototype.getSectionHeaderData = function getSectionHeaderData(sectionIndex) {\n    if (!this._getSectionHeaderData) {\n      return null;\n    }\n    var sectionID = this.sectionIdentities[sectionIndex];\n    warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);\n    return this._getSectionHeaderData(this._dataBlob, sectionID);\n  };\n\n  /**\n   * Private members and methods.\n   */\n\n  // These two 'protected' variables are accessed by ListView to iterate over\n  // the data in this class.\n\n\n  ListViewDataSource.prototype._calculateDirtyArrays = function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {\n    // construct a hashmap of the existing (old) id arrays\n    var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);\n    var prevRowsHash = {};\n    for (var ii = 0; ii < prevRowIDs.length; ii++) {\n      var sectionID = prevSectionIDs[ii];\n      warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);\n      prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);\n    }\n\n    // compare the 2 identity array and get the dirtied rows\n    this._dirtySections = [];\n    this._dirtyRows = [];\n\n    var dirty;\n    for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {\n      var sectionID = this.sectionIdentities[sIndex];\n      // dirty if the sectionHeader is new or _sectionHasChanged is true\n      dirty = !prevSectionsHash[sectionID];\n      var sectionHeaderHasChanged = this._sectionHeaderHasChanged;\n      if (!dirty && sectionHeaderHasChanged) {\n        dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));\n      }\n      this._dirtySections.push(!!dirty);\n\n      this._dirtyRows[sIndex] = [];\n      for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {\n        var rowID = this.rowIdentities[sIndex][rIndex];\n        // dirty if the section is new, row is new or _rowHasChanged is true\n        dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));\n        this._dirtyRows[sIndex].push(!!dirty);\n      }\n    }\n  };\n\n  return ListViewDataSource;\n}();\n\nfunction countRows(allRowIDs) {\n  var totalRows = 0;\n  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {\n    var rowIDs = allRowIDs[sectionIdx];\n    totalRows += rowIDs.length;\n  }\n  return totalRows;\n}\n\nfunction keyedDictionaryFromArray(arr) {\n  if (isEmpty(arr)) {\n    return {};\n  }\n  var result = {};\n  for (var ii = 0; ii < arr.length; ii++) {\n    var key = arr[ii];\n    warning(!result[key], 'Value appears more than once in array: ' + key);\n    result[key] = true;\n  }\n  return result;\n}\n\nexport default ListViewDataSource;"]},"metadata":{},"sourceType":"module"}