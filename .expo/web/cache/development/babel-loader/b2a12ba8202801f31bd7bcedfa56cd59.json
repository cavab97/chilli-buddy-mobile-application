{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nimport performanceNow from 'fbjs/lib/performanceNow';\nimport warning from 'fbjs/lib/warning';\n\nvar Info = function Info() {\n  _classCallCheck(this, Info);\n\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n};\n\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\n\nvar _sampleRate = DEBUG ? 1 : null;\n\nvar FillRateHelper = function () {\n  FillRateHelper.addListener = function addListener(callback) {\n    warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');\n\n    _listeners.push(callback);\n\n    return {\n      remove: function remove() {\n        _listeners = _listeners.filter(function (listener) {\n          return callback !== listener;\n        });\n      }\n    };\n  };\n\n  FillRateHelper.setSampleRate = function setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  };\n\n  FillRateHelper.setMinSampleCount = function setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  };\n\n  function FillRateHelper(getFrameMetrics) {\n    _classCallCheck(this, FillRateHelper);\n\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n\n    this._resetData();\n  }\n\n  FillRateHelper.prototype.activate = function activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = performanceNow();\n    }\n  };\n\n  FillRateHelper.prototype.deactivateAndFlush = function deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n\n    var start = this._samplesStartTime;\n\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n\n    if (this._info.sample_count < _minSampleCount) {\n      this._resetData();\n\n      return;\n    }\n\n    var total_time_spent = performanceNow() - start;\n\n    var info = _extends({}, this._info, {\n      total_time_spent: total_time_spent\n    });\n\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived: derived,\n        info: info\n      });\n    }\n\n    _listeners.forEach(function (listener) {\n      return listener(info);\n    });\n\n    this._resetData();\n  };\n\n  FillRateHelper.prototype.computeBlankness = function computeBlankness(props, state, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n      return 0;\n    }\n\n    var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength;\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n    var now = performanceNow();\n\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n\n    this._anyBlankStartTime = null;\n\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = state.first;\n\n    var firstFrame = this._getFrameMetrics(first);\n\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    }\n\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n\n    var blankBottom = 0;\n    var last = state.last;\n\n    var lastFrame = this._getFrameMetrics(last);\n\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    }\n\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n\n    return blankness;\n  };\n\n  FillRateHelper.prototype.enabled = function enabled() {\n    return this._enabled;\n  };\n\n  FillRateHelper.prototype._resetData = function _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  };\n\n  return FillRateHelper;\n}();\n\nexport default FillRateHelper;","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/node_modules/react-native-web/dist/vendor/react-native/FillRateHelper/index.js"],"names":["_classCallCheck","instance","Constructor","TypeError","performanceNow","warning","Info","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","addListener","callback","push","remove","filter","listener","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","prototype","activate","console","debug","deactivateAndFlush","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","computeBlankness","props","state","scrollMetrics","getItemCount","data","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","now","blankTop","first","firstFrame","last","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","enabled"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\nimport performanceNow from 'fbjs/lib/performanceNow';\nimport warning from 'fbjs/lib/warning';\n\nvar Info = function Info() {\n  _classCallCheck(this, Info);\n\n  this.any_blank_count = 0;\n  this.any_blank_ms = 0;\n  this.any_blank_speed_sum = 0;\n  this.mostly_blank_count = 0;\n  this.mostly_blank_ms = 0;\n  this.pixels_blank = 0;\n  this.pixels_sampled = 0;\n  this.pixels_scrolled = 0;\n  this.total_time_spent = 0;\n  this.sample_count = 0;\n};\n\nvar DEBUG = false;\n\nvar _listeners = [];\nvar _minSampleCount = 10;\nvar _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\n\nvar FillRateHelper = function () {\n  FillRateHelper.addListener = function addListener(callback) {\n    warning(_sampleRate !== null, 'Call `FillRateHelper.setSampleRate` before `addListener`.');\n    _listeners.push(callback);\n    return {\n      remove: function remove() {\n        _listeners = _listeners.filter(function (listener) {\n          return callback !== listener;\n        });\n      }\n    };\n  };\n\n  FillRateHelper.setSampleRate = function setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  };\n\n  FillRateHelper.setMinSampleCount = function setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  };\n\n  function FillRateHelper(getFrameMetrics) {\n    _classCallCheck(this, FillRateHelper);\n\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n\n  FillRateHelper.prototype.activate = function activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = performanceNow();\n    }\n  };\n\n  FillRateHelper.prototype.deactivateAndFlush = function deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    var start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    var total_time_spent = performanceNow() - start;\n    var info = Object.assign({}, this._info, {\n      total_time_spent: total_time_spent\n    });\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', { derived: derived, info: info });\n    }\n    _listeners.forEach(function (listener) {\n      return listener(info);\n    });\n    this._resetData();\n  };\n\n  FillRateHelper.prototype.computeBlankness = function computeBlankness(props, state, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || this._samplesStartTime == null) {\n      return 0;\n    }\n    var dOffset = scrollMetrics.dOffset,\n        offset = scrollMetrics.offset,\n        velocity = scrollMetrics.velocity,\n        visibleLength = scrollMetrics.visibleLength;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    var now = performanceNow();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n\n    var blankTop = 0;\n    var first = state.first;\n    var firstFrame = this._getFrameMetrics(first);\n    while (first <= state.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n    var blankBottom = 0;\n    var last = state.last;\n    var lastFrame = this._getFrameMetrics(last);\n    while (last >= state.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  };\n\n  FillRateHelper.prototype.enabled = function enabled() {\n    return this._enabled;\n  };\n\n  FillRateHelper.prototype._resetData = function _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  };\n\n  return FillRateHelper;\n}();\n\nexport default FillRateHelper;"]},"metadata":{},"sourceType":"module"}