{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as database from \"../../marslab-library-react-native/utils/helper/database\";\nexport function readCategories() {\n  var ref = \"settings/shops/categories\";\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: ref\n    }).orderBy(\"no\", \"asc\").where(\"deleted_at\", \"==\", null).get().then(function (QuerySnapshot) {\n      var categories = [{\n        id: \"\",\n        title: \"All\",\n        tags: [\"All\"]\n      }];\n      QuerySnapshot.forEach(function (snapshot) {\n        var tags = snapshot.data().tags;\n        tags.push(\"All\");\n        categories.push(_objectSpread({}, snapshot.data(), {\n          id: snapshot.id,\n          tags: tags\n        }));\n      });\n      resolve(categories);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readTags() {\n  var ref = \"settings/shops/tags\";\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: ref\n    }).where(\"deleted_at\", \"==\", null).get().then(function (QuerySnapshot) {\n      var tags = [{\n        id: \"All\",\n        title: \"All\"\n      }];\n      QuerySnapshot.forEach(function (snapshot) {\n        tags.push(_objectSpread({}, snapshot.data(), {\n          id: snapshot.id\n        }));\n      });\n      resolve(tags);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readInfo() {\n  var ref = \"settingPackaging0/info\";\n  return new Promise(function (resolve, reject) {\n    database.readData({\n      ref: ref\n    }).then(function (info) {\n      resolve(info);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/services/database/settings.js"],"names":["database","readCategories","ref","Promise","resolve","reject","readTable","orderBy","where","get","then","QuerySnapshot","categories","id","title","tags","forEach","snapshot","data","push","catch","error","readTags","readInfo","readData","info"],"mappings":";;;;;;AAAA,OAAO,KAAKA,QAAZ;AAEA,OAAO,SAASC,cAAT,GAA0B;AAC7B,MAAMC,GAAG,GAAG,2BAAZ;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,IAAAA,QAAQ,CACHM,SADL,CACe;AAACJ,MAAAA,GAAG,EAAHA;AAAD,KADf,EAEKK,OAFL,CAEa,IAFb,EAEmB,KAFnB,EAGKC,KAHL,CAGW,YAHX,EAGyB,IAHzB,EAG+B,IAH/B,EAIKC,GAJL,GAKKC,IALL,CAKU,UAAAC,aAAa,EAAI;AACnB,UAAMC,UAAU,GAAG,CAAC;AAAEC,QAAAA,EAAE,EAAE,EAAN;AAAUC,QAAAA,KAAK,EAAE,KAAjB;AAAwBC,QAAAA,IAAI,EAAE,CAAC,KAAD;AAA9B,OAAD,CAAnB;AAEAJ,MAAAA,aAAa,CAACK,OAAd,CAAsB,UAAAC,QAAQ,EAAE;AAC5B,YAAMF,IAAI,GAAGE,QAAQ,CAACC,IAAT,GAAgBH,IAA7B;AACAA,QAAAA,IAAI,CAACI,IAAL,CAAU,KAAV;AACAP,QAAAA,UAAU,CAACO,IAAX,mBAAoBF,QAAQ,CAACC,IAAT,EAApB;AAAqCL,UAAAA,EAAE,EAACI,QAAQ,CAACJ,EAAjD;AAAqDE,UAAAA,IAAI,EAAJA;AAArD;AACH,OAJD;AAMAX,MAAAA,OAAO,CAACQ,UAAD,CAAP;AACH,KAfL,EAgBKQ,KAhBL,CAgBW,UAAAC,KAAK,EAAI;AACZhB,MAAAA,MAAM,CAACgB,KAAD,CAAN;AACH,KAlBL;AAmBH,GApBM,CAAP;AAqBH;AAED,OAAO,SAASC,QAAT,GAAoB;AACvB,MAAMpB,GAAG,GAAG,qBAAZ;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,IAAAA,QAAQ,CACHM,SADL,CACe;AAACJ,MAAAA,GAAG,EAAHA;AAAD,KADf,EAEKM,KAFL,CAEW,YAFX,EAEyB,IAFzB,EAE+B,IAF/B,EAGKC,GAHL,GAIKC,IAJL,CAIU,UAAAC,aAAa,EAAI;AACnB,UAAMI,IAAI,GAAG,CAAC;AAAEF,QAAAA,EAAE,EAAE,KAAN;AAAaC,QAAAA,KAAK,EAAE;AAApB,OAAD,CAAb;AAEAH,MAAAA,aAAa,CAACK,OAAd,CAAsB,UAAAC,QAAQ,EAAE;AAC5BF,QAAAA,IAAI,CAACI,IAAL,mBAAcF,QAAQ,CAACC,IAAT,EAAd;AAA+BL,UAAAA,EAAE,EAACI,QAAQ,CAACJ;AAA3C;AACH,OAFD;AAIAT,MAAAA,OAAO,CAACW,IAAD,CAAP;AACH,KAZL,EAaKK,KAbL,CAaW,UAAAC,KAAK,EAAI;AACZhB,MAAAA,MAAM,CAACgB,KAAD,CAAN;AACH,KAfL;AAgBH,GAjBM,CAAP;AAkBH;AAED,OAAO,SAASE,QAAT,GAAoB;AACvB,MAAMrB,GAAG,GAAG,wBAAZ;AACA,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCL,IAAAA,QAAQ,CACHwB,QADL,CACc;AAACtB,MAAAA,GAAG,EAAHA;AAAD,KADd,EAEKQ,IAFL,CAEU,UAAAe,IAAI,EAAI;AAEVrB,MAAAA,OAAO,CAACqB,IAAD,CAAP;AACH,KALL,EAMKL,KANL,CAMW,UAAAC,KAAK,EAAI;AACZhB,MAAAA,MAAM,CAACgB,KAAD,CAAN;AACH,KARL;AASH,GAVM,CAAP;AAWH","sourcesContent":["import * as database from \"../../marslab-library-react-native/utils/helper/database\";\r\n\r\nexport function readCategories() {\r\n    const ref = \"settings/shops/categories\";\r\n    return new Promise((resolve, reject) => {\r\n        database\r\n            .readTable({ref})\r\n            .orderBy(\"no\", \"asc\")\r\n            .where(\"deleted_at\", \"==\", null)\r\n            .get()\r\n            .then(QuerySnapshot => {\r\n                const categories = [{ id: \"\", title: \"All\", tags: [\"All\"] }]\r\n\r\n                QuerySnapshot.forEach(snapshot=>{\r\n                    const tags = snapshot.data().tags;\r\n                    tags.push(\"All\");\r\n                    categories.push({...snapshot.data(), id:snapshot.id, tags})\r\n                })\r\n                \r\n                resolve(categories);\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function readTags() {\r\n    const ref = \"settings/shops/tags\";\r\n    return new Promise((resolve, reject) => {\r\n        database\r\n            .readTable({ref})\r\n            .where(\"deleted_at\", \"==\", null)\r\n            .get()\r\n            .then(QuerySnapshot => {\r\n                const tags = [{ id: \"All\", title: \"All\" }]\r\n\r\n                QuerySnapshot.forEach(snapshot=>{\r\n                    tags.push({...snapshot.data(), id:snapshot.id})\r\n                })\r\n                \r\n                resolve(tags);\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nexport function readInfo() {\r\n    const ref = \"settingPackaging0/info\";\r\n    return new Promise((resolve, reject) => {\r\n        database\r\n            .readData({ref})\r\n            .then(info => {\r\n                \r\n                resolve(info);\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}"]},"metadata":{},"sourceType":"module"}