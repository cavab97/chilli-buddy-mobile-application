{"ast":null,"code":"var accessibilityComponentTypeToRole = {\n  button: 'button',\n  none: 'presentation'\n};\nvar accessibilityTraitsToRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region'\n};\n\nvar propsToAriaRole = function propsToAriaRole(_ref) {\n  var accessibilityComponentType = _ref.accessibilityComponentType,\n      accessibilityRole = _ref.accessibilityRole,\n      accessibilityTraits = _ref.accessibilityTraits;\n\n  if (accessibilityRole) {\n    return accessibilityRole;\n  }\n\n  if (accessibilityTraits) {\n    var trait = Array.isArray(accessibilityTraits) ? accessibilityTraits[0] : accessibilityTraits;\n    return accessibilityTraitsToRole[trait];\n  }\n\n  if (accessibilityComponentType) {\n    return accessibilityComponentTypeToRole[accessibilityComponentType];\n  }\n};\n\nexport default propsToAriaRole;","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/node_modules/react-native-web/dist/modules/AccessibilityUtil/propsToAriaRole.js"],"names":["accessibilityComponentTypeToRole","button","none","accessibilityTraitsToRole","adjustable","header","image","link","search","summary","propsToAriaRole","_ref","accessibilityComponentType","accessibilityRole","accessibilityTraits","trait","Array","isArray"],"mappings":"AASA,IAAIA,gCAAgC,GAAG;AACrCC,EAAAA,MAAM,EAAE,QAD6B;AAErCC,EAAAA,IAAI,EAAE;AAF+B,CAAvC;AAKA,IAAIC,yBAAyB,GAAG;AAC9BC,EAAAA,UAAU,EAAE,QADkB;AAE9BH,EAAAA,MAAM,EAAE,QAFsB;AAG9BI,EAAAA,MAAM,EAAE,SAHsB;AAI9BC,EAAAA,KAAK,EAAE,KAJuB;AAK9BC,EAAAA,IAAI,EAAE,MALwB;AAM9BL,EAAAA,IAAI,EAAE,cANwB;AAO9BM,EAAAA,MAAM,EAAE,QAPsB;AAQ9BC,EAAAA,OAAO,EAAE;AARqB,CAAhC;;AAgBA,IAAIC,eAAe,GAAG,SAASA,eAAT,CAAyBC,IAAzB,EAA+B;AACnD,MAAIC,0BAA0B,GAAGD,IAAI,CAACC,0BAAtC;AAAA,MACIC,iBAAiB,GAAGF,IAAI,CAACE,iBAD7B;AAAA,MAEIC,mBAAmB,GAAGH,IAAI,CAACG,mBAF/B;;AAIA,MAAID,iBAAJ,EAAuB;AACrB,WAAOA,iBAAP;AACD;;AACD,MAAIC,mBAAJ,EAAyB;AACvB,QAAIC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,mBAAd,IAAqCA,mBAAmB,CAAC,CAAD,CAAxD,GAA8DA,mBAA1E;AACA,WAAOX,yBAAyB,CAACY,KAAD,CAAhC;AACD;;AACD,MAAIH,0BAAJ,EAAgC;AAC9B,WAAOZ,gCAAgC,CAACY,0BAAD,CAAvC;AACD;AACF,CAfD;;AAiBA,eAAeF,eAAf","sourcesContent":["/**\n * Copyright (c) 2017-present, Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar accessibilityComponentTypeToRole = {\n  button: 'button',\n  none: 'presentation'\n};\n\nvar accessibilityTraitsToRole = {\n  adjustable: 'slider',\n  button: 'button',\n  header: 'heading',\n  image: 'img',\n  link: 'link',\n  none: 'presentation',\n  search: 'search',\n  summary: 'region'\n};\n\n/**\n * Provides compatibility with React Native's \"accessibilityTraits\" (iOS) and\n * \"accessibilityComponentType\" (Android), converting them to equivalent ARIA\n * roles.\n */\nvar propsToAriaRole = function propsToAriaRole(_ref) {\n  var accessibilityComponentType = _ref.accessibilityComponentType,\n      accessibilityRole = _ref.accessibilityRole,\n      accessibilityTraits = _ref.accessibilityTraits;\n\n  if (accessibilityRole) {\n    return accessibilityRole;\n  }\n  if (accessibilityTraits) {\n    var trait = Array.isArray(accessibilityTraits) ? accessibilityTraits[0] : accessibilityTraits;\n    return accessibilityTraitsToRole[trait];\n  }\n  if (accessibilityComponentType) {\n    return accessibilityComponentTypeToRole[accessibilityComponentType];\n  }\n};\n\nexport default propsToAriaRole;"]},"metadata":{},"sourceType":"module"}