{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ZuMei\\\\gogogainUser\\\\node_modules\\\\react-native-phone-input\\\\lib\\\\countryPicker.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Picker from \"react-native-web/dist/exports/Picker\";\nimport PropTypes from 'prop-types';\nimport Country from \"./country\";\nimport styles from \"./styles\";\nvar PickerItem = Picker.Item;\nvar propTypes = {\n  buttonColor: PropTypes.string,\n  labels: PropTypes.array,\n  confirmText: PropTypes.string,\n  cancelText: PropTypes.string,\n  itemStyle: PropTypes.object,\n  onSubmit: PropTypes.func,\n  onPressCancel: PropTypes.func,\n  onPressConfirm: PropTypes.func\n};\n\nvar CountryPicker = function (_Component) {\n  _inherits(CountryPicker, _Component);\n\n  var _super = _createSuper(CountryPicker);\n\n  function CountryPicker(props) {\n    var _this;\n\n    _classCallCheck(this, CountryPicker);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      buttonColor: _this.props.buttonColor || '#007AFF',\n      modalVisible: false,\n      selectedCountry: _this.props.selectedCountry || Country.getAll()[0]\n    };\n    _this.onPressCancel = _this.onPressCancel.bind(_assertThisInitialized(_this));\n    _this.onPressSubmit = _this.onPressSubmit.bind(_assertThisInitialized(_this));\n    _this.onValueChange = _this.onValueChange.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(CountryPicker, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        selectedCountry: nextProps.selectedCountry\n      });\n    }\n  }, {\n    key: \"selectCountry\",\n    value: function selectCountry(selectedCountry) {\n      this.setState({\n        selectedCountry: selectedCountry\n      });\n    }\n  }, {\n    key: \"onPressCancel\",\n    value: function onPressCancel() {\n      if (this.props.onPressCancel) {\n        this.props.onPressCancel();\n      }\n\n      this.setState({\n        modalVisible: false\n      });\n    }\n  }, {\n    key: \"onPressSubmit\",\n    value: function onPressSubmit() {\n      if (this.props.onPressConfirm) {\n        this.props.onPressConfirm();\n      }\n\n      if (this.props.onSubmit) {\n        this.props.onSubmit(this.state.selectedCountry);\n      }\n\n      this.setState({\n        modalVisible: false\n      });\n    }\n  }, {\n    key: \"onValueChange\",\n    value: function onValueChange(selectedCountry) {\n      this.setState({\n        selectedCountry: selectedCountry\n      });\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.setState({\n        modalVisible: true\n      });\n    }\n  }, {\n    key: \"renderItem\",\n    value: function renderItem(country, index) {\n      return React.createElement(PickerItem, {\n        key: country.iso2,\n        value: country.iso2,\n        label: country.name,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var buttonColor = this.state.buttonColor;\n      var itemStyle = this.props.itemStyle || {};\n      return React.createElement(Modal, {\n        animationType: \"slide\",\n        transparent: true,\n        visible: this.state.modalVisible,\n        onRequestClose: function onRequestClose() {\n          console.log('Country picker has been closed.');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.basicContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: [styles.modalContainer, {\n          backgroundColor: this.props.pickerBackgroundColor || 'white'\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }, React.createElement(View, {\n        style: styles.buttonView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: this.onPressCancel,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: [{\n          color: buttonColor\n        }, this.props.buttonTextStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }, this.props.cancelText || 'Cancel')), React.createElement(TouchableOpacity, {\n        onPress: this.onPressSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: [{\n          color: buttonColor\n        }, this.props.buttonTextStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }\n      }, this.props.confirmText || 'Confirm'))), React.createElement(View, {\n        style: styles.mainBox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }\n      }, React.createElement(Picker, {\n        ref: function ref(_ref) {\n          _this2.picker = _ref;\n        },\n        style: styles.bottomPicker,\n        selectedValue: this.state.selectedCountry,\n        onValueChange: function onValueChange(country) {\n          return _this2.onValueChange(country);\n        },\n        itemStyle: itemStyle,\n        mode: \"dialog\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 15\n        }\n      }, Country.getAll().map(function (country, index) {\n        return _this2.renderItem(country, index);\n      }))))));\n    }\n  }]);\n\n  return CountryPicker;\n}(Component);\n\nexport { CountryPicker as default };\nCountryPicker.propTypes = propTypes;","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/node_modules/react-native-phone-input/lib/countryPicker.js"],"names":["React","Component","PropTypes","Country","styles","PickerItem","Picker","Item","propTypes","buttonColor","string","labels","array","confirmText","cancelText","itemStyle","object","onSubmit","func","onPressCancel","onPressConfirm","CountryPicker","props","state","modalVisible","selectedCountry","getAll","bind","onPressSubmit","onValueChange","nextProps","setState","country","index","iso2","name","console","log","basicContainer","modalContainer","backgroundColor","pickerBackgroundColor","buttonView","color","buttonTextStyle","mainBox","ref","picker","bottomPicker","map","renderItem"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;AAEA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,OAAP;AACA,OAAOC,MAAP;AAEA,IAAMC,UAAU,GAAGC,MAAM,CAACC,IAA1B;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,WAAW,EAAEP,SAAS,CAACQ,MADP;AAEhBC,EAAAA,MAAM,EAAET,SAAS,CAACU,KAFF;AAGhBC,EAAAA,WAAW,EAAEX,SAAS,CAACQ,MAHP;AAIhBI,EAAAA,UAAU,EAAEZ,SAAS,CAACQ,MAJN;AAKhBK,EAAAA,SAAS,EAAEb,SAAS,CAACc,MALL;AAMhBC,EAAAA,QAAQ,EAAEf,SAAS,CAACgB,IANJ;AAOhBC,EAAAA,aAAa,EAAEjB,SAAS,CAACgB,IAPT;AAQhBE,EAAAA,cAAc,EAAElB,SAAS,CAACgB;AARV,CAAlB;;IAWqBG,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AAEA,UAAKC,KAAL,GAAa;AACXd,MAAAA,WAAW,EAAE,MAAKa,KAAL,CAAWb,WAAX,IAA0B,SAD5B;AAEXe,MAAAA,YAAY,EAAE,KAFH;AAGXC,MAAAA,eAAe,EAAE,MAAKH,KAAL,CAAWG,eAAX,IAA8BtB,OAAO,CAACuB,MAAR,GAAiB,CAAjB;AAHpC,KAAb;AAMA,UAAKP,aAAL,GAAqB,MAAKA,aAAL,CAAmBQ,IAAnB,+BAArB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,+BAArB;AACA,UAAKE,aAAL,GAAqB,MAAKA,aAAL,CAAmBF,IAAnB,+BAArB;AAXiB;AAYlB;;;;8CAEyBG,S,EAAW;AACnC,WAAKC,QAAL,CAAc;AACZN,QAAAA,eAAe,EAAEK,SAAS,CAACL;AADf,OAAd;AAGD;;;kCAEaA,e,EAAiB;AAC7B,WAAKM,QAAL,CAAc;AACZN,QAAAA,eAAe,EAAfA;AADY,OAAd;AAGD;;;oCAEe;AACd,UAAG,KAAKH,KAAL,CAAWH,aAAd,EAA4B;AAC1B,aAAKG,KAAL,CAAWH,aAAX;AACD;;AAED,WAAKY,QAAL,CAAc;AACZP,QAAAA,YAAY,EAAE;AADF,OAAd;AAGD;;;oCAEe;AACd,UAAG,KAAKF,KAAL,CAAWF,cAAd,EAA6B;AAC3B,aAAKE,KAAL,CAAWF,cAAX;AACD;;AAED,UAAI,KAAKE,KAAL,CAAWL,QAAf,EAAyB;AACvB,aAAKK,KAAL,CAAWL,QAAX,CAAoB,KAAKM,KAAL,CAAWE,eAA/B;AACD;;AAED,WAAKM,QAAL,CAAc;AACZP,QAAAA,YAAY,EAAE;AADF,OAAd;AAGD;;;kCAEaC,e,EAAiB;AAC7B,WAAKM,QAAL,CAAc;AACZN,QAAAA,eAAe,EAAfA;AADY,OAAd;AAGD;;;2BAEM;AACL,WAAKM,QAAL,CAAc;AACZP,QAAAA,YAAY,EAAE;AADF,OAAd;AAGD;;;+BAEUQ,O,EAASC,K,EAAO;AACzB,aAAO,oBAAC,UAAD;AAAY,QAAA,GAAG,EAAED,OAAO,CAACE,IAAzB;AAA+B,QAAA,KAAK,EAAEF,OAAO,CAACE,IAA9C;AAAoD,QAAA,KAAK,EAAEF,OAAO,CAACG,IAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;6BAEQ;AAAA;;AAAA,UACC1B,WADD,GACiB,KAAKc,KADtB,CACCd,WADD;AAEP,UAAMM,SAAS,GAAG,KAAKO,KAAL,CAAWP,SAAX,IAAwB,EAA1C;AACA,aACE,oBAAC,KAAD;AACE,QAAA,aAAa,EAAC,OADhB;AAEE,QAAA,WAAW,MAFb;AAGE,QAAA,OAAO,EAAE,KAAKQ,KAAL,CAAWC,YAHtB;AAIE,QAAA,cAAc,EAAE,0BAAM;AACpBY,UAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACD,SANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAQE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEjC,MAAM,CAACkC,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAE,CACLlC,MAAM,CAACmC,cADF,EAEL;AAAEC,UAAAA,eAAe,EAAE,KAAKlB,KAAL,CAAWmB,qBAAX,IAAoC;AAAvD,SAFK,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAME,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAErC,MAAM,CAACsC,UAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKvB,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC;AAAEwB,UAAAA,KAAK,EAAElC;AAAT,SAAD,EAAyB,KAAKa,KAAL,CAAWsB,eAApC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKtB,KAAL,CAAWR,UAAX,IAAyB,QAD5B,CADF,CADF,EAOE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAE,KAAKc,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC;AAAEe,UAAAA,KAAK,EAAElC;AAAT,SAAD,EAAyB,KAAKa,KAAL,CAAWsB,eAApC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,KAAKtB,KAAL,CAAWT,WAAX,IAA0B,SAD7B,CADF,CAPF,CANF,EAoBE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAET,MAAM,CAACyC,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AACE,QAAA,GAAG,EAAE,aAACC,IAAD,EAAS;AACZ,UAAA,MAAI,CAACC,MAAL,GAAcD,IAAd;AACD,SAHH;AAIE,QAAA,KAAK,EAAE1C,MAAM,CAAC4C,YAJhB;AAKE,QAAA,aAAa,EAAE,KAAKzB,KAAL,CAAWE,eAL5B;AAME,QAAA,aAAa,EAAE,uBAAAO,OAAO;AAAA,iBAAI,MAAI,CAACH,aAAL,CAAmBG,OAAnB,CAAJ;AAAA,SANxB;AAOE,QAAA,SAAS,EAAEjB,SAPb;AAQE,QAAA,IAAI,EAAC,QARP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAUGZ,OAAO,CAACuB,MAAR,GAAiBuB,GAAjB,CAAqB,UAACjB,OAAD,EAAUC,KAAV;AAAA,eAAoB,MAAI,CAACiB,UAAL,CAAgBlB,OAAhB,EAAyBC,KAAzB,CAApB;AAAA,OAArB,CAVH,CADF,CApBF,CADF,CARF,CADF;AAgDD;;;;EAtHwChC,S;;SAAtBoB,a;AAyHrBA,aAAa,CAACb,SAAd,GAA0BA,SAA1B","sourcesContent":["import React, { Component } from 'react';\nimport { Text, TouchableOpacity, View, Modal, Picker } from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport Country from './country';\nimport styles from './styles';\n\nconst PickerItem = Picker.Item;\n\nconst propTypes = {\n  buttonColor: PropTypes.string,\n  labels: PropTypes.array,\n  confirmText: PropTypes.string,\n  cancelText: PropTypes.string,\n  itemStyle: PropTypes.object,\n  onSubmit: PropTypes.func,\n  onPressCancel: PropTypes.func,\n  onPressConfirm: PropTypes.func,\n};\n\nexport default class CountryPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      buttonColor: this.props.buttonColor || '#007AFF',\n      modalVisible: false,\n      selectedCountry: this.props.selectedCountry || Country.getAll()[0],\n    };\n\n    this.onPressCancel = this.onPressCancel.bind(this);\n    this.onPressSubmit = this.onPressSubmit.bind(this);\n    this.onValueChange = this.onValueChange.bind(this);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      selectedCountry: nextProps.selectedCountry,\n    });\n  }\n\n  selectCountry(selectedCountry) {\n    this.setState({\n      selectedCountry,\n    });\n  }\n\n  onPressCancel() {\n    if(this.props.onPressCancel){\n      this.props.onPressCancel();\n    }\n\n    this.setState({\n      modalVisible: false,\n    });\n  }\n\n  onPressSubmit() {\n    if(this.props.onPressConfirm){\n      this.props.onPressConfirm();\n    }\n\n    if (this.props.onSubmit) {\n      this.props.onSubmit(this.state.selectedCountry);\n    }\n\n    this.setState({\n      modalVisible: false,\n    });\n  }\n\n  onValueChange(selectedCountry) {\n    this.setState({\n      selectedCountry,\n    });\n  }\n\n  show() {\n    this.setState({\n      modalVisible: true,\n    });\n  }\n\n  renderItem(country, index) {\n    return <PickerItem key={country.iso2} value={country.iso2} label={country.name} />;\n  }\n\n  render() {\n    const { buttonColor } = this.state;\n    const itemStyle = this.props.itemStyle || {};\n    return (\n      <Modal\n        animationType=\"slide\"\n        transparent\n        visible={this.state.modalVisible}\n        onRequestClose={() => {\n          console.log('Country picker has been closed.');\n        }}\n      >\n        <View style={styles.basicContainer}>\n          <View\n            style={[\n              styles.modalContainer,\n              { backgroundColor: this.props.pickerBackgroundColor || 'white' },\n            ]}\n          >\n            <View style={styles.buttonView}>\n              <TouchableOpacity onPress={this.onPressCancel}>\n                <Text style={[{ color: buttonColor }, this.props.buttonTextStyle]}>\n                  {this.props.cancelText || 'Cancel'}\n                </Text>\n              </TouchableOpacity>\n\n              <TouchableOpacity onPress={this.onPressSubmit}>\n                <Text style={[{ color: buttonColor }, this.props.buttonTextStyle]}>\n                  {this.props.confirmText || 'Confirm'}\n                </Text>\n              </TouchableOpacity>\n            </View>\n\n            <View style={styles.mainBox}>\n              <Picker\n                ref={(ref) => {\n                  this.picker = ref;\n                }}\n                style={styles.bottomPicker}\n                selectedValue={this.state.selectedCountry}\n                onValueChange={country => this.onValueChange(country)}\n                itemStyle={itemStyle}\n                mode=\"dialog\"\n              >\n                {Country.getAll().map((country, index) => this.renderItem(country, index))}\n              </Picker>\n            </View>\n          </View>\n        </View>\n      </Modal>\n    );\n  }\n}\n\nCountryPicker.propTypes = propTypes;\n"]},"metadata":{},"sourceType":"module"}