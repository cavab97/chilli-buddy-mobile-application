{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { settingsDataServices } from \"../../services/database\";\nvar type = \"settings\";\nvar actions = {\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  READ_INFO: type + \"READ_INFO\",\n  READ_INFO_SUCCESS: type + \"READ_INFO_SUCCESS\",\n  READ_INFO_ERROR: type + \"READ_INFO_ERROR\"\n};\nexport function readFromDatabase() {\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var getCategories, getTags, _await$Promise$all, _await$Promise$all2, categories, tags;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              getCategories = settingsDataServices.readCategories();\n              getTags = settingsDataServices.readTags();\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(Promise.all([getCategories, getTags]));\n\n            case 5:\n              _await$Promise$all = _context.sent;\n              _await$Promise$all2 = _slicedToArray(_await$Promise$all, 2);\n              categories = _await$Promise$all2[0];\n              tags = _await$Promise$all2[1];\n              resolve({\n                categories: categories,\n                tags: tags\n              });\n              dispatch({\n                type: actions.READ_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: {\n                    categories: categories,\n                    tags: tags\n                  }\n                }\n              });\n              _context.next = 18;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 18:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 13]], Promise);\n    });\n  };\n}\nexport function readInfo() {\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_INFO\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var info;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(settingsDataServices.readInfo());\n\n            case 3:\n              info = _context2.sent;\n              resolve({\n                info: info\n              });\n              dispatch({\n                type: actions.READ_INFO_SUCCESS,\n                payload: {\n                  data: {\n                    info: info\n                  }\n                }\n              });\n              _context2.next = 13;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n              reject(_context2.t0);\n              dispatch({\n                type: actions.READ_INFO_ERROR,\n                payload: {\n                  error: _context2.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/redux/settings/action.js"],"names":["settingsDataServices","type","actions","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","READ_INFO","READ_INFO_SUCCESS","READ_INFO_ERROR","readFromDatabase","dispatch","Promise","resolve","reject","getCategories","readCategories","getTags","readTags","all","categories","tags","payload","data","console","log","error","readInfo","info"],"mappings":"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","sourcesContent":["import { settingsDataServices } from \"../../services/database\";\r\n\r\nconst type = \"settings\";\r\n\r\nconst actions = {\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n\r\n  READ_INFO: type + \"READ_INFO\",\r\n  READ_INFO_SUCCESS: type + \"READ_INFO_SUCCESS\",\r\n  READ_INFO_ERROR: type + \"READ_INFO_ERROR\"\r\n};\r\n\r\nexport function readFromDatabase() {\r\n  return dispatch => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const getCategories = settingsDataServices.readCategories();\r\n        const getTags = settingsDataServices.readTags();\r\n\r\n        const [categories, tags] = await Promise.all([getCategories, getTags]);\r\n\r\n        resolve({ categories, tags })\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_SUCCESS,\r\n          payload: { data: { categories, tags } }\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_ERROR,\r\n          payload: { error }\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function readInfo() {\r\n  return dispatch => {\r\n    dispatch({ type: actions.READ_INFO });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const info = await settingsDataServices.readInfo();\r\n        \r\n        resolve({ info })\r\n        dispatch({\r\n          type: actions.READ_INFO_SUCCESS,\r\n          payload: { data: { info } }\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_INFO_ERROR,\r\n          payload: { error }\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n\r\n\r\nexport default actions;"]},"metadata":{},"sourceType":"module"}