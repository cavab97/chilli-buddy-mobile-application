{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _ from 'lodash';\nimport Country from \"./country\";\nimport numberType from \"./resources/numberType.json\";\n\nvar libPhoneNumber = require('google-libphonenumber');\n\nvar phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nvar asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\nvar instance = null;\n\nvar PhoneNumber = function () {\n  function PhoneNumber() {\n    _classCallCheck(this, PhoneNumber);\n  }\n\n  _createClass(PhoneNumber, [{\n    key: \"getAllCountries\",\n    value: function getAllCountries() {\n      return Country.getAll();\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode(number) {\n      var dialCode = '';\n\n      if (number.charAt(0) === '+') {\n        var numericChars = '';\n\n        for (var i = 0; i < number.length; i++) {\n          var c = number.charAt(i);\n\n          if (this.isNumeric(c)) {\n            numericChars += c;\n\n            if (Country.getCountryCodes()[numericChars]) {\n              dialCode = number.substr(0, i + 1);\n            }\n\n            if (numericChars.length === 4) {\n              break;\n            }\n          }\n        }\n      }\n\n      return dialCode;\n    }\n  }, {\n    key: \"getNumeric\",\n    value: function getNumeric(str) {\n      return str.replace(/\\D/g, '');\n    }\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n  }, {\n    key: \"getCountryCodeOfNumber\",\n    value: function getCountryCodeOfNumber(number) {\n      var dialCode = this.getDialCode(number);\n      var numeric = this.getNumeric(dialCode);\n      var countryCode = Country.getCountryCodes()[numeric];\n\n      if (countryCode) {\n        return _.first(countryCode.filter(function (iso2) {\n          return iso2;\n        }));\n      }\n\n      return '';\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(number, iso2) {\n      try {\n        return phoneUtil.parse(number, iso2);\n      } catch (err) {\n        console.log(\"Exception was thrown: \" + err.toString());\n        return null;\n      }\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n\n      if (phoneInfo) {\n        return phoneUtil.isValidNumber(phoneInfo);\n      }\n\n      return false;\n    }\n  }, {\n    key: \"format\",\n    value: function format(number, iso2) {\n      var formatter = new asYouTypeFormatter(iso2);\n      var formatted;\n      number.replace(/-/g, '').replace(/ /g, '').split('').forEach(function (n) {\n        return formatted = formatter.inputDigit(n);\n      });\n      return formatted;\n    }\n  }, {\n    key: \"getNumberType\",\n    value: function getNumberType(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      var type = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n      return _.findKey(numberType, function (noType) {\n        return noType === type;\n      });\n    }\n  }, {\n    key: \"getCountryDataByCode\",\n    value: function getCountryDataByCode(iso2) {\n      return Country.getCountryDataByCode(iso2);\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (!instance) {\n        instance = new PhoneNumber();\n      }\n\n      return instance;\n    }\n  }]);\n\n  return PhoneNumber;\n}();\n\nexport default PhoneNumber.getInstance();","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/node_modules/react-native-phone-input/lib/phoneNumber.js"],"names":["_","Country","numberType","libPhoneNumber","require","phoneUtil","PhoneNumberUtil","getInstance","asYouTypeFormatter","AsYouTypeFormatter","instance","PhoneNumber","getAll","number","dialCode","charAt","numericChars","i","length","c","isNumeric","getCountryCodes","substr","str","replace","n","isNaN","parseFloat","isFinite","getDialCode","numeric","getNumeric","countryCode","first","filter","iso2","parse","err","console","log","toString","phoneInfo","isValidNumber","formatter","formatted","split","forEach","inputDigit","type","getNumberType","findKey","noType","getCountryDataByCode"],"mappings":"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","sourcesContent":["import _ from 'lodash';\n\nimport Country from './country';\nimport numberType from './resources/numberType.json';\n\nconst libPhoneNumber = require('google-libphonenumber');\nconst phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nconst asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\n\nlet instance = null;\n\nclass PhoneNumber {\n  static getInstance() {\n    if (!instance) {\n      instance = new PhoneNumber();\n    }\n    return instance;\n  }\n\n  getAllCountries() {\n    return Country.getAll();\n  }\n\n  getDialCode(number) {\n    let dialCode = '';\n    // only interested in international numbers (starting with a plus)\n    if (number.charAt(0) === '+') {\n      let numericChars = '';\n      // iterate over chars\n      for (let i = 0; i < number.length; i++) {\n        const c = number.charAt(i);\n        // if char is number\n        if (this.isNumeric(c)) {\n          numericChars += c;\n          // if current numericChars make a valid dial code\n          // if (this.countryCodes[numericChars]) {\n          if (Country.getCountryCodes()[numericChars]) {\n            // store the actual raw string (useful for matching later)\n            dialCode = number.substr(0, i + 1);\n          }\n          // longest dial code is 4 chars\n          if (numericChars.length === 4) {\n            break;\n          }\n        }\n      }\n    }\n    return dialCode;\n  }\n\n  getNumeric(str) {\n    return str.replace(/\\D/g, '');\n  }\n\n  isNumeric(n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  getCountryCodeOfNumber(number) {\n    const dialCode = this.getDialCode(number);\n    const numeric = this.getNumeric(dialCode);\n    const countryCode = Country.getCountryCodes()[numeric];\n\n    // countryCode[0] can be null -> get first element that is not null\n    if (countryCode) {\n      return _.first(countryCode.filter(iso2 => iso2));\n    }\n\n    return '';\n  }\n\n  parse(number, iso2) {\n    try {\n      return phoneUtil.parse(number, iso2);\n    } catch (err) {\n      console.log(`Exception was thrown: ${err.toString()}`);\n      return null;\n    }\n  }\n\n  isValidNumber(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n\n    if (phoneInfo) {\n      return phoneUtil.isValidNumber(phoneInfo);\n    }\n\n    return false;\n  }\n\n  format(number, iso2) {\n    const formatter = new asYouTypeFormatter(iso2)\n    let formatted;\n\n    number.replace(/-/g, '')\n      .replace(/ /g, '')\n      .split('')\n      .forEach(n => formatted = formatter.inputDigit(n));\n\n    return formatted;\n  }\n\n  getNumberType(number, iso2) {\n    const phoneInfo = this.parse(number, iso2);\n    const type = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n    return _.findKey(numberType, noType => noType === type);\n  }\n\n  getCountryDataByCode(iso2) {\n    return Country.getCountryDataByCode(iso2);\n  }\n}\n\nexport default PhoneNumber.getInstance();\n"]},"metadata":{},"sourceType":"module"}