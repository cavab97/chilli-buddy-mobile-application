{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { database } from \"../../marslab-library-react-native/utils/helper\";\nvar objectGroupName = \"route\";\nvar objectName = \"reward\";\nexport var GeoPoint = database.GeoPoint;\nexport function readObjects(_ref) {\n  var groupId = _ref.groupId;\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: objectGroupName + \"Packaging0/\" + groupId + \"/\" + objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).orderBy(\"rank\", \"asc\").get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread(_objectSpread(_objectSpread({}, snapshot.data()), snapshot.data().d), {}, {\n          id: snapshot.id\n        });\n\n        delete data[\"d\"];\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n        var obtained = database.processData({\n          data: data.obtained\n        });\n        var claimed = database.processData({\n          data: data.claimed\n        });\n        var issued = database.processData({\n          data: data.issued\n        });\n        var route = database.processData({\n          data: data.route\n        });\n\n        var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n          created: created,\n          deleted: deleted,\n          updated: updated,\n          obtained: obtained,\n          claimed: claimed,\n          issued: issued,\n          route: route\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readEventRewards(_ref2) {\n  var eventId = _ref2.eventId;\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: \"eventPackaging0/\" + eventId + \"/\" + objectName + \"Packaging0\"\n    }).where(\"deleted.by\", \"==\", null).orderBy(\"rank\", \"asc\").get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n          id: snapshot.id\n        });\n\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n        var obtained = database.processData({\n          data: data.obtained\n        });\n        var claimed = database.processData({\n          data: data.claimed\n        });\n        var issued = database.processData({\n          data: data.issued\n        });\n\n        var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n          created: created,\n          deleted: deleted,\n          updated: updated,\n          obtained: obtained,\n          claimed: claimed,\n          issued: issued\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readObject(_ref3) {\n  var id = _ref3.id;\n  return new Promise(function (resolve, reject) {\n    database.readData({\n      ref: objectName + \"Public0/\" + id\n    }).then(function (snapshot) {\n      var data = _objectSpread(_objectSpread({}, snapshot), {}, {\n        id: snapshot.id\n      });\n\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n      var obtained = database.processData({\n        data: data.obtained\n      });\n      var claimed = database.processData({\n        data: data.claimed\n      });\n      var issued = database.processData({\n        data: data.issued\n      });\n\n      var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n        created: created,\n        deleted: deleted,\n        updated: updated,\n        obtained: obtained,\n        claimed: claimed,\n        issued: issued\n      });\n\n      resolve(processedData);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\n\nvar listener = function listener() {};\n\nexport function listenObjects(_ref4) {\n  var _ref4$groupId = _ref4.groupId,\n      groupId = _ref4$groupId === void 0 ? null : _ref4$groupId,\n      _ref4$updateListener = _ref4.updateListener,\n      updateListener = _ref4$updateListener === void 0 ? function () {} : _ref4$updateListener;\n  listener = database.readTable({\n    ref: objectGroupName + \"Packaging0/\" + groupId + \"/\" + objectName + \"Packaging0\"\n  }).where(\"deleted.by\", \"==\", null).onSnapshot(function (QuerySnapshot) {\n    var result = [];\n    QuerySnapshot.forEach(function (snapshot) {\n      var data = _objectSpread(_objectSpread(_objectSpread({}, snapshot.data()), snapshot.data().d), {}, {\n        id: snapshot.id\n      });\n\n      delete data[\"d\"];\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n      var obtained = database.processData({\n        data: data.obtained\n      });\n      var claimed = database.processData({\n        data: data.claimed\n      });\n      var issued = database.processData({\n        data: data.issued\n      });\n\n      var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n        created: created,\n        deleted: deleted,\n        updated: updated,\n        obtained: obtained,\n        claimed: claimed,\n        issued: issued\n      });\n\n      result.push(processedData);\n    });\n    updateListener(result);\n  });\n}\nexport function unlistenObjects() {\n  listener();\n}\n\nvar objectListener = function objectListener() {};\n\nexport function listenObject(_ref5) {\n  var _ref5$objectId = _ref5.objectId,\n      objectId = _ref5$objectId === void 0 ? null : _ref5$objectId,\n      _ref5$updateListener = _ref5.updateListener,\n      updateListener = _ref5$updateListener === void 0 ? function () {} : _ref5$updateListener;\n  objectListener = database.readRecord({\n    ref: objectName + \"Public0/\" + objectId\n  }).onSnapshot(function (snapshot) {\n    var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n      id: snapshot.id\n    });\n\n    var parent = database.processData({\n      data: data\n    });\n    var created = database.processData({\n      data: data.created\n    });\n    var deleted = database.processData({\n      data: data.deleted\n    });\n    var updated = database.processData({\n      data: data.updated\n    });\n    var obtained = database.processData({\n      data: data.obtained\n    });\n    var claimed = database.processData({\n      data: data.claimed\n    });\n    var issued = database.processData({\n      data: data.issued\n    });\n\n    var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n      created: created,\n      deleted: deleted,\n      updated: updated,\n      obtained: obtained,\n      claimed: claimed,\n      issued: issued\n    });\n\n    updateListener(processedData);\n  });\n}\nexport function unlistenObject() {\n  objectListener();\n}\n\nvar ownRewardslistener = function ownRewardslistener() {};\n\nexport function listenOwnRewards(_ref6) {\n  var _ref6$uid = _ref6.uid,\n      uid = _ref6$uid === void 0 ? null : _ref6$uid,\n      _ref6$updateListener = _ref6.updateListener,\n      updateListener = _ref6$updateListener === void 0 ? function () {} : _ref6$updateListener;\n  ownRewardslistener = database.readTable({\n    ref: \"userPackaging0/\" + uid + \"/\" + objectName + \"Packaging0\"\n  }).orderBy(\"obtained.at\", \"desc\").onSnapshot(function (QuerySnapshot) {\n    var result = [];\n    QuerySnapshot.forEach(function (snapshot) {\n      var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n        id: snapshot.id\n      });\n\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n      var obtained = database.processData({\n        data: data.obtained\n      });\n      var claimed = database.processData({\n        data: data.claimed\n      });\n      var issued = database.processData({\n        data: data.issued\n      });\n\n      var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n        created: created,\n        deleted: deleted,\n        updated: updated,\n        obtained: obtained,\n        claimed: claimed,\n        issued: issued\n      });\n\n      result.push(processedData);\n    });\n    updateListener(result);\n  });\n}\nexport function unlistenOwnRewards() {\n  ownRewardslistener();\n}","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/services/database/reward.js"],"names":["database","objectGroupName","objectName","GeoPoint","readObjects","groupId","Promise","resolve","reject","readTable","ref","where","orderBy","get","then","QuerySnapshot","result","forEach","snapshot","data","d","id","parent","processData","created","deleted","updated","obtained","claimed","issued","route","processedData","push","catch","error","readEventRewards","eventId","readObject","readData","listener","listenObjects","updateListener","onSnapshot","unlistenObjects","objectListener","listenObject","objectId","readRecord","unlistenObject","ownRewardslistener","listenOwnRewards","uid","unlistenOwnRewards"],"mappings":"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","sourcesContent":["import { database } from \"../../marslab-library-react-native/utils/helper\";\r\n\r\nconst objectGroupName = \"route\";\r\nconst objectName = \"reward\";\r\n\r\nexport const GeoPoint = database.GeoPoint;\r\nexport function readObjects({ groupId }) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({\r\n        ref: `${objectGroupName}Packaging0/${groupId}/${objectName}Packaging0`,\r\n      })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .orderBy(\"rank\", \"asc\")\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            ...snapshot.data().d,\r\n            id: snapshot.id,\r\n          };\r\n          delete data[\"d\"];\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n          const obtained = database.processData({ data: data.obtained });\r\n          const claimed = database.processData({ data: data.claimed });\r\n          const issued = database.processData({ data: data.issued });\r\n          const route = database.processData({ data: data.route });\r\n\r\n          const processedData = {\r\n            ...parent,\r\n            created,\r\n            deleted,\r\n            updated,\r\n            obtained,\r\n            claimed,\r\n            issued,\r\n            route\r\n          };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function readEventRewards({ eventId }) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({\r\n        ref: `eventPackaging0/${eventId}/${objectName}Packaging0`,\r\n      })\r\n      .where(\"deleted.by\", \"==\", null)\r\n      .orderBy(\"rank\", \"asc\")\r\n      .get()\r\n      .then((QuerySnapshot) => {\r\n        const result = [];\r\n        QuerySnapshot.forEach((snapshot) => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            id: snapshot.id,\r\n          };\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n          const obtained = database.processData({ data: data.obtained });\r\n          const claimed = database.processData({ data: data.claimed });\r\n          const issued = database.processData({ data: data.issued });\r\n\r\n          const processedData = {\r\n            ...parent,\r\n            created,\r\n            deleted,\r\n            updated,\r\n            obtained,\r\n            claimed,\r\n            issued,\r\n          };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nexport function readObject({ id }) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readData({ ref: `${objectName}Public0/${id}` })\r\n      .then((snapshot) => {\r\n        const data = {\r\n          ...snapshot,\r\n          id: snapshot.id,\r\n        };\r\n\r\n        const parent = database.processData({ data });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n        const obtained = database.processData({ data: data.obtained });\r\n        const claimed = database.processData({ data: data.claimed });\r\n        const issued = database.processData({ data: data.issued });\r\n\r\n        const processedData = {\r\n          ...parent,\r\n          created,\r\n          deleted,\r\n          updated,\r\n          obtained,\r\n          claimed,\r\n          issued,\r\n        };\r\n\r\n        resolve(processedData);\r\n      })\r\n      .catch((error) => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nlet listener = () => {};\r\n\r\nexport function listenObjects({ groupId = null, updateListener = () => {} }) {\r\n  listener = database\r\n    .readTable({\r\n      ref: `${objectGroupName}Packaging0/${groupId}/${objectName}Packaging0`,\r\n    })\r\n    .where(\"deleted.by\", \"==\", null)\r\n    .onSnapshot((QuerySnapshot) => {\r\n      const result = [];\r\n      QuerySnapshot.forEach((snapshot) => {\r\n        const data = {\r\n          ...snapshot.data(),\r\n          ...snapshot.data().d,\r\n          id: snapshot.id,\r\n        };\r\n        delete data[\"d\"];\r\n\r\n        const parent = database.processData({ data });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n        const obtained = database.processData({ data: data.obtained });\r\n        const claimed = database.processData({ data: data.claimed });\r\n        const issued = database.processData({ data: data.issued });\r\n\r\n        const processedData = {\r\n          ...parent,\r\n          created,\r\n          deleted,\r\n          updated,\r\n          obtained,\r\n          claimed,\r\n          issued,\r\n        };\r\n\r\n        result.push(processedData);\r\n      });\r\n      updateListener(result);\r\n    });\r\n}\r\n\r\nexport function unlistenObjects() {\r\n  listener();\r\n}\r\n\r\nlet objectListener = () => {};\r\n\r\nexport function listenObject({ objectId = null, updateListener = () => {} }) {\r\n  objectListener = database\r\n    .readRecord({ ref: `${objectName}Public0/${objectId}` })\r\n    .onSnapshot((snapshot) => {\r\n      const data = {\r\n        ...snapshot.data(),\r\n        id: snapshot.id,\r\n      };\r\n\r\n      const parent = database.processData({ data });\r\n      const created = database.processData({ data: data.created });\r\n      const deleted = database.processData({ data: data.deleted });\r\n      const updated = database.processData({ data: data.updated });\r\n      const obtained = database.processData({ data: data.obtained });\r\n      const claimed = database.processData({ data: data.claimed });\r\n      const issued = database.processData({ data: data.issued });\r\n\r\n      const processedData = {\r\n        ...parent,\r\n        created,\r\n        deleted,\r\n        updated,\r\n        obtained,\r\n        claimed,\r\n        issued,\r\n      };\r\n\r\n      updateListener(processedData);\r\n    });\r\n}\r\n\r\nexport function unlistenObject() {\r\n  objectListener();\r\n}\r\n\r\nlet ownRewardslistener = () => {};\r\n\r\nexport function listenOwnRewards({ uid = null, updateListener = () => {} }) {\r\n  ownRewardslistener = database\r\n    .readTable({ ref: `userPackaging0/${uid}/${objectName}Packaging0` })\r\n    .orderBy(\"obtained.at\", \"desc\")\r\n    .onSnapshot((QuerySnapshot) => {\r\n      const result = [];\r\n      QuerySnapshot.forEach((snapshot) => {\r\n        const data = {\r\n          ...snapshot.data(),\r\n          id: snapshot.id,\r\n        };\r\n\r\n        const parent = database.processData({ data });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n        const obtained = database.processData({ data: data.obtained });\r\n        const claimed = database.processData({ data: data.claimed });\r\n        const issued = database.processData({ data: data.issued });\r\n\r\n        const processedData = {\r\n          ...parent,\r\n          created,\r\n          deleted,\r\n          updated,\r\n          obtained,\r\n          claimed,\r\n          issued,\r\n        };\r\n\r\n        result.push(processedData);\r\n      });\r\n      updateListener(result);\r\n    });\r\n}\r\n\r\nexport function unlistenOwnRewards() {\r\n  ownRewardslistener();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}