{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Gogogain\\\\Gogogain - User\\\\src\\\\screens\\\\auth\\\\LogIn\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { api } from \"../../../settings\";\nimport { RecaptchaModal } from \"./recaptcha\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport countryCode from \"../../../assets/countryCode/countryCodes\";\nvar authDomain = api.firebaseConfig.authDomain;\nimport { ActivityIndicator, Image, ImageBackground, TouchableOpacity, TouchableWithoutFeedBack, Text, View } from \"../../../components/atoms\";\nimport { update, loginWithPhoneNumber, modalControl } from \"../../../marslab-library-react-native/redux/auth/actions\";\nimport styles from \"./styles\";\nimport clone from \"clone\";\nimport { LoginTextField } from \"../../../components/molecules\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n\n    _this.onRecordChange = function (key, value) {\n      var _clone = clone(_this.props),\n          loginDetails = _clone.loginDetails;\n\n      if (key) loginDetails[key] = value;\n\n      _this.props.update(loginDetails);\n    };\n\n    _this.modalHandle = function (_ref) {\n      var key = _ref.key,\n          _ref$data = _ref.data,\n          data = _ref$data === void 0 ? null : _ref$data;\n\n      if (key === \"open\") {\n        var recaptchaToken = null;\n\n        _this.onRecordChange(\"recaptchaToken\", recaptchaToken);\n\n        if (/^[0-9]{9,10}$/.test(data)) {\n          _this.setState({\n            invalidPhoneNumber: false\n          });\n        } else {\n          _this.setState({\n            invalidPhoneNumber: true\n          });\n\n          return;\n        }\n      }\n\n      _this.props.modalControl();\n    };\n\n    _this.onSendSMS = function (_ref2) {\n      var phoneNumber = _ref2.phoneNumber,\n          recaptchaToken = _ref2.recaptchaToken;\n\n      _this.setState({\n        sending: true\n      });\n\n      var loginWithPhoneNumber = _this.props.loginWithPhoneNumber;\n      phoneNumber = _this.state.areaCode + phoneNumber;\n\n      try {\n        loginWithPhoneNumber({\n          phoneNumber: phoneNumber,\n          recaptchaToken: recaptchaToken\n        });\n\n        _this.modalHandle({\n          key: \"close\"\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    _this.onChangeAreaCode = function (value) {\n      _this.setState({\n        areaCode: value.dial_code\n      });\n    };\n\n    _this.state = {\n      invalidPhoneNumber: false,\n      areaCode: \"+60\",\n      sending: false,\n      errorMessage: null\n    };\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevProps.loginDetails.confirmationResult.verificationId !== this.props.loginDetails.confirmationResult.verificationId && this.props.loginDetails.confirmationResult.verificationId) {\n        this.setState({\n          sending: false\n        });\n        Actions.jump(\"loginTAC\");\n      }\n    }\n  }, {\n    key: \"onRecaptchaError\",\n    value: function onRecaptchaError() {\n      Alert.alert(\"Network Error\", \"There might be some problem loading the content because of network unstable\", [{\n        text: 'OK'\n      }], {\n        cancelable: true\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          loginDetails = _this$props.loginDetails,\n          loading = _this$props.loading,\n          modalVisible = _this$props.modalVisible,\n          error = _this$props.error;\n      var phoneNumber = loginDetails.phoneNumber,\n          recaptchaToken = loginDetails.recaptchaToken;\n      return React.createElement(ImageBackground, {\n        source: require(\"../../../../assets/Login.jpg\"),\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedBack, {\n        onPress: Keyboard.dismiss,\n        accessible: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 9\n        }\n      }, React.createElement(KeyboardAwareScrollView, {\n        style: {\n          flex: 1,\n          width: '100%'\n        },\n        showsVerticalScrollIndicator: false,\n        enableOnAndroid: true,\n        keyboardShouldPersistTaps: \"handled\",\n        extraScrollHeight: Platform.OS === 'ios' ? 0 : 100,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, React.createElement(View, {\n        style: styles.innerContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.containerpart1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../../assets/gogogain/login_logo.png\"),\n        style: styles.logoImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      })), React.createElement(View, {\n        style: styles.containerpart2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      }, React.createElement(LoginTextField, {\n        onChangeText: this.onRecordChange.bind(this, \"phoneNumber\"),\n        value: phoneNumber,\n        style: styles.inputContainerStyle,\n        inputStyle: styles.inputStyle,\n        placeholderText: \"ENTER PHONE NUMBER\",\n        placeholderTextColor: \"rgba(255,255,255, 0.5)\",\n        countryCode: countryCode,\n        onChangeAreaCode: this.onChangeAreaCode.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 17\n        }\n      }), this.state.invalidPhoneNumber && React.createElement(Text, {\n        style: styles.errorText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 19\n        }\n      }, \"* Invalid Phone format. eg: +601X XXX XXXX\"), React.createElement(TouchableOpacity, {\n        style: styles.loginContainer,\n        onPress: this.modalHandle.bind(this, {\n          key: \"open\",\n          data: phoneNumber\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 17\n        }\n      }, React.createElement(ActivityIndicator, {\n        animating: this.state.sending && error.message,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 19\n        }\n      }), React.createElement(Text, {\n        style: [styles.loginText],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }\n      }, \"Login\")), error && React.createElement(Text, {\n        style: styles.errorText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 27\n        }\n      }, error.message)), React.createElement(RecaptchaModal, {\n        isVisible: modalVisible,\n        containerWidth: 304,\n        containerHeight: 510,\n        authDomain: authDomain,\n        onMessage: function onMessage(event) {\n          var recaptchaToken = event.nativeEvent.data;\n\n          _this2.onRecordChange(\"recaptchaToken\", recaptchaToken);\n        },\n        onError: this.onRecaptchaError.bind(this),\n        error: this.state.errorMessage,\n        buttonTitle: \"Request TAC\",\n        buttonHide: recaptchaToken ? true : false,\n        onSendSMS: function onSendSMS() {\n          return _this2.onSendSMS({\n            phoneNumber: phoneNumber,\n            recaptchaToken: recaptchaToken\n          });\n        },\n        onBackdropPress: this.modalHandle.bind(this, {\n          key: \"close\"\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 15\n        }\n      })))));\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref3) {\n  var Auth = _ref3.Auth;\n  var loginDetails = Auth.loginDetails,\n      loading = Auth.loading,\n      error = Auth.error,\n      modalVisible = Auth.modalVisible;\n  return {\n    loginDetails: loginDetails,\n    loading: loading,\n    error: error,\n    modalVisible: modalVisible\n  };\n};\n\nexport default connect(mapStateToProps, {\n  update: update,\n  loginWithPhoneNumber: loginWithPhoneNumber,\n  modalControl: modalControl\n})(index);","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/screens/auth/LogIn/index.js"],"names":["React","Component","connect","Actions","api","RecaptchaModal","KeyboardAwareScrollView","countryCode","authDomain","firebaseConfig","ActivityIndicator","Image","ImageBackground","TouchableOpacity","TouchableWithoutFeedBack","Text","View","update","loginWithPhoneNumber","modalControl","styles","clone","LoginTextField","index","props","onRecordChange","key","value","loginDetails","modalHandle","data","recaptchaToken","test","setState","invalidPhoneNumber","onSendSMS","phoneNumber","sending","state","areaCode","error","console","log","onChangeAreaCode","dial_code","errorMessage","prevProps","prevState","snapshot","confirmationResult","verificationId","jump","Alert","alert","text","cancelable","loading","modalVisible","require","container","Keyboard","dismiss","flex","width","Platform","OS","innerContainer","containerpart1","logoImage","containerpart2","bind","inputContainerStyle","inputStyle","errorText","loginContainer","message","loginText","event","nativeEvent","onRecaptchaError","mapStateToProps","Auth"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { api } from \"../../../settings\";\r\nimport { RecaptchaModal } from \"./recaptcha\";\r\nimport { Keyboard, Alert, Platform } from \"react-native\";\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\r\nimport countryCode from \"../../../assets/countryCode/countryCodes\";\r\nconst { authDomain } = api.firebaseConfig;\r\n\r\nimport {\r\n  ActivityIndicator,\r\n  Image,\r\n  ImageBackground,\r\n  TouchableOpacity,\r\n  TouchableWithoutFeedBack,\r\n  Text,\r\n  View\r\n} from \"../../../components/atoms\";\r\n\r\nimport {\r\n  update,\r\n  loginWithPhoneNumber,\r\n  modalControl,\r\n} from \"../../../marslab-library-react-native/redux/auth/actions\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nimport clone from \"clone\";\r\nimport { LoginTextField } from \"../../../components/molecules\";\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      invalidPhoneNumber: false,\r\n      areaCode: \"+60\",\r\n      sending: false,\r\n      errorMessage: null\r\n    };\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (\r\n      prevProps.loginDetails.confirmationResult.verificationId !==\r\n        this.props.loginDetails.confirmationResult.verificationId &&\r\n      this.props.loginDetails.confirmationResult.verificationId\r\n    ) {\r\n      this.setState({ sending: false });\r\n      Actions.jump(\"loginTAC\");\r\n    }\r\n  }\r\n\r\n  onRecordChange = (key, value) => {\r\n    let { loginDetails } = clone(this.props);\r\n    if (key) loginDetails[key] = value;\r\n\r\n    this.props.update(loginDetails);\r\n  };\r\n\r\n  modalHandle = ({ key, data = null }) => {\r\n    if (key === \"open\") {\r\n      const recaptchaToken = null;\r\n      this.onRecordChange(\"recaptchaToken\", recaptchaToken);\r\n\r\n      if (/^[0-9]{9,10}$/.test(data)) {\r\n        this.setState({ invalidPhoneNumber: false });\r\n      } else {\r\n        this.setState({ invalidPhoneNumber: true });\r\n        return;\r\n      }\r\n    }\r\n    \r\n    this.props.modalControl();\r\n  };\r\n\r\n  onSendSMS = ({ phoneNumber, recaptchaToken }) => {\r\n    this.setState({ sending: true });\r\n    const { loginWithPhoneNumber } = this.props;\r\n    phoneNumber = this.state.areaCode + phoneNumber;\r\n\r\n\r\n    try {\r\n      loginWithPhoneNumber({ phoneNumber, recaptchaToken });\r\n      this.modalHandle({ key: \"close\" });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  onRecaptchaError() {\r\n    Alert.alert(\r\n      \"Network Error\",\r\n      \"There might be some problem loading the content because of network unstable\",\r\n      [\r\n        { text: 'OK' },\r\n      ],\r\n      { cancelable: true });\r\n  }\r\n\r\n  onChangeAreaCode = (value) => {\r\n    this.setState({areaCode: value.dial_code});\r\n  }\r\n\r\n  render() {\r\n    const { loginDetails, loading, modalVisible, error } = this.props;\r\n    const { phoneNumber, recaptchaToken } = loginDetails;\r\n\r\n    return (\r\n      <ImageBackground\r\n        source={require(\"../../../../assets/Login.jpg\")}\r\n        style={styles.container}\r\n      >\r\n        <TouchableWithoutFeedBack  onPress={Keyboard.dismiss} accessible={false}>\r\n          {/* <KeyboardAvoidingView\r\n            behavior=\"position\"\r\n            style={{ flex: 1, justifyContent: \"center\" }}\r\n            keyboardVerticalOffset={Platform.OS === \"ios\" ? -300 : -300}\r\n            enabled\r\n          > */}\r\n        <KeyboardAwareScrollView\r\n                style={{ flex: 1, width: '100%' }}\r\n                showsVerticalScrollIndicator = {false}\r\n                enableOnAndroid={true} \r\n                keyboardShouldPersistTaps='handled'\r\n                extraScrollHeight={Platform.OS === 'ios' ? 0 : 100}\r\n                /*  behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n                //behavior=\"position\"\r\n                //behavior=\"padding\"\r\n                style={{flex:1}}\r\n                keyboardVerticalOffset={Platform.OS === \"ios\" ? 100 : -700}\r\n                enabled */\r\n            >\r\n            <View style={styles.innerContainer}>\r\n              <View style={styles.containerpart1}>\r\n                <Image\r\n                  source={require(\"../../../assets/gogogain/login_logo.png\")}\r\n                  style={styles.logoImage}\r\n                />\r\n              </View>\r\n              <View style={styles.containerpart2}>\r\n                <LoginTextField\r\n                  onChangeText={this.onRecordChange.bind(this, \"phoneNumber\")}\r\n                  value={phoneNumber}\r\n                  style={styles.inputContainerStyle}\r\n                  inputStyle={styles.inputStyle}\r\n                  placeholderText=\"ENTER PHONE NUMBER\"\r\n                  placeholderTextColor=\"rgba(255,255,255, 0.5)\"\r\n                  countryCode={countryCode}\r\n                  onChangeAreaCode={this.onChangeAreaCode.bind(this)}\r\n                />\r\n                {this.state.invalidPhoneNumber && (\r\n                  <Text style={styles.errorText}>\r\n                    * Invalid Phone format. eg: +601X XXX XXXX\r\n                  </Text>\r\n                )}\r\n\r\n                <TouchableOpacity\r\n                  style={styles.loginContainer}\r\n                  onPress={this.modalHandle.bind(this, {\r\n                    key: \"open\",\r\n                    data: phoneNumber,\r\n                  })}\r\n                >\r\n                  <ActivityIndicator\r\n                    animating={this.state.sending && error.message}\r\n                  />\r\n                  <Text style={[styles.loginText]}>Login</Text>\r\n                </TouchableOpacity>\r\n                {error && <Text style={styles.errorText}>{error.message}</Text>}\r\n              </View>\r\n\r\n              <RecaptchaModal\r\n                isVisible={modalVisible}\r\n                containerWidth={304}\r\n                containerHeight={510}\r\n                authDomain={authDomain}\r\n                onMessage={(event) => {\r\n                  const recaptchaToken = event.nativeEvent.data;\r\n                  this.onRecordChange(\"recaptchaToken\", recaptchaToken);\r\n                }}\r\n                onError={this.onRecaptchaError.bind(this)}\r\n                error={this.state.errorMessage}\r\n                buttonTitle=\"Request TAC\"\r\n                buttonHide={recaptchaToken ? true : false}\r\n                onSendSMS={() =>\r\n                  this.onSendSMS({\r\n                    phoneNumber,\r\n                    recaptchaToken,\r\n                  })\r\n                }\r\n                onBackdropPress={this.modalHandle.bind(this, { key: \"close\" })}\r\n              />\r\n            </View>\r\n            </KeyboardAwareScrollView>\r\n        </TouchableWithoutFeedBack>\r\n      </ImageBackground>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ Auth }) => {\r\n  const { loginDetails, loading, error, modalVisible } = Auth;\r\n\r\n  return { loginDetails, loading, error, modalVisible };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  update,\r\n  loginWithPhoneNumber,\r\n  modalControl,\r\n})(index);\r\n"]},"metadata":{},"sourceType":"module"}