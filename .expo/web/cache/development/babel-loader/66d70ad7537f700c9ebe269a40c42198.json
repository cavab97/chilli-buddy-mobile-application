{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { eventDataServices } from \"../../services/database\";\nimport _ from \"lodash\";\nvar type = \"event\";\nvar actions = {\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function readFromDatabase() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var events;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(eventDataServices.readObjects());\n\n            case 3:\n              events = _context.sent;\n              resolve(events);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: events\n                }\n              });\n              _context.next = 13;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/redux/event/action.js"],"names":["eventDataServices","_","type","actions","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","UPDATE","update","data","payload","readFromDatabase","dispatch","getState","Promise","resolve","reject","readObjects","events","console","log","error"],"mappings":";AAAA,SAASA,iBAAT;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,IAAMC,IAAI,GAAG,OAAb;AAEA,IAAMC,OAAO,GAAG;AACdC,EAAAA,kBAAkB,EAAEF,IAAI,GAAG,oBADb;AAEdG,EAAAA,0BAA0B,EAAEH,IAAI,GAAG,4BAFrB;AAGdI,EAAAA,wBAAwB,EAAEJ,IAAI,GAAG,0BAHnB;AAKdK,EAAAA,MAAM,EAAEL,IAAI,GAAG;AALD,CAAhB;AAQA,OAAO,IAAMM,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD,EAAU;AAC9B,SAAO;AACLP,IAAAA,IAAI,EAAEC,OAAO,CAACI,MADT;AAELG,IAAAA,OAAO,EAAE;AAAED,MAAAA,IAAI,EAAJA;AAAF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,SAASE,gBAAT,GAA4B;AACjC,SAAO,UAACC,QAAD,EAAWC,QAAX,EAAwB;AAC7BD,IAAAA,QAAQ,CAAC;AAAEV,MAAAA,IAAI,EAAEC,OAAO,CAACC;AAAhB,KAAD,CAAR;AACA,WAAO,IAAIU,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEMhB,iBAAiB,CAACiB,WAAlB,EAFN;;AAAA;AAETC,cAAAA,MAFS;AAIfH,cAAAA,OAAO,CAACG,MAAD,CAAP;AACAN,cAAAA,QAAQ,CAAC;AACPV,gBAAAA,IAAI,EAAEC,OAAO,CAACE,0BADP;AAEPK,gBAAAA,OAAO,EAAE;AAAED,kBAAAA,IAAI,EAAES;AAAR;AAFF,eAAD,CAAR;AALe;AAAA;;AAAA;AAAA;AAAA;AAUfC,cAAAA,OAAO,CAACC,GAAR;AACAJ,cAAAA,MAAM,aAAN;AACAJ,cAAAA,QAAQ,CAAC;AACPV,gBAAAA,IAAI,EAAEC,OAAO,CAACG,wBADP;AAEPI,gBAAAA,OAAO,EAAE;AAAEW,kBAAAA,KAAK;AAAP;AAFF,eAAD,CAAR;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ,CAAP;AAkBD,GApBD;AAqBD;AAED,eAAelB,OAAf","sourcesContent":["import { eventDataServices } from \"../../services/database\";\r\nimport _ from \"lodash\"\r\n\r\nconst type = \"event\";\r\n\r\nconst actions = {\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function readFromDatabase() {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const events = await eventDataServices.readObjects();\r\n\r\n        resolve(events);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_SUCCESS,\r\n          payload: { data: events },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}