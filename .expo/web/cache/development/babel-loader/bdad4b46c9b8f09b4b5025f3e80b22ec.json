{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ZuMei\\\\gogogainUser\\\\src\\\\marslab-library-react-native\\\\routes\\\\routes.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport { Scene, Router, ActionConst, Stack } from \"react-native-router-flux\";\nimport { connect } from \"react-redux\";\nimport SplashScreen from \"../screens/system/Splash\";\nimport UpdateScreen from \"../screens/system/UpdateMemo\";\nimport LoginScreen from \"../screens/auth/Login\";\nimport LoginTACScreen from \"../screens/auth/TAC\";\nimport onBoot from \"./onBoot\";\nimport styles from \"./styles\";\nimport customRoute from \"../../routes/routes\";\n\nvar routes = function (_React$Component) {\n  _inherits(routes, _React$Component);\n\n  var _super = _createSuper(routes);\n\n  function routes(props) {\n    var _this;\n\n    _classCallCheck(this, routes);\n\n    _this = _super.call(this, props);\n    onBoot();\n    return _this;\n  }\n\n  _createClass(routes, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          isLoggedIn = _this$props.isLoggedIn,\n          isBooted = _this$props.isBooted,\n          updateNeeded = _this$props.updateNeeded,\n          forceUpdate = _this$props.forceUpdate;\n      return React.createElement(Router, {\n        sceneStyle: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      }, React.createElement(Scene, {\n        key: \"root\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }, React.createElement(Stack, {\n        key: \"splash\",\n        initial: !isBooted && !isLoggedIn,\n        hideNavBar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }\n      }, React.createElement(Scene, {\n        key: \"splash\",\n        drawer: false,\n        component: SplashScreen,\n        initial: true,\n        hideNavBar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 25\n        }\n      })), React.createElement(Stack, {\n        key: \"update\",\n        initial: isBooted && forceUpdate,\n        hideNavBar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }\n      }, React.createElement(Scene, {\n        key: \"update\",\n        drawer: false,\n        component: UpdateScreen,\n        initial: true,\n        hideNavBar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }\n      })), React.createElement(Stack, {\n        key: \"auth\",\n        initial: isBooted && !isLoggedIn && !forceUpdate,\n        hideNavBar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }\n      }, React.createElement(Scene, {\n        key: \"login\",\n        drawer: false,\n        component: LoginScreen,\n        initial: true,\n        hideNavBar: true,\n        titleStyle: styles.title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }\n      }), React.createElement(Scene, {\n        key: \"loginTAC\",\n        component: LoginTACScreen,\n        hideNavBar: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      })), customRoute({\n        isLoggedIn: isLoggedIn,\n        isBooted: isBooted,\n        forceUpdate: forceUpdate\n      })));\n    }\n  }]);\n\n  return routes;\n}(React.Component);\n\nvar mapStatetoprops = function mapStatetoprops(state) {\n  var isLoggedIn = state.Auth.isLoggedIn;\n  var _state$System = state.System,\n      isBooted = _state$System.isBooted,\n      updateNeeded = _state$System.updateNeeded,\n      forceUpdate = _state$System.forceUpdate;\n  return {\n    isLoggedIn: isLoggedIn,\n    isBooted: isBooted,\n    updateNeeded: updateNeeded,\n    forceUpdate: forceUpdate\n  };\n};\n\nexport default connect(mapStatetoprops, {})(routes);","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/marslab-library-react-native/routes/routes.js"],"names":["React","Scene","Router","ActionConst","Stack","connect","SplashScreen","UpdateScreen","LoginScreen","LoginTACScreen","onBoot","styles","customRoute","routes","props","isLoggedIn","isBooted","updateNeeded","forceUpdate","container","title","Component","mapStatetoprops","state","Auth","System"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,WAAxB,EAAqCC,KAArC,QAAkD,0BAAlD;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,YAAP;AACA,OAAOC,YAAP;AAEA,OAAOC,WAAP;AACA,OAAOC,cAAP;AAEA,OAAOC,MAAP;AACA,OAAOC,MAAP;AAEA,OAAOC,WAAP;;IAEMC,M;;;;;AACF,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACAJ,IAAAA,MAAM;AAFS;AAGlB;;;;6BAEQ;AAAA,wBACuD,KAAKI,KAD5D;AAAA,UACGC,UADH,eACGA,UADH;AAAA,UACeC,QADf,eACeA,QADf;AAAA,UACyBC,YADzB,eACyBA,YADzB;AAAA,UACuCC,WADvC,eACuCA,WADvC;AAGL,aACI,oBAAC,MAAD;AAAQ,QAAA,UAAU,EAAIP,MAAM,CAACQ,SAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,QAAX;AAAoB,QAAA,OAAO,EAAE,CAACH,QAAD,IAAa,CAACD,UAA3C;AAAuD,QAAA,UAAU,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,GAAG,EAAC,QADR;AAEI,QAAA,MAAM,EAAE,KAFZ;AAGI,QAAA,SAAS,EAAET,YAHf;AAII,QAAA,OAAO,EAAE,IAJb;AAKI,QAAA,UAAU,MALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ,EAWI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,QAAX;AAAoB,QAAA,OAAO,EAAEU,QAAQ,IAAIE,WAAzC;AAAsD,QAAA,UAAU,MAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,GAAG,EAAC,QADR;AAEI,QAAA,MAAM,EAAE,KAFZ;AAGI,QAAA,SAAS,EAAEX,YAHf;AAII,QAAA,OAAO,EAAE,IAJb;AAKI,QAAA,UAAU,MALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CAXJ,EAqBI,oBAAC,KAAD;AAAO,QAAA,GAAG,EAAC,MAAX;AAAkB,QAAA,OAAO,EAAES,QAAQ,IAAI,CAACD,UAAb,IAA2B,CAACG,WAAvD;AAAoE,QAAA,UAAU,MAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD;AACI,QAAA,GAAG,EAAC,OADR;AAEI,QAAA,MAAM,EAAE,KAFZ;AAGI,QAAA,SAAS,EAAEV,WAHf;AAII,QAAA,OAAO,EAAE,IAJb;AAKI,QAAA,UAAU,MALd;AAMI,QAAA,UAAU,EAAEG,MAAM,CAACS,KANvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EASI,oBAAC,KAAD;AACI,QAAA,GAAG,EAAC,UADR;AAEI,QAAA,SAAS,EAAEX,cAFf;AAGI,QAAA,UAAU,MAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATJ,CArBJ,EAoCKG,WAAW,CAAC;AAACG,QAAAA,UAAU,EAAVA,UAAD;AAAaC,QAAAA,QAAQ,EAARA,QAAb;AAAuBE,QAAAA,WAAW,EAAXA;AAAvB,OAAD,CApChB,CADJ,CADJ;AA0DH;;;;EAnEgBlB,KAAK,CAACqB,S;;AAsE3B,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAAA,MACrBR,UADqB,GACNQ,KAAK,CAACC,IADA,CACrBT,UADqB;AAAA,sBAEmBQ,KAAK,CAACE,MAFzB;AAAA,MAErBT,QAFqB,iBAErBA,QAFqB;AAAA,MAEXC,YAFW,iBAEXA,YAFW;AAAA,MAEGC,WAFH,iBAEGA,WAFH;AAG7B,SAAO;AAAEH,IAAAA,UAAU,EAAVA,UAAF;AAAcC,IAAAA,QAAQ,EAARA,QAAd;AAAwBC,IAAAA,YAAY,EAAZA,YAAxB;AAAsCC,IAAAA,WAAW,EAAXA;AAAtC,GAAP;AACH,CAJD;;AAMA,eAAeb,OAAO,CAACiB,eAAD,EAAkB,EAAlB,CAAP,CAA6BT,MAA7B,CAAf","sourcesContent":["import React from \"react\";\r\n\r\nimport { Scene, Router, ActionConst, Stack } from \"react-native-router-flux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport SplashScreen from \"../screens/system/Splash\";\r\nimport UpdateScreen from \"../screens/system/UpdateMemo\";\r\n\r\nimport LoginScreen from \"../screens/auth/Login\";\r\nimport LoginTACScreen from \"../screens/auth/TAC\";\r\n\r\nimport onBoot from \"./onBoot\"\r\nimport styles from \"./styles\";\r\n\r\nimport customRoute from \"../../routes/routes\"\r\n\r\nclass routes extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        onBoot();\r\n    }\r\n\r\n    render() {\r\n        const { isLoggedIn, isBooted, updateNeeded, forceUpdate } = this.props;\r\n\r\n        return (\r\n            <Router sceneStyle = {styles.container}>\r\n                <Scene key=\"root\">\r\n                    <Stack key=\"splash\" initial={!isBooted && !isLoggedIn} hideNavBar>\r\n                        <Scene\r\n                            key=\"splash\"\r\n                            drawer={false}\r\n                            component={SplashScreen}\r\n                            initial={true}\r\n                            hideNavBar\r\n                        />\r\n                    </Stack>\r\n\r\n                    <Stack key=\"update\" initial={isBooted && forceUpdate} hideNavBar>\r\n                        <Scene\r\n                            key=\"update\"\r\n                            drawer={false}\r\n                            component={UpdateScreen}\r\n                            initial={true}\r\n                            hideNavBar\r\n                        />\r\n                    </Stack>\r\n\r\n                    <Stack key=\"auth\" initial={isBooted && !isLoggedIn && !forceUpdate} hideNavBar>\r\n                        <Scene\r\n                            key=\"login\"\r\n                            drawer={false}\r\n                            component={LoginScreen}\r\n                            initial={true}\r\n                            hideNavBar\r\n                            titleStyle={styles.title}\r\n                        />\r\n                        <Scene\r\n                            key=\"loginTAC\"\r\n                            component={LoginTACScreen}\r\n                            hideNavBar\r\n                        />\r\n                    </Stack>\r\n                    {customRoute({isLoggedIn, isBooted, forceUpdate})}\r\n                    {/* {\r\n                        customRoute.map((stack)=>{\r\n                            const scenes = stack.scene\r\n                            return (\r\n                                <Stack {...stack} initial={isLoggedIn && isBooted && !forceUpdate } >\r\n                                    {\r\n                                        scenes.map((scene)=>{\r\n                                        return (<Scene\r\n                                            {...scene}\r\n                                        />)\r\n                                        })\r\n                                    }\r\n                                </Stack>\r\n                            )\r\n                        })\r\n                    } */}\r\n                </Scene>\r\n            </Router>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStatetoprops = state => {\r\n    const { isLoggedIn } = state.Auth;\r\n    const { isBooted, updateNeeded, forceUpdate } = state.System\r\n    return { isLoggedIn, isBooted, updateNeeded, forceUpdate };\r\n};\r\n\r\nexport default connect(mapStatetoprops, {})(routes);\r\n"]},"metadata":{},"sourceType":"module"}