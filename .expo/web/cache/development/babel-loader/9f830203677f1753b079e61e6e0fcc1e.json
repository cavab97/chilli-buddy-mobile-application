{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\limwe\\\\Documents\\\\application\\\\gogogain-app\\\\gogogain-user\\\\src\\\\screens\\\\main\\\\RouteGroups\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { RouteGroupList } from \"../../../components/templates\";\nimport { listenFromDatabase, removeListenerFromDatabase } from \"../../../redux/routeGroup/action\";\nimport styles from \"./styles\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n\n    _this.onRouteMapPress = function (routeGroup) {\n      var id = routeGroup.id;\n      Actions.Routes({\n        routeGroupId: id\n      });\n    };\n\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.listenFromDatabase();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.props.removeListenerFromDatabase();\n    }\n  }, {\n    key: \"onRankingPress\",\n    value: function onRankingPress() {\n      Actions.EventRanking();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          routeGroups = _this$props.routeGroups,\n          readLoading = _this$props.readLoading;\n      return React.createElement(RouteGroupList, {\n        title: \"Route Map\",\n        subtitle: \"Ranking\",\n        data: routeGroups,\n        subtitle2: \"In Progress : \",\n        subtitle3: \"Pending Event : \",\n        onRouteMapPress: this.onRouteMapPress,\n        onRankingPress: this.onRankingPress.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return _objectSpread({}, state.RouteGroup);\n};\n\nexport default connect(mapStateToProps, {\n  listenFromDatabase: listenFromDatabase,\n  removeListenerFromDatabase: removeListenerFromDatabase\n})(index);","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/screens/main/RouteGroups/index.js"],"names":["React","Component","connect","Actions","RouteGroupList","listenFromDatabase","removeListenerFromDatabase","styles","index","props","onRouteMapPress","routeGroup","id","Routes","routeGroupId","state","EventRanking","routeGroups","readLoading","onRankingPress","bind","mapStateToProps","RouteGroup"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,cAAT;AACA,SAASC,kBAAT,EAA6BC,0BAA7B;AAEA,OAAOC,MAAP;;IAEMC,K;;;;;AACF,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAcnBC,eAdmB,GAcD,UAACC,UAAD,EAAgB;AAAA,UACtBC,EADsB,GACfD,UADe,CACtBC,EADsB;AAE9BT,MAAAA,OAAO,CAACU,MAAR,CAAe;AAACC,QAAAA,YAAY,EAAGF;AAAhB,OAAf;AACH,KAjBkB;;AAEf,UAAKG,KAAL,GAAa,EAAb;AAFe;AAIlB;;;;wCAEmB;AAChB,WAAKN,KAAL,CAAWJ,kBAAX;AACH;;;2CAEqB;AAClB,WAAKI,KAAL,CAAWH,0BAAX;AACH;;;qCAOgB;AACbH,MAAAA,OAAO,CAACa,YAAR;AACH;;;6BAEQ;AAAA,wBACgC,KAAKP,KADrC;AAAA,UACGQ,WADH,eACGA,WADH;AAAA,UACgBC,WADhB,eACgBA,WADhB;AAGL,aACI,oBAAC,cAAD;AACI,QAAA,KAAK,EAAC,WADV;AAEI,QAAA,QAAQ,EAAC,SAFb;AAGI,QAAA,IAAI,EAAED,WAHV;AAII,QAAA,SAAS,EAAC,gBAJd;AAKI,QAAA,SAAS,EAAC,kBALd;AAMI,QAAA,eAAe,EAAE,KAAKP,eAN1B;AAOI,QAAA,cAAc,EAAE,KAAKS,cAAL,CAAoBC,IAApB,CAAyB,IAAzB,CAPpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAWH;;;;EAtCenB,S;;AAyCpB,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAAAN,KAAK,EAAI;AAC7B,2BAAWA,KAAK,CAACO,UAAjB;AACH,CAFD;;AAIA,eAAepB,OAAO,CAACmB,eAAD,EAAkB;AAAEhB,EAAAA,kBAAkB,EAAlBA,kBAAF;AAAsBC,EAAAA,0BAA0B,EAA1BA;AAAtB,CAAlB,CAAP,CAA6EE,KAA7E,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { RouteGroupList } from \"../../../components/templates\";\r\nimport { listenFromDatabase, removeListenerFromDatabase } from \"../../../redux/routeGroup/action\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nclass index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.listenFromDatabase();\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.props.removeListenerFromDatabase();\r\n    }\r\n\r\n    onRouteMapPress = (routeGroup) => {\r\n        const { id } = routeGroup\r\n        Actions.Routes({routeGroupId : id});\r\n    }\r\n\r\n    onRankingPress() {\r\n        Actions.EventRanking();\r\n    }\r\n\r\n    render() {\r\n        const { routeGroups, readLoading } = this.props\r\n\r\n        return (\r\n            <RouteGroupList\r\n                title=\"Route Map\"\r\n                subtitle=\"Ranking\"\r\n                data={routeGroups}\r\n                subtitle2=\"In Progress : \"\r\n                subtitle3=\"Pending Event : \"\r\n                onRouteMapPress={this.onRouteMapPress}\r\n                onRankingPress={this.onRankingPress.bind(this)}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {...state.RouteGroup};\r\n};\r\n\r\nexport default connect(mapStateToProps, { listenFromDatabase, removeListenerFromDatabase })(index);\r\n"]},"metadata":{},"sourceType":"module"}