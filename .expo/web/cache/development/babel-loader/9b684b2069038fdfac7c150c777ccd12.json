{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { transactionBackendServices } from \"../../services/backend\";\nimport { transactionStorageServices } from \"../../services/storage\";\nimport { transactionDataServices } from \"../../services/database\";\nvar type = \"transaction\";\nvar actions = {\n  READ_BY_ROUTETICKET: type + \"READ_BY_ROUTETICKET\",\n  READ_BY_ROUTETICKET_ERROR: type + \"READ_BY_ROUTETICKET_ERROR\",\n  READ_BY_ROUTETICKET_SUCCESS: type + \"READ_BY_ROUTETICKET_SUCCESS\",\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPLOAD_TO_STORAGE: type + \"UPLOAD_TO_STORAGE\",\n  UPLOAD_TO_STORAGE_SUCCESS: type + \"UPLOAD_TO_STORAGE_SUCCESS\",\n  UPLOAD_TO_STORAGE_ERROR: type + \"UPLOAD_TO_STORAGE_ERROR\",\n  UPDATE_UPLOAD_PROGRESS: type + \"UPDATE_UPLOAD_PROGRESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function listenByRouteTicket(_ref) {\n  var _ref$routeTicketId = _ref.routeTicketId,\n      routeTicketId = _ref$routeTicketId === void 0 ? null : _ref$routeTicketId;\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_BY_ROUTETICKET\n    });\n\n    try {\n      console.log(\"Start listen to transaction belong to route ticket : \" + routeTicketId + \" \");\n      transactionDataServices.listenObjectsByRouteTicket({\n        routeTicketId: routeTicketId,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_BY_ROUTETICKET_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_BY_ROUTETICKET_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenByRouteTicket() {\n  return function (dispatch) {\n    console.log(\"Removed listener to transaction\");\n    transactionDataServices.unlistenObjectsByRouteTicket();\n  };\n}\nexport function submitToBackend(data, actionName) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.SUBMIT_TO_BACKEND\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var result, _data, routeId, shopId, routeTicketId, missionId, payment;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              result = {};\n              _context.prev = 1;\n              _context.t0 = actionName;\n              _context.next = _context.t0 === \"create\" ? 5 : 11;\n              break;\n\n            case 5:\n              _data = data, routeId = _data.routeId, shopId = _data.shopId, routeTicketId = _data.routeTicketId, missionId = _data.missionId, payment = _data.payment;\n              data = {\n                routeIds: [routeId],\n                shopIds: [shopId],\n                routeTicketIds: [routeTicketId],\n                missionIds: [missionId],\n                payment: payment\n              };\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(transactionBackendServices.create({\n                data: data\n              }));\n\n            case 9:\n              result = _context.sent;\n              return _context.abrupt(\"break\", 11);\n\n            case 11:\n              resolve(result);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context.next = 20;\n              break;\n\n            case 15:\n              _context.prev = 15;\n              _context.t1 = _context[\"catch\"](1);\n              console.log(_context.t1);\n              reject(_context.t1);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_ERROR,\n                payload: {\n                  error: _context.t1\n                }\n              });\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 15]], Promise);\n    });\n  };\n}\nexport function uploadToStorage(data) {\n  return function (dispatch) {\n    dispatch({\n      type: actions.UPLOAD_TO_STORAGE\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var result, id, file, name;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              result = {};\n              id = data.id, file = data.file, name = data.name;\n              _context2.prev = 2;\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(transactionStorageServices.uploadFile({\n                id: id,\n                file: file,\n                name: name,\n                progressListener: function progressListener(snap) {\n                  var progress = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n                  dispatch({\n                    type: actions.UPDATE_UPLOAD_PROGRESS,\n                    payload: {\n                      data: progress\n                    }\n                  });\n                }\n              }));\n\n            case 5:\n              result = _context2.sent;\n              resolve(result);\n              dispatch({\n                type: actions.UPLOAD_TO_STORAGE_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context2.next = 15;\n              break;\n\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](2);\n              console.log(_context2.t0);\n              reject(_context2.t0);\n              dispatch({\n                type: actions.UPLOAD_TO_STORAGE_ERROR,\n                payload: {\n                  error: _context2.t0\n                }\n              });\n\n            case 15:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[2, 10]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/redux/transaction/action.js"],"names":["transactionBackendServices","transactionStorageServices","transactionDataServices","type","actions","READ_BY_ROUTETICKET","READ_BY_ROUTETICKET_ERROR","READ_BY_ROUTETICKET_SUCCESS","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPLOAD_TO_STORAGE","UPLOAD_TO_STORAGE_SUCCESS","UPLOAD_TO_STORAGE_ERROR","UPDATE_UPLOAD_PROGRESS","UPDATE","update","data","payload","listenByRouteTicket","routeTicketId","dispatch","getState","console","log","listenObjectsByRouteTicket","updateListener","error","removeListenByRouteTicket","unlistenObjectsByRouteTicket","submitToBackend","actionName","Promise","resolve","reject","result","routeId","shopId","missionId","payment","routeIds","shopIds","routeTicketIds","missionIds","create","uploadToStorage","id","file","name","uploadFile","progressListener","snap","progress","Math","round","bytesTransferred","totalBytes"],"mappings":"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","sourcesContent":["import { transactionBackendServices } from \"../../services/backend\";\r\nimport { transactionStorageServices } from \"../../services/storage\";\r\nimport { transactionDataServices } from \"../../services/database\";\r\n\r\nconst type = \"transaction\";\r\n\r\nconst actions = {\r\n  READ_BY_ROUTETICKET: type + \"READ_BY_ROUTETICKET\",\r\n  READ_BY_ROUTETICKET_ERROR: type + \"READ_BY_ROUTETICKET_ERROR\",\r\n  READ_BY_ROUTETICKET_SUCCESS: type + \"READ_BY_ROUTETICKET_SUCCESS\",\r\n\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPLOAD_TO_STORAGE: type + \"UPLOAD_TO_STORAGE\",\r\n  UPLOAD_TO_STORAGE_SUCCESS: type + \"UPLOAD_TO_STORAGE_SUCCESS\",\r\n  UPLOAD_TO_STORAGE_ERROR : type + \"UPLOAD_TO_STORAGE_ERROR\",\r\n  UPDATE_UPLOAD_PROGRESS : type+ \"UPDATE_UPLOAD_PROGRESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function listenByRouteTicket({routeTicketId = null}) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_BY_ROUTETICKET });\r\n    try {\r\n\r\n      console.log(`Start listen to transaction belong to route ticket : ${routeTicketId} `)\r\n\r\n      transactionDataServices.listenObjectsByRouteTicket({\r\n        routeTicketId: routeTicketId,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_BY_ROUTETICKET_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_BY_ROUTETICKET_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenByRouteTicket() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed listener to transaction\")\r\n    transactionDataServices.unlistenObjectsByRouteTicket();\r\n  }\r\n}\r\n\r\nexport function submitToBackend(data, actionName) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n\r\n      try {\r\n        switch (actionName) {\r\n          case \"create\":\r\n            const { routeId, shopId, routeTicketId, missionId, payment } = data;\r\n            data = {\r\n              routeIds: [routeId],\r\n              shopIds: [shopId],\r\n              routeTicketIds: [routeTicketId],\r\n              missionIds: [missionId],\r\n              payment\r\n            };\r\n            \r\n            result = await transactionBackendServices.create({ data });\r\n            break;\r\n        }\r\n\r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function uploadToStorage(data) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.UPLOAD_TO_STORAGE });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n      const { id, file, name } = data;\r\n  \r\n      try {\r\n        result = await transactionStorageServices\r\n        .uploadFile({ \r\n          id, \r\n          file, \r\n          name,  \r\n          progressListener: snap => {\r\n            const progress = Math.round(\r\n              (snap.bytesTransferred / snap.totalBytes) * 100\r\n            );\r\n            dispatch({\r\n              type: actions.UPDATE_UPLOAD_PROGRESS,\r\n              payload: { data: progress },\r\n            });\r\n          }\r\n        });\r\n        \r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.UPLOAD_TO_STORAGE_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.UPLOAD_TO_STORAGE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n} \r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}