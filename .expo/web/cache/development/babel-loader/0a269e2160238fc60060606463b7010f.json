{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ZuMei\\\\gogogainUser\\\\src\\\\screens\\\\subscreen\\\\rank\\\\LuckyDrawRanking\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { LuckyDrawRanking } from \"../../../../components/templates\";\nimport { readFromDatabase } from \"../../../../redux/event/action\";\nimport styles from \"./styles\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.readFromDatabase();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"onRoutePress\",\n    value: function onRoutePress() {\n      Actions.pop();\n      Actions.EventRanking();\n    }\n  }, {\n    key: \"onEventPress\",\n    value: function onEventPress(event) {\n      var id = event.id;\n      Actions.LuckyDrawWinnerRanking({\n        eventId: id\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          events = _this$props.events,\n          readLoading = _this$props.readLoading;\n      return React.createElement(LuckyDrawRanking, {\n        routeTitle: \"Event\",\n        routeDescription: \"Lucky Draw\",\n        routeEndedTitle: \"Event Date\",\n        data: events,\n        eventTitle: \"Route\",\n        luckyTitle: \"Suprise\",\n        drawTitle: \"Event\",\n        onRoutePress: this.onRoutePress.bind(this),\n        onEventPress: this.onEventPress.bind(this),\n        readLoading: readLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$Event = state.Event,\n      events = _state$Event.events,\n      readLoading = _state$Event.readLoading,\n      readError = _state$Event.readError;\n  return {\n    events: events,\n    readLoading: readLoading,\n    readError: readError\n  };\n};\n\nexport default connect(mapStateToProps, {\n  readFromDatabase: readFromDatabase\n})(index);","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/screens/subscreen/rank/LuckyDrawRanking/index.js"],"names":["React","Component","connect","Actions","LuckyDrawRanking","readFromDatabase","styles","index","props","state","pop","EventRanking","event","id","LuckyDrawWinnerRanking","eventId","events","readLoading","onRoutePress","bind","onEventPress","mapStateToProps","Event","readError"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,gBAAT;AAEA,SAASC,gBAAT;AAEA,OAAOC,MAAP;;IAEMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa,EAAb;AAFiB;AAGlB;;;;wCAEmB;AAClB,WAAKD,KAAL,CAAWH,gBAAX;AACD;;;2CAEsB,CAAE;;;mCAEV;AACbF,MAAAA,OAAO,CAACO,GAAR;AACAP,MAAAA,OAAO,CAACQ,YAAR;AACD;;;iCAEYC,K,EAAO;AAAA,UACVC,EADU,GACHD,KADG,CACVC,EADU;AAElBV,MAAAA,OAAO,CAACW,sBAAR,CAA+B;AAACC,QAAAA,OAAO,EAAGF;AAAX,OAA/B;AACD;;;6BAEQ;AAAA,wBACyB,KAAKL,KAD9B;AAAA,UACCQ,MADD,eACCA,MADD;AAAA,UACSC,WADT,eACSA,WADT;AAGP,aACE,oBAAC,gBAAD;AACE,QAAA,UAAU,EAAC,OADb;AAEE,QAAA,gBAAgB,EAAC,YAFnB;AAGE,QAAA,eAAe,EAAC,YAHlB;AAIE,QAAA,IAAI,EAAED,MAJR;AAKE,QAAA,UAAU,EAAC,OALb;AAME,QAAA,UAAU,EAAC,SANb;AAOE,QAAA,SAAS,EAAC,OAPZ;AAQE,QAAA,YAAY,EAAE,KAAKE,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CARhB;AASE,QAAA,YAAY,EAAE,KAAKC,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAThB;AAUE,QAAA,WAAW,EAAEF,WAVf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAcD;;;;EAvCiBhB,S;;AA0CpB,IAAMoB,eAAe,GAAG,SAAlBA,eAAkB,CAACZ,KAAD,EAAW;AAAA,qBACUA,KAAK,CAACa,KADhB;AAAA,MACzBN,MADyB,gBACzBA,MADyB;AAAA,MACjBC,WADiB,gBACjBA,WADiB;AAAA,MACJM,SADI,gBACJA,SADI;AAGjC,SAAO;AAAEP,IAAAA,MAAM,EAANA,MAAF;AAAUC,IAAAA,WAAW,EAAXA,WAAV;AAAuBM,IAAAA,SAAS,EAATA;AAAvB,GAAP;AACD,CAJD;;AAMA,eAAerB,OAAO,CAACmB,eAAD,EAAkB;AAAEhB,EAAAA,gBAAgB,EAAhBA;AAAF,CAAlB,CAAP,CAA+CE,KAA/C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { LuckyDrawRanking } from \"../../../../components/templates\";\r\n\r\nimport { readFromDatabase } from \"../../../../redux/event/action\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.readFromDatabase();\r\n  }\r\n\r\n  componentWillUnmount() {}\r\n\r\n  onRoutePress() {\r\n    Actions.pop();\r\n    Actions.EventRanking();\r\n  }\r\n\r\n  onEventPress(event) {\r\n    const { id } = event;\r\n    Actions.LuckyDrawWinnerRanking({eventId : id });\r\n  }\r\n\r\n  render() {\r\n    const { events, readLoading } = this.props;\r\n\r\n    return (\r\n      <LuckyDrawRanking\r\n        routeTitle=\"Event\"\r\n        routeDescription=\"Lucky Draw\"\r\n        routeEndedTitle=\"Event Date\"\r\n        data={events}\r\n        eventTitle=\"Route\"\r\n        luckyTitle=\"Suprise\"\r\n        drawTitle=\"Event\"\r\n        onRoutePress={this.onRoutePress.bind(this)}\r\n        onEventPress={this.onEventPress.bind(this)}\r\n        readLoading={readLoading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { events, readLoading, readError } = state.Event;\r\n\r\n  return { events, readLoading, readError };\r\n};\r\n\r\nexport default connect(mapStateToProps, { readFromDatabase })(index);\r\n"]},"metadata":{},"sourceType":"module"}