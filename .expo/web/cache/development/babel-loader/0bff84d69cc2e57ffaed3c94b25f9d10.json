{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { database } from \"../../marslab-library-react-native/utils/helper\";\nvar objectGroupName = \"user\";\nvar objectName = \"routeTicket\";\nexport var GeoPoint = database.GeoPoint;\nexport function readObjects(_ref) {\n  var groupId = _ref.groupId;\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: objectGroupName + \"Packaging0/\" + groupId + \"/\" + objectName + \"Packaging0\"\n    }).get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread({}, snapshot.data(), {}, snapshot.data().d, {\n          id: snapshot.id\n        });\n\n        delete data[\"d\"];\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n\n        var processedData = _objectSpread({}, parent, {\n          created: created,\n          deleted: deleted,\n          updated: updated\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\nexport function readObject(_ref2) {\n  var id = _ref2.id;\n  return new Promise(function (resolve, reject) {\n    database.readData({\n      ref: objectName + \"Private0/\" + id\n    }).then(function (snapshot) {\n      var data = _objectSpread({}, snapshot, {}, snapshot.d, {\n        id: snapshot.id\n      });\n\n      delete data[\"d\"];\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n\n      var processedData = _objectSpread({}, parent, {\n        created: created,\n        deleted: deleted,\n        updated: updated\n      });\n\n      resolve(processedData);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\n\nvar listener = function listener() {};\n\nexport function listenObjects(_ref3) {\n  var _ref3$groupId = _ref3.groupId,\n      groupId = _ref3$groupId === void 0 ? null : _ref3$groupId,\n      _ref3$updateListener = _ref3.updateListener,\n      updateListener = _ref3$updateListener === void 0 ? function () {} : _ref3$updateListener;\n  listener = database.readTable({\n    ref: objectGroupName + \"Packaging0/\" + groupId + \"/\" + objectName + \"Packaging0\"\n  }).onSnapshot(function (QuerySnapshot) {\n    var result = [];\n    QuerySnapshot.forEach(function (snapshot) {\n      var data = _objectSpread({}, snapshot.data(), {}, snapshot.data().d, {\n        id: snapshot.id\n      });\n\n      delete data[\"d\"];\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n\n      var processedData = _objectSpread({}, parent, {\n        created: created,\n        deleted: deleted,\n        updated: updated\n      });\n\n      result.push(processedData);\n    });\n    updateListener(result);\n  });\n}\nexport function unlistenObjects() {\n  listener();\n}\n\nvar objectListener = function objectListener() {};\n\nexport function listenObject(_ref4) {\n  var _ref4$objectId = _ref4.objectId,\n      objectId = _ref4$objectId === void 0 ? null : _ref4$objectId,\n      _ref4$updateListener = _ref4.updateListener,\n      updateListener = _ref4$updateListener === void 0 ? function () {} : _ref4$updateListener;\n  objectListener = database.readRecord({\n    ref: objectName + \"Private0/\" + objectId\n  }).onSnapshot(function (snapshot) {\n    var data = _objectSpread({}, snapshot.data(), {}, snapshot.data().d, {\n      id: snapshot.id\n    });\n\n    delete data[\"d\"];\n    var parent = database.processData({\n      data: data\n    });\n    var created = database.processData({\n      data: data.created\n    });\n    var deleted = database.processData({\n      data: data.deleted\n    });\n    var updated = database.processData({\n      data: data.updated\n    });\n\n    var processedData = _objectSpread({}, parent, {\n      created: created,\n      deleted: deleted,\n      updated: updated\n    });\n\n    updateListener(processedData);\n  });\n}\nexport function unlistenObject() {\n  objectListener();\n}","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/services/database/routeTicket.js"],"names":["database","objectGroupName","objectName","GeoPoint","readObjects","groupId","Promise","resolve","reject","readTable","ref","get","then","QuerySnapshot","result","forEach","snapshot","data","d","id","parent","processData","created","deleted","updated","processedData","push","catch","error","readObject","readData","listener","listenObjects","updateListener","onSnapshot","unlistenObjects","objectListener","listenObject","objectId","readRecord","unlistenObject"],"mappings":"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","sourcesContent":["import { database } from \"../../marslab-library-react-native/utils/helper\";\r\n\r\nconst objectGroupName = \"user\"\r\nconst objectName = \"routeTicket\";\r\n\r\nexport const GeoPoint = database.GeoPoint;\r\n\r\nexport function readObjects({groupId}) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readTable({ ref: `${objectGroupName}Packaging0/${groupId}/${objectName}Packaging0` })\r\n      .get()\r\n      .then(QuerySnapshot => {\r\n        const result = [];\r\n        QuerySnapshot.forEach(snapshot => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            ...snapshot.data().d,\r\n            id: snapshot.id\r\n          };\r\n          delete data[\"d\"];\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const processedData = { ...parent, created, deleted, updated };\r\n\r\n          result.push(processedData);\r\n        });\r\n        resolve(result);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\n\r\n\r\nexport function readObject({ id }) {\r\n  return new Promise((resolve, reject) => {\r\n    database\r\n      .readData({ ref: `${objectName}Private0/${id}` })\r\n      .then(snapshot => {\r\n\r\n        const data = {\r\n          ...snapshot,\r\n          ...snapshot.d,\r\n          id: snapshot.id\r\n        };\r\n\r\n        delete data[\"d\"];\r\n\r\n        const parent = database.processData({ data });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n\r\n        const processedData = { ...parent, created, deleted, updated };\r\n\r\n        resolve(processedData);\r\n      })\r\n      .catch(error => {\r\n        reject(error);\r\n      });\r\n  });\r\n}\r\n\r\nlet listener = () => {};\r\n\r\nexport function listenObjects({groupId = null, updateListener = () =>{} }) {\r\n  listener = database\r\n      .readTable({ ref: `${objectGroupName}Packaging0/${groupId}/${objectName}Packaging0` })\r\n      .onSnapshot(QuerySnapshot => {\r\n        const result = [];\r\n        QuerySnapshot.forEach(snapshot => {\r\n          const data = {\r\n            ...snapshot.data(),\r\n            ...snapshot.data().d,\r\n            id: snapshot.id\r\n          };\r\n          delete data[\"d\"];\r\n\r\n          const parent = database.processData({ data });\r\n          const created = database.processData({ data: data.created });\r\n          const deleted = database.processData({ data: data.deleted });\r\n          const updated = database.processData({ data: data.updated });\r\n\r\n          const processedData = { ...parent, created, deleted, updated };\r\n\r\n          result.push(processedData);\r\n        });\r\n        updateListener(result)\r\n      })\r\n}\r\n\r\nexport function unlistenObjects() {\r\n  listener();\r\n}\r\n\r\nlet objectListener = () => {};\r\n\r\nexport function listenObject({ objectId = null, updateListener = () => {} }) {\r\n  objectListener = database\r\n    .readRecord({ ref: `${objectName}Private0/${objectId}` })\r\n    .onSnapshot((snapshot) => {\r\n      const data = {\r\n        ...snapshot.data(),\r\n        ...snapshot.data().d,\r\n        id: snapshot.id,\r\n      };\r\n      delete data[\"d\"];\r\n\r\n      const parent = database.processData({ data });\r\n      const created = database.processData({ data: data.created });\r\n      const deleted = database.processData({ data: data.deleted });\r\n      const updated = database.processData({ data: data.updated });\r\n\r\n      const processedData = { ...parent, created, deleted, updated };\r\n\r\n      updateListener(processedData);\r\n    });\r\n}\r\n\r\nexport function unlistenObject() {\r\n  objectListener();\r\n}"]},"metadata":{},"sourceType":"module"}