{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ZuMei\\\\gogogainUser\\\\src\\\\screens\\\\auth\\\\TAC\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { api } from \"../../../settings\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { View, Image, ImageBackground, KeyboardAvoidingView, Text, ScrollView, TouchableOpacity, TouchableWithoutFeedBack } from \"../../../marslab-library-react-native/components/atoms\";\nimport { TACTextInput, IconButton } from \"../../../marslab-library-react-native/components/molecules\";\nimport styles from \"./styles\";\nimport { SuccessfulModal } from \"./successful\";\nimport { update, loginTACConfirmation, loginWithPhoneNumber, modalControl } from \"../../../marslab-library-react-native/redux/auth/actions\";\nimport clone from \"clone\";\nvar authDomain = api.firebaseConfig.authDomain;\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n\n    _this.onRecordChange = function (key, value) {\n      var _clone = clone(_this.props),\n          loginDetails = _clone.loginDetails;\n\n      if (key) loginDetails[key] = value;\n\n      _this.props.update(loginDetails);\n    };\n\n    _this.onLoginBack = function () {\n      var _clone2 = clone(_this.props),\n          loginDetails = _clone2.loginDetails;\n\n      loginDetails.tac = \"\";\n      loginDetails.confirmationResult.verificationId = null;\n\n      _this.props.update(loginDetails);\n\n      Actions.pop();\n    };\n\n    _this.onSendSMS = function (_ref) {\n      var phoneNumber = _ref.phoneNumber,\n          recaptchaToken = _ref.recaptchaToken;\n      var loginWithPhoneNumber = _this.props.loginWithPhoneNumber;\n\n      try {\n        loginWithPhoneNumber({\n          phoneNumber: phoneNumber,\n          recaptchaToken: recaptchaToken\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    _this.state = {\n      clock: null,\n      countdown: 15\n    };\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.state.clock = setInterval(function () {\n        if (_this2.state.countdown > 0) {\n          _this2.setState({\n            countdown: _this2.state.countdown - 1\n          });\n        }\n      }, 1000);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (this.state.countdown === 0) {\n        clearInterval(this.state.clock);\n      }\n\n      if (prevProps.loginDetails.confirmationResult.verificationId !== this.props.loginDetails.confirmationResult.verificationId && this.props.loginDetails.confirmationResult.verificationId) {\n        clearInterval(this.state.clock);\n      }\n    }\n  }, {\n    key: \"onLoginButtonPress\",\n    value: function onLoginButtonPress(tac) {\n      var loginTACConfirmation = this.props.loginTACConfirmation;\n      loginTACConfirmation({\n        tac: tac\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          loginDetails = _this$props.loginDetails,\n          error = _this$props.error;\n      var phoneNumber = loginDetails.phoneNumber,\n          recaptchaToken = loginDetails.recaptchaToken,\n          tac = loginDetails.tac;\n      return React.createElement(ImageBackground, {\n        source: require(\"../../../../assets/Login.jpg\"),\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableWithoutFeedBack, {\n        onPress: Keyboard.dismiss,\n        accessible: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, React.createElement(KeyboardAwareScrollView, {\n        style: styles.container2,\n        showsVerticalScrollIndicator: false,\n        enableOnAndroid: true,\n        keyboardShouldPersistTaps: \"handled\",\n        extraScrollHeight: Platform.OS === 'ios' ? 0 : 100,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }\n      }, React.createElement(ScrollView, {\n        contentContainerStyle: {\n          flexGrow: 1\n        },\n        showsVerticalScrollIndicator: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.containerpart1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }\n      }, React.createElement(Image, {\n        source: require(\"../../../assets/gogogain/login_logo.png\"),\n        style: styles.logoImage,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }\n      })), React.createElement(View, {\n        style: styles.containerpart2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 15\n        }\n      }, React.createElement(Text, {\n        style: styles.subTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 17\n        }\n      }, \"Enter the 6 digit code we sent you via phone number to continue\")), React.createElement(View, {\n        style: styles.containerpart3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }\n      }, React.createElement(TACTextInput, {\n        value: tac,\n        onChange: this.onRecordChange.bind(this, \"tac\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 17\n        }\n      })), error && React.createElement(View, {\n        style: styles.errorContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 25\n        }\n      }, React.createElement(Text, {\n        style: styles.errorText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 17\n        }\n      }, error.message)), React.createElement(View, {\n        style: styles.containerpart5,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 15\n        }\n      }, React.createElement(TouchableOpacity, {\n        style: styles.submitContainer,\n        onPress: this.onLoginBack.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: [styles.submitText],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 19\n        }\n      }, \"Back\")), React.createElement(TouchableOpacity, {\n        style: styles.submitContainer,\n        onPress: this.onLoginButtonPress.bind(this, tac),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: [styles.submitText],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 19\n        }\n      }, \"Verify\"))), React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 15\n        }\n      }, React.createElement(SuccessfulModal, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 17\n        }\n      }))))));\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(_ref2) {\n  var Auth = _ref2.Auth;\n  var loginDetails = Auth.loginDetails,\n      loading = Auth.loading,\n      error = Auth.error,\n      modalVisible = Auth.modalVisible;\n  return {\n    loginDetails: loginDetails,\n    loading: loading,\n    error: error,\n    modalVisible: modalVisible\n  };\n};\n\nexport default connect(mapStateToProps, {\n  update: update,\n  loginTACConfirmation: loginTACConfirmation,\n  loginWithPhoneNumber: loginWithPhoneNumber,\n  modalControl: modalControl\n})(index);","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/screens/auth/TAC/index.js"],"names":["React","Component","connect","Actions","api","KeyboardAwareScrollView","View","Image","ImageBackground","KeyboardAvoidingView","Text","ScrollView","TouchableOpacity","TouchableWithoutFeedBack","TACTextInput","IconButton","styles","SuccessfulModal","update","loginTACConfirmation","loginWithPhoneNumber","modalControl","clone","authDomain","firebaseConfig","index","props","onRecordChange","key","value","loginDetails","onLoginBack","tac","confirmationResult","verificationId","pop","onSendSMS","phoneNumber","recaptchaToken","error","console","log","state","clock","countdown","setInterval","setState","prevProps","prevState","snapshot","clearInterval","require","container","Keyboard","dismiss","container2","Platform","OS","flexGrow","containerpart1","logoImage","containerpart2","subTitle","containerpart3","bind","errorContainer","errorText","message","containerpart5","submitContainer","submitText","onLoginButtonPress","mapStateToProps","Auth","loading","modalVisible"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { Keyboard, Alert, Platform } from \"react-native\";\r\nimport { api } from \"../../../settings\";\r\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view'\r\nimport {\r\n  View,\r\n  Image,\r\n  ImageBackground,\r\n  KeyboardAvoidingView,\r\n  Text,\r\n  ScrollView,\r\n  TouchableOpacity,\r\n  TouchableWithoutFeedBack,\r\n} from \"../../../marslab-library-react-native/components/atoms\";\r\nimport {\r\n  TACTextInput,\r\n  IconButton,\r\n} from \"../../../marslab-library-react-native/components/molecules\";\r\nimport styles from \"./styles\";\r\n//import { RecaptchaModal } from \"../LogIn/recaptcha\";\r\nimport { SuccessfulModal } from \"./successful\";\r\n\r\nimport {\r\n  update,\r\n  loginTACConfirmation,\r\n  loginWithPhoneNumber,\r\n  modalControl,\r\n} from \"../../../marslab-library-react-native/redux/auth/actions\";\r\n\r\nimport clone from \"clone\";\r\n\r\nconst { authDomain } = api.firebaseConfig;\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      clock: null,\r\n      countdown: 15,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.state.clock = setInterval(() => {\r\n      if (this.state.countdown > 0) {\r\n        this.setState({ countdown: this.state.countdown - 1 });\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (this.state.countdown === 0) {\r\n      clearInterval(this.state.clock);\r\n    }\r\n\r\n    if (\r\n      prevProps.loginDetails.confirmationResult.verificationId !==\r\n        this.props.loginDetails.confirmationResult.verificationId &&\r\n      this.props.loginDetails.confirmationResult.verificationId\r\n    ) {\r\n      clearInterval(this.state.clock);\r\n    }\r\n  }\r\n\r\n  onRecordChange = (key, value) => {\r\n    let { loginDetails } = clone(this.props);\r\n    if (key) loginDetails[key] = value;\r\n\r\n    this.props.update(loginDetails);\r\n  };\r\n\r\n  onLoginBack = () => {\r\n    let { loginDetails } = clone(this.props);\r\n\r\n    loginDetails.tac = \"\";\r\n    loginDetails.confirmationResult.verificationId = null;\r\n\r\n    this.props.update(loginDetails);\r\n\r\n    Actions.pop();\r\n  };\r\n\r\n  onLoginButtonPress(tac) {\r\n    const { loginTACConfirmation } = this.props;\r\n    loginTACConfirmation({ tac });\r\n  }\r\n\r\n  onSendSMS = ({ phoneNumber, recaptchaToken }) => {\r\n    const { loginWithPhoneNumber } = this.props;\r\n    try {\r\n      loginWithPhoneNumber({ phoneNumber, recaptchaToken });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { loginDetails, error } = this.props;\r\n    const { phoneNumber, recaptchaToken, tac } = loginDetails;\r\n\r\n    return (\r\n      <ImageBackground\r\n        source={require(\"../../../../assets/Login.jpg\")}\r\n        style={styles.container}\r\n      >\r\n        <TouchableWithoutFeedBack onPress={Keyboard.dismiss} accessible={false}>\r\n         {/* < KeyboardAvoidingView\r\n            //behavior={Platform.OS === \"ios\" ? \"padding\" : null}\r\n            behavior=\"padding\"\r\n            style={styles.container2}\r\n            keyboardVerticalOffset={Platform.OS === \"ios\" ? -300 : -300}\r\n            enabled\r\n          > */}\r\n          <KeyboardAwareScrollView\r\n                style={styles.container2}\r\n                showsVerticalScrollIndicator = {false}\r\n                enableOnAndroid={true} \r\n                keyboardShouldPersistTaps='handled'\r\n                extraScrollHeight={Platform.OS === 'ios' ? 0 : 100} \r\n                /*  behavior={Platform.OS === \"ios\" ? \"padding\" : \"height\"}\r\n                //behavior=\"position\"\r\n                //behavior=\"padding\"\r\n                style={{flex:1}}\r\n                keyboardVerticalOffset={Platform.OS === \"ios\" ? 100 : -700}\r\n                enabled */\r\n            >\r\n            <ScrollView\r\n              contentContainerStyle={{ flexGrow: 1 }}\r\n              showsVerticalScrollIndicator={false}\r\n            >\r\n              <View style={styles.containerpart1}>\r\n                <Image\r\n                  source={require(\"../../../assets/gogogain/login_logo.png\")}\r\n                  style={styles.logoImage}\r\n                />\r\n              </View>\r\n              <View style={styles.containerpart2}>\r\n                <Text style={styles.subTitle}>\r\n                  Enter the 6 digit code we sent you via phone number to\r\n                  continue\r\n                </Text>\r\n              </View>\r\n              <View style={styles.containerpart3}>\r\n                <TACTextInput\r\n                  value={tac}\r\n                  onChange={this.onRecordChange.bind(this, \"tac\")}\r\n                />\r\n              </View>\r\n              {/* {this.state.countdown > 0 && (\r\n                <View style={styles.containerpart4}>\r\n                  <Text style={styles.countDownText}>code expired in: </Text>\r\n                  <Text style={styles.countDownTime}>\r\n                    {this.state.countdown === 60\r\n                      ? \"01:00\"\r\n                      : this.state.countdown / 10 >= 1\r\n                      ? \"00:\" + this.state.countdown\r\n                      : \"00:0\" + this.state.countdown}\r\n                  </Text>\r\n                </View>\r\n              )}\r\n              {this.state.countdown === 0 && (\r\n                <View style={styles.containerpart4}>\r\n                  <TouchableOpacity\r\n                    onPress={()=>this.onSendSMS({phoneNumber, recaptchaToken})}\r\n                  >\r\n                    <Text style={styles.resendTAC}>Resend TAC</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              )} */}\r\n              {error && <View style={styles.errorContainer}>\r\n                <Text style={styles.errorText}>\r\n                  {error.message}\r\n                </Text>\r\n              </View>}\r\n\r\n              <View style={styles.containerpart5}>\r\n                <TouchableOpacity\r\n                  style={styles.submitContainer}\r\n                  onPress={this.onLoginBack.bind(this)}\r\n                >\r\n                  <Text style={[styles.submitText]}>Back</Text>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity\r\n                  style={styles.submitContainer}\r\n                  onPress={this.onLoginButtonPress.bind(this, tac)}\r\n                >\r\n                  <Text style={[styles.submitText]}>Verify</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View>\r\n                <SuccessfulModal />\r\n              </View>\r\n            </ScrollView>\r\n            </KeyboardAwareScrollView>\r\n        </TouchableWithoutFeedBack>\r\n      </ImageBackground>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ Auth }) => {\r\n  const { loginDetails, loading, error, modalVisible } = Auth;\r\n\r\n  return { loginDetails, loading, error, modalVisible };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  update,\r\n  loginTACConfirmation,\r\n  loginWithPhoneNumber,\r\n  modalControl,\r\n})(index);\r\n"]},"metadata":{},"sourceType":"module"}