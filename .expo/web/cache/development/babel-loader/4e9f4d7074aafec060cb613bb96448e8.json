{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Gogogain\\\\Gogogain - User\\\\src\\\\screens\\\\subscreen\\\\rank\\\\EventRanking\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { EventRanking } from \"@components/templates\";\nimport { readClosedRoutes } from \"@redux/route/action\";\nimport styles from \"./styles\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n    _this.state = {};\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.readClosedRoutes();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"onEventPress\",\n    value: function onEventPress() {\n      Actions.pop();\n      Actions.LuckyDrawRanking();\n    }\n  }, {\n    key: \"onRoutePress\",\n    value: function onRoutePress(route) {\n      var id = route.id;\n      Actions.RouteRanking({\n        routeId: id\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          closedRoutes = _this$props.closedRoutes,\n          readClosedRoutesLoading = _this$props.readClosedRoutesLoading;\n      var closedRoutesSort = closedRoutes.sort(function (a, b) {\n        return b.ended.at - a.ended.at;\n      });\n      return React.createElement(EventRanking, {\n        routeTitle: \"Route\",\n        routeEndedTitle: \"Route Ended\",\n        data: closedRoutesSort,\n        eventTitle: \"Route\",\n        luckyTitle: \"Suprise\",\n        drawTitle: \"Event\",\n        onEventPress: this.onEventPress.bind(this),\n        onRoutePress: this.onRoutePress.bind(this),\n        readLoading: readClosedRoutesLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var _state$Route = state.Route,\n      closedRoutes = _state$Route.closedRoutes,\n      readClosedRoutesLoading = _state$Route.readClosedRoutesLoading,\n      readClosedRoutesError = _state$Route.readClosedRoutesError;\n  return {\n    closedRoutes: closedRoutes,\n    readClosedRoutesLoading: readClosedRoutesLoading,\n    readClosedRoutesError: readClosedRoutesError\n  };\n};\n\nexport default connect(mapStateToProps, {\n  readClosedRoutes: readClosedRoutes\n})(index);","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/screens/subscreen/rank/EventRanking/index.js"],"names":["React","Component","connect","Actions","EventRanking","readClosedRoutes","styles","index","props","state","pop","LuckyDrawRanking","route","id","RouteRanking","routeId","closedRoutes","readClosedRoutesLoading","closedRoutesSort","sort","a","b","ended","at","onEventPress","bind","onRoutePress","mapStateToProps","Route","readClosedRoutesError"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,SAASC,gBAAT,QAAiC,qBAAjC;AAEA,OAAOC,MAAP;;IAEMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa,EAAb;AAFiB;AAGlB;;;;wCAEmB;AAClB,WAAKD,KAAL,CAAWH,gBAAX;AACD;;;2CAEsB,CAAE;;;mCAEV;AAEbF,MAAAA,OAAO,CAACO,GAAR;AACAP,MAAAA,OAAO,CAACQ,gBAAR;AACD;;;iCAEYC,K,EAAO;AAAA,UACVC,EADU,GACHD,KADG,CACVC,EADU;AAElBV,MAAAA,OAAO,CAACW,YAAR,CAAqB;AAAEC,QAAAA,OAAO,EAAEF;AAAX,OAArB;AACD;;;6BAEQ;AAAA,wBAC2C,KAAKL,KADhD;AAAA,UACCQ,YADD,eACCA,YADD;AAAA,UACeC,uBADf,eACeA,uBADf;AAGP,UAAMC,gBAAgB,GAAGF,YAAY,CAACG,IAAb,CAAkB,UAACC,CAAD,EAAGC,CAAH,EAAS;AAClD,eAAOA,CAAC,CAACC,KAAF,CAAQC,EAAR,GAAaH,CAAC,CAACE,KAAF,CAAQC,EAA5B;AACD,OAFwB,CAAzB;AAIA,aACE,oBAAC,YAAD;AACE,QAAA,UAAU,EAAC,OADb;AAEE,QAAA,eAAe,EAAC,aAFlB;AAGE,QAAA,IAAI,EAAEL,gBAHR;AAIE,QAAA,UAAU,EAAC,OAJb;AAKE,QAAA,UAAU,EAAC,SALb;AAME,QAAA,SAAS,EAAC,OANZ;AAOE,QAAA,YAAY,EAAE,KAAKM,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAPhB;AAQE,QAAA,YAAY,EAAE,KAAKC,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CARhB;AASE,QAAA,WAAW,EAAER,uBATf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAaD;;;;EA3CiBhB,S;;AA8CpB,IAAM0B,eAAe,GAAG,SAAlBA,eAAkB,CAAClB,KAAD,EAAW;AAAA,qBAK7BA,KAAK,CAACmB,KALuB;AAAA,MAE/BZ,YAF+B,gBAE/BA,YAF+B;AAAA,MAG/BC,uBAH+B,gBAG/BA,uBAH+B;AAAA,MAI/BY,qBAJ+B,gBAI/BA,qBAJ+B;AAOjC,SAAO;AAAEb,IAAAA,YAAY,EAAZA,YAAF;AAAgBC,IAAAA,uBAAuB,EAAvBA,uBAAhB;AAAyCY,IAAAA,qBAAqB,EAArBA;AAAzC,GAAP;AACD,CARD;;AAUA,eAAe3B,OAAO,CAACyB,eAAD,EAAkB;AAAEtB,EAAAA,gBAAgB,EAAhBA;AAAF,CAAlB,CAAP,CAA+CE,KAA/C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { EventRanking } from \"@components/templates\";\r\n\r\nimport { readClosedRoutes } from \"@redux/route/action\";\r\n\r\nimport styles from \"./styles\";\r\n\r\nclass index extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.readClosedRoutes();\r\n  }\r\n\r\n  componentWillUnmount() {}\r\n\r\n  onEventPress() {\r\n    //Actions.popTo('LuckyDrawRanking')\r\n    Actions.pop();\r\n    Actions.LuckyDrawRanking();\r\n  }\r\n\r\n  onRoutePress(route) {\r\n    const { id } = route;\r\n    Actions.RouteRanking({ routeId: id });\r\n  }\r\n\r\n  render() {\r\n    const { closedRoutes, readClosedRoutesLoading } = this.props;\r\n\r\n    const closedRoutesSort = closedRoutes.sort((a,b) => {\r\n      return b.ended.at - a.ended.at\r\n    });\r\n\r\n    return (\r\n      <EventRanking\r\n        routeTitle=\"Route\"\r\n        routeEndedTitle=\"Route Ended\"\r\n        data={closedRoutesSort}\r\n        eventTitle=\"Route\"\r\n        luckyTitle=\"Suprise\"\r\n        drawTitle=\"Event\"\r\n        onEventPress={this.onEventPress.bind(this)}\r\n        onRoutePress={this.onRoutePress.bind(this)}\r\n        readLoading={readClosedRoutesLoading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const {\r\n    closedRoutes,\r\n    readClosedRoutesLoading,\r\n    readClosedRoutesError,\r\n  } = state.Route;\r\n\r\n  return { closedRoutes, readClosedRoutesLoading, readClosedRoutesError };\r\n};\r\n\r\nexport default connect(mapStateToProps, { readClosedRoutes })(index);\r\n"]},"metadata":{},"sourceType":"module"}