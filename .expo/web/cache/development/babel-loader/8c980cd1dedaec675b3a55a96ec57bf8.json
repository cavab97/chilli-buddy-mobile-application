{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\ZuMei\\\\gogogainUser\\\\src\\\\screens\\\\subscreen\\\\payment\\\\SubmitReceipt\\\\index.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Actions } from \"react-native-router-flux\";\nimport { SubmitReceipt } from \"../../../../components/templates\";\nimport { uploadToStorage, submitToBackend as submitTransaction } from \"../../../../redux/transaction/action\";\nimport styles from \"./styles\";\n\nvar index = function (_Component) {\n  _inherits(index, _Component);\n\n  var _super = _createSuper(index);\n\n  function index(props) {\n    var _this;\n\n    _classCallCheck(this, index);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      error: null,\n      messageSubmit: null,\n      progressVisible: false,\n      message: null,\n      triggerNextPage: false,\n      triggerLoading: false,\n      submitLoading: null\n    };\n    return _this;\n  }\n\n  _createClass(index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      if (this.props.uploadTransactionError !== prevProps.uploadTransactionError && this.props.uploadTransactionError) {\n        this.setState({\n          error: this.props.uploadTransactionError\n        });\n        setTimeout(function () {\n          _this2.setState({\n            progressVisible: false\n          });\n\n          Actions.popTo(\"Route\", {\n            routeId: _this2.props.routeId\n          });\n        }, 3000);\n      }\n\n      if (this.props.uploadTransactionLoading !== prevProps.uploadTransactionLoading && this.props.uploadTransactionLoading) {\n        this.setState({\n          triggerLoading: false\n        });\n      }\n\n      if (this.props.uploadTransactionResult.url !== prevProps.uploadTransactionResult.url && this.props.uploadTransactionResult.url) {\n        this.setState({\n          message: \"Upload successful!\",\n          submitLoading: true\n        });\n      }\n\n      if (this.props.submitTransactionError.message !== prevProps.submitTransactionError.message && this.props.submitTransactionError.message) {\n        this.setState({\n          error: this.props.submitTransactionError.message,\n          submitLoading: null\n        });\n        setTimeout(function () {\n          _this2.setState({\n            progressVisible: false\n          });\n\n          Actions.popTo(\"Route\", {\n            routeId: _this2.props.routeId\n          });\n        }, 3000);\n      }\n\n      if (this.props.submitTransactionResult.message !== prevProps.submitTransactionResult.message && this.props.submitTransactionResult.message) {\n        this.setState({\n          messageSubmit: this.props.submitTransactionResult.message,\n          submitLoading: null\n        });\n        setTimeout(function () {\n          _this2.setState({\n            progressVisible: false\n          });\n\n          Actions.popTo(\"Route\", {\n            routeId: _this2.props.routeId\n          });\n        }, 3000);\n      }\n\n      if (this.props.transactions.uploadResult.url !== prevProps.transactions.uploadResult.url && this.props.transactions.uploadResult.url && !this.props.transactions.submitLoading) {\n        this.onPay();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"uploadImage\",\n    value: function uploadImage() {\n      this.setState({\n        progressVisible: true,\n        triggerLoading: true\n      });\n      var filename = this.props.uri.split('/').pop();\n      var data = {\n        id: this.props.mission.id,\n        file: this.props.uri,\n        name: filename\n      };\n      this.props.uploadToStorage(data);\n    }\n  }, {\n    key: \"lookingForTicket\",\n    value: function lookingForTicket(_ref) {\n      var _ref$routeId = _ref.routeId,\n          routeId = _ref$routeId === void 0 ? null : _ref$routeId;\n      var _this$props$routeTick = this.props.routeTicketState.routeTickets,\n          routeTickets = _this$props$routeTick === void 0 ? [] : _this$props$routeTick;\n      var routeTicketId = null;\n      routeTickets.forEach(function (routeTicket) {\n        if (routeTicket.routeIds[0] === routeId) {\n          routeTicketId = routeTicket.id;\n        }\n      });\n      return routeTicketId;\n    }\n  }, {\n    key: \"onPay\",\n    value: function onPay() {\n      var routeId = this.props.routeId;\n      var photoUrl = this.props.transactions.uploadResult.url;\n      var routeTicketId = this.lookingForTicket({\n        routeId: routeId\n      });\n      var shopId = this.props.mission.shop.id;\n      var missionId = this.props.mission.id;\n      var amount = this.props.value.replace(\"RM\", \"\");\n      amount = amount.replace(\",\", \"\");\n      var payment = {\n        amount: parseFloat(amount),\n        paymentId: null,\n        paymentType: \"cash\",\n        receiptId: null,\n        receiptPhotoUrl: photoUrl,\n        receiptUrl: null\n      };\n      var data = {\n        routeId: routeId,\n        shopId: shopId,\n        routeTicketId: routeTicketId,\n        missionId: missionId,\n        payment: payment\n      };\n      this.props.submitTransaction(data, \"create\");\n    }\n  }, {\n    key: \"onRetake\",\n    value: function onRetake() {\n      Actions.replace(\"CameraReceipt\", this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var uploadTransactionLoading = this.props.uploadTransactionLoading;\n      var uploadProgress = this.props.transactions.uploadProgress;\n      return React.createElement(SubmitReceipt, {\n        uri: this.props.uri,\n        retakeTitle: \"Retake\",\n        doneTitle: \"Done\",\n        uploadImageProgress: uploadProgress,\n        onRetakePress: this.onRetake.bind(this),\n        onDonePress: this.uploadImage.bind(this),\n        progressVisible: this.state.progressVisible,\n        errorMessage: this.state.error,\n        successfulMessage: this.state.message,\n        errorHeader: \"Error\",\n        errorRedirectMessage: \"Please try again later.\",\n        successHeader: \"Success\",\n        triggerLoading: this.state.triggerLoading,\n        loadingMessage: \"Uploading your transaction\",\n        uploadLoadingMessage: \"Hang on. We are processing your transaction\",\n        messageSubmit: this.state.messageSubmit,\n        submitLoading: this.state.submitLoading,\n        uploadLoading: uploadTransactionLoading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }\n      });\n    }\n  }]);\n\n  return index;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  var transactions = state.Transaction;\n  var routeTicketState = state.RouteTicket;\n  var submitTransactionLoading = state.Transaction.submitLoading;\n  var submitTransactionError = state.Transaction.submitError;\n  var submitTransactionResult = state.Transaction.submitResult;\n  var uploadTransactionError = state.Transaction.uploadError;\n  var uploadTransactionResult = state.Transaction.uploadResult;\n  var uploadTransactionLoading = state.Transaction.uploadLoading;\n  return {\n    transactions: transactions,\n    routeTicketState: routeTicketState,\n    submitTransactionError: submitTransactionError,\n    submitTransactionResult: submitTransactionResult,\n    uploadTransactionError: uploadTransactionError,\n    uploadTransactionResult: uploadTransactionResult,\n    uploadTransactionLoading: uploadTransactionLoading,\n    submitTransactionLoading: submitTransactionLoading\n  };\n};\n\nexport default connect(mapStateToProps, {\n  uploadToStorage: uploadToStorage,\n  submitTransaction: submitTransaction\n})(index);","map":{"version":3,"sources":["C:/Users/User/Desktop/ZuMei/gogogainUser/src/screens/subscreen/payment/SubmitReceipt/index.js"],"names":["React","Component","connect","Actions","SubmitReceipt","uploadToStorage","submitToBackend","submitTransaction","styles","index","props","state","error","messageSubmit","progressVisible","message","triggerNextPage","triggerLoading","submitLoading","prevProps","prevState","uploadTransactionError","setState","setTimeout","popTo","routeId","uploadTransactionLoading","uploadTransactionResult","url","submitTransactionError","submitTransactionResult","transactions","uploadResult","onPay","filename","uri","split","pop","data","id","mission","file","name","routeTicketState","routeTickets","routeTicketId","forEach","routeTicket","routeIds","photoUrl","lookingForTicket","shopId","shop","missionId","amount","value","replace","payment","parseFloat","paymentId","paymentType","receiptId","receiptPhotoUrl","receiptUrl","uploadProgress","onRetake","bind","uploadImage","mapStateToProps","Transaction","RouteTicket","submitTransactionLoading","submitError","submitResult","uploadError","uploadLoading"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Actions } from \"react-native-router-flux\";\r\nimport { SubmitReceipt } from \"../../../../components/templates\";\r\nimport {\r\n    uploadToStorage,\r\n    submitToBackend as submitTransaction\r\n} from \"../../../../redux/transaction/action\";\r\n\r\nimport styles from \"./styles\";\r\n\r\n\r\nclass index extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            messageSubmit: null,\r\n            progressVisible: false,\r\n            message: null,\r\n            triggerNextPage: false,\r\n            triggerLoading: false,\r\n            submitLoading: null,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        if (\r\n            this.props.uploadTransactionError !==\r\n            prevProps.uploadTransactionError &&\r\n            this.props.uploadTransactionError\r\n        ) {        \r\n            this.setState({ \r\n                error: this.props.uploadTransactionError,\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({ progressVisible: false })\r\n                Actions.popTo(\"Route\",{ routeId: this.props.routeId });\r\n            },3000); \r\n        } \r\n\r\n        if (\r\n            this.props.uploadTransactionLoading !== \r\n            prevProps.uploadTransactionLoading && \r\n            this.props.uploadTransactionLoading\r\n        ) {\r\n            this.setState({\r\n                triggerLoading: false,\r\n            })\r\n        }\r\n\r\n        if (\r\n            this.props.uploadTransactionResult.url !==\r\n              prevProps.uploadTransactionResult.url &&\r\n            this.props.uploadTransactionResult.url\r\n        ) {\r\n            this.setState({ \r\n                message: \"Upload successful!\",\r\n                submitLoading: true \r\n            });\r\n        }\r\n\r\n        if (\r\n            this.props.submitTransactionError.message !==\r\n              prevProps.submitTransactionError.message &&\r\n            this.props.submitTransactionError.message\r\n        ) {\r\n            this.setState({ \r\n                error: this.props.submitTransactionError.message,\r\n                submitLoading: null,\r\n            });\r\n            setTimeout(() => {\r\n                this.setState({ progressVisible: false })\r\n                Actions.popTo(\"Route\",{ routeId: this.props.routeId });\r\n            },3000); \r\n        }\r\n\r\n        if (\r\n            this.props.submitTransactionResult.message !==\r\n              prevProps.submitTransactionResult.message &&\r\n            this.props.submitTransactionResult.message\r\n        ) {\r\n            this.setState({ \r\n                messageSubmit: this.props.submitTransactionResult.message,\r\n                submitLoading: null,\r\n            }); \r\n            setTimeout(() => {\r\n                this.setState({ progressVisible: false })\r\n                Actions.popTo(\"Route\",{ routeId: this.props.routeId });\r\n            },3000); \r\n        }\r\n\r\n        if (\r\n            this.props.transactions.uploadResult.url !==\r\n              prevProps.transactions.uploadResult.url &&\r\n            this.props.transactions.uploadResult.url &&\r\n            !this.props.transactions.submitLoading\r\n        ) {\r\n            this.onPay();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(){\r\n    }\r\n\r\n    uploadImage(){\r\n        this.setState({\r\n            progressVisible: true,\r\n            triggerLoading: true\r\n        })\r\n        let filename = this.props.uri.split('/').pop();\r\n\r\n        const data = {\r\n            id: this.props.mission.id,\r\n            file: this.props.uri,\r\n            name: filename\r\n        }\r\n        this.props.uploadToStorage(data);\r\n    }\r\n\r\n    lookingForTicket({ routeId = null }) {\r\n        const { routeTickets = [] } = this.props.routeTicketState;\r\n        let routeTicketId = null;\r\n        routeTickets.forEach((routeTicket) => {\r\n            if (routeTicket.routeIds[0] === routeId) {\r\n            routeTicketId = routeTicket.id;\r\n            }\r\n        });\r\n        return routeTicketId;\r\n    }\r\n\r\n    onPay() {\r\n        const { routeId } = this.props;\r\n        const photoUrl = this.props.transactions.uploadResult.url;\r\n        const routeTicketId = this.lookingForTicket({ routeId });\r\n\r\n        const shopId = this.props.mission.shop.id;\r\n        const missionId = this.props.mission.id;\r\n        var amount = this.props.value.replace(\"RM\", \"\");\r\n        amount = amount.replace(\",\", \"\")\r\n\r\n        const payment = {\r\n          amount: parseFloat(amount),\r\n          paymentId: null,\r\n          paymentType: \"cash\",\r\n          receiptId: null,\r\n          receiptPhotoUrl: photoUrl,\r\n          receiptUrl: null,\r\n        };\r\n\r\n        const data = { routeId, shopId, routeTicketId, missionId, payment };\r\n        this.props.submitTransaction(data, \"create\");\r\n    };\r\n\r\n    onRetake() {\r\n        //Actions.CameraReceipt(this.props);\r\n        Actions.replace(\"CameraReceipt\", this.props);\r\n    }\r\n\r\n    render() {\r\n        const { uploadTransactionLoading } = this.props;\r\n        const { uploadProgress } = this.props.transactions;\r\n\r\n        return (\r\n            <SubmitReceipt\r\n                uri={this.props.uri}\r\n                retakeTitle=\"Retake\"\r\n                doneTitle=\"Done\"\r\n                uploadImageProgress={uploadProgress}\r\n                onRetakePress={this.onRetake.bind(this)}\r\n                onDonePress={this.uploadImage.bind(this)}\r\n                progressVisible={this.state.progressVisible}\r\n                errorMessage={this.state.error}\r\n                successfulMessage={this.state.message}\r\n                errorHeader=\"Error\"\r\n                errorRedirectMessage=\"Please try again later.\"\r\n                successHeader=\"Success\"\r\n                triggerLoading={this.state.triggerLoading}\r\n                loadingMessage=\"Uploading your transaction\"\r\n                uploadLoadingMessage=\"Hang on. We are processing your transaction\"\r\n                messageSubmit={this.state.messageSubmit}\r\n                submitLoading={this.state.submitLoading}\r\n                uploadLoading={uploadTransactionLoading}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    const transactions = state.Transaction;\r\n    const routeTicketState = state.RouteTicket;\r\n    const submitTransactionLoading = state.Transaction.submitLoading;\r\n    const submitTransactionError = state.Transaction.submitError;\r\n    const submitTransactionResult = state.Transaction.submitResult;\r\n    const uploadTransactionError = state.Transaction.uploadError;\r\n    const uploadTransactionResult = state.Transaction.uploadResult;\r\n    const uploadTransactionLoading = state.Transaction.uploadLoading;\r\n\r\n    return {\r\n      transactions,\r\n      routeTicketState,\r\n      submitTransactionError,\r\n      submitTransactionResult,\r\n      uploadTransactionError,\r\n      uploadTransactionResult,\r\n      uploadTransactionLoading,\r\n      submitTransactionLoading\r\n    };\r\n  };\r\n\r\nexport default connect(mapStateToProps, { \r\n    uploadToStorage,\r\n    submitTransaction\r\n})(index);\r\n"]},"metadata":{},"sourceType":"module"}