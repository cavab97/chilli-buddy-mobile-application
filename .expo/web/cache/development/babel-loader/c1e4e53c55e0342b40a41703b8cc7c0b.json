{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { routeDataServices } from \"../../services/database\";\nvar type = \"route\";\nvar actions = {\n  READ_ALL_FROM_DATABASE: type + \"READ_ALL_FROM_DATABASE\",\n  READ_ALL_FROM_DATABASE_SUCCESS: type + \"READ_ALL_FROM_DATABASE_SUCCESS\",\n  READ_ALL_FROM_DATABASE_ERROR: type + \"READ_ALL_FROM_DATABASE_ERROR\",\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  READ_RECORD: type + \"READ_RECORD\",\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function readAllFromDatabase() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_ALL_FROM_DATABASE\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var routes;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(routeDataServices.readAllObjects());\n\n            case 3:\n              routes = _context.sent;\n              resolve(routes);\n              dispatch({\n                type: actions.READ_ALL_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: routes\n                }\n              });\n              _context.next = 13;\n              break;\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_ALL_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport function readFromDatabase(_ref) {\n  var _ref$routeGroupId = _ref.routeGroupId,\n      routeGroupId = _ref$routeGroupId === void 0 ? null : _ref$routeGroupId;\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var routes;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(routeDataServices.readObjects({\n                groupId: routeGroupId\n              }));\n\n            case 3:\n              routes = _context2.sent;\n              resolve(routes);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: routes\n                }\n              });\n              _context2.next = 13;\n              break;\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.log(_context2.t0);\n              reject(_context2.t0);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context2.t0\n                }\n              });\n\n            case 13:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0, 8]], Promise);\n    });\n  };\n}\nexport function listenFromDatabase(_ref2) {\n  var _ref2$routeGroupId = _ref2.routeGroupId,\n      routeGroupId = _ref2$routeGroupId === void 0 ? null : _ref2$routeGroupId;\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    console.log(\"Start listen to routes belong to route group : \" + routeGroupId + \" \");\n\n    try {\n      routeDataServices.listenObjects({\n        groupId: routeGroupId,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_FROM_DATABASE_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_FROM_DATABASE_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerFromDatabase() {\n  return function (dispatch) {\n    console.log(\"Removed route listener belong to route group.\");\n    routeDataServices.unlistenObjects();\n  };\n}\nexport function listenToRecord(_ref3) {\n  var _ref3$routeId = _ref3.routeId,\n      routeId = _ref3$routeId === void 0 ? null : _ref3$routeId;\n  return function (dispatch) {\n    dispatch({\n      type: actions.READ_RECORD\n    });\n    console.log(\"Start listen to route : \" + routeId + \" \");\n\n    try {\n      routeDataServices.listenObject({\n        objectId: routeId,\n        updateListener: function updateListener(data) {\n          dispatch({\n            type: actions.READ_RECORD_SUCCESS,\n            payload: {\n              data: data\n            }\n          });\n        }\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch({\n        type: actions.READ_RECORD_ERROR,\n        payload: {\n          error: error\n        }\n      });\n    }\n  };\n}\nexport function removeListenerToRecord() {\n  return function (dispatch) {\n    console.log(\"Removed route listener\");\n    routeDataServices.unlistenObject();\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/redux/route/action.js"],"names":["routeDataServices","type","actions","READ_ALL_FROM_DATABASE","READ_ALL_FROM_DATABASE_SUCCESS","READ_ALL_FROM_DATABASE_ERROR","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","READ_RECORD","READ_RECORD_SUCCESS","READ_RECORD_ERROR","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPDATE","update","data","payload","readAllFromDatabase","dispatch","getState","Promise","resolve","reject","readAllObjects","routes","console","log","error","readFromDatabase","routeGroupId","readObjects","groupId","listenFromDatabase","listenObjects","updateListener","removeListenerFromDatabase","unlistenObjects","listenToRecord","routeId","listenObject","objectId","removeListenerToRecord","unlistenObject"],"mappings":"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","sourcesContent":["import { routeDataServices } from \"../../services/database\";\r\n\r\nconst type = \"route\";\r\n\r\nconst actions = {\r\n  READ_ALL_FROM_DATABASE: type + \"READ_ALL_FROM_DATABASE\",\r\n  READ_ALL_FROM_DATABASE_SUCCESS: type + \"READ_ALL_FROM_DATABASE_SUCCESS\",\r\n  READ_ALL_FROM_DATABASE_ERROR: type + \"READ_ALL_FROM_DATABASE_ERROR\",\r\n\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n \r\n  READ_RECORD: type + \"READ_RECORD\",\r\n  READ_RECORD_SUCCESS: type + \"READ_RECORD_SUCCESS\",\r\n  READ_RECORD_ERROR: type + \"READ_RECORD_ERROR\",\r\n\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function readAllFromDatabase() {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_ALL_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const routes = await routeDataServices.readAllObjects();\r\n\r\n        resolve(routes);\r\n        dispatch({\r\n          type: actions.READ_ALL_FROM_DATABASE_SUCCESS,\r\n          payload: { data: routes },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_ALL_FROM_DATABASE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\n\r\n\r\nexport function readFromDatabase({ routeGroupId = null }) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const routes = await routeDataServices.readObjects({\r\n          groupId: routeGroupId,\r\n        });\r\n\r\n        resolve(routes);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_SUCCESS,\r\n          payload: { data: routes },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function listenFromDatabase({ routeGroupId = null }) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    console.log(`Start listen to routes belong to route group : ${routeGroupId} `)\r\n    try {\r\n      routeDataServices.listenObjects({\r\n        groupId: routeGroupId,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_FROM_DATABASE_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_FROM_DATABASE_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerFromDatabase() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed route listener belong to route group.\")\r\n    routeDataServices.unlistenObjects();\r\n  }\r\n}\r\n\r\nexport function listenToRecord({ routeId = null,  }) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.READ_RECORD });\r\n    console.log(`Start listen to route : ${routeId} `)\r\n    try {\r\n      routeDataServices.listenObject({\r\n        objectId: routeId,\r\n        updateListener: (data) => {\r\n          dispatch({\r\n            type: actions.READ_RECORD_SUCCESS,\r\n            payload: { data },\r\n          });\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n      dispatch({\r\n        type: actions.READ_RECORD_ERROR,\r\n        payload: { error },\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport function removeListenerToRecord() {\r\n  return (dispatch) => {\r\n    console.log(\"Removed route listener\")\r\n    routeDataServices.unlistenObject();\r\n  }\r\n}\r\n\r\n// export function submitToBackend(data, actionName) {\r\n//   return (dispatch, getState) => {\r\n//     dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n//     return new Promise(async (resolve, reject) => {\r\n//       let result = {};\r\n\r\n//       try {\r\n//         switch (actionName) {\r\n//           case \"updateProfile\":\r\n//             result = await authBackendServices.updateProfile({data})\r\n//             break;\r\n//         }\r\n\r\n//         resolve(result);\r\n//         dispatch({\r\n//           type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n//           payload: { data: result },\r\n//         });\r\n//       } catch (error) {\r\n//         console.log(error);\r\n//         reject(error);\r\n//         dispatch({\r\n//           type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n//           payload: { error },\r\n//         });\r\n//       }\r\n//     });\r\n//   };\r\n// }\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}