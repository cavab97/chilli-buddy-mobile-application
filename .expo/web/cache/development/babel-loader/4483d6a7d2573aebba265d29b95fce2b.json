{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { userDataServices } from \"../../services/database\";\nimport { authBackendServices, userBackendServices } from \"../../services/backend\";\nimport { userStorageServices } from \"../../services/storage\";\nimport authActions from \"../auth/actions\";\nvar type = \"user\";\nvar actions = {\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\n  UPLOAD_TO_STORAGE: type + \"UPLOAD_TO_STORAGE\",\n  UPLOAD_TO_STORAGE_SUCCESS: type + \"UPLOAD_TO_STORAGE_SUCCESS\",\n  UPLOAD_TO_STORAGE_ERROR: type + \"UPLOAD_TO_STORAGE_ERROR\",\n  UPDATE_UPLOAD_PROGRESS: type + \"UPDATE_UPLOAD_PROGRESS\",\n  UPDATE: type + \"UPDATE\"\n};\nexport var update = function update(data) {\n  return {\n    type: actions.UPDATE,\n    payload: {\n      data: data\n    }\n  };\n};\nexport function readFromDatabase() {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.READ_FROM_DATABASE\n    });\n    return new Promise(function _callee(resolve, reject) {\n      var uid, user;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              uid = getState().Auth.user.uid;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(userDataServices.readOwnInfo({\n                uid: uid\n              }));\n\n            case 4:\n              user = _context.sent;\n              resolve(user);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_SUCCESS,\n                payload: {\n                  data: user\n                }\n              });\n              _context.next = 14;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n              console.log(_context.t0);\n              reject(_context.t0);\n              dispatch({\n                type: actions.READ_FROM_DATABASE_ERROR,\n                payload: {\n                  error: _context.t0\n                }\n              });\n\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 9]], Promise);\n    });\n  };\n}\nexport function submitToBackend(data, actionName) {\n  return function (dispatch, getState) {\n    dispatch({\n      type: actions.SUBMIT_TO_BACKEND\n    });\n    return new Promise(function _callee2(resolve, reject) {\n      var result;\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              result = {};\n              _context2.prev = 1;\n              _context2.t0 = actionName;\n              _context2.next = _context2.t0 === \"updateProfile\" ? 5 : _context2.t0 === \"unionNotificationToken\" ? 10 : _context2.t0 === \"removeNotificationToken\" ? 14 : 18;\n              break;\n\n            case 5:\n              _context2.next = 7;\n              return _regeneratorRuntime.awrap(authBackendServices.updateProfile({\n                data: data\n              }));\n\n            case 7:\n              result = _context2.sent;\n              dispatch({\n                type: authActions.BASIC_INFO_UPDATA,\n                payload: {\n                  data: data\n                }\n              });\n              return _context2.abrupt(\"break\", 18);\n\n            case 10:\n              _context2.next = 12;\n              return _regeneratorRuntime.awrap(userBackendServices.unionNotisToken({\n                data: data\n              }));\n\n            case 12:\n              result = _context2.sent;\n              return _context2.abrupt(\"break\", 18);\n\n            case 14:\n              _context2.next = 16;\n              return _regeneratorRuntime.awrap(userBackendServices.removeNotisToken({\n                data: data\n              }));\n\n            case 16:\n              result = _context2.sent;\n              return _context2.abrupt(\"break\", 18);\n\n            case 18:\n              resolve(result);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context2.next = 27;\n              break;\n\n            case 22:\n              _context2.prev = 22;\n              _context2.t1 = _context2[\"catch\"](1);\n              console.log(_context2.t1);\n              reject(_context2.t1);\n              dispatch({\n                type: actions.SUBMIT_TO_BACKEND_ERROR,\n                payload: {\n                  error: _context2.t1\n                }\n              });\n\n            case 27:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[1, 22]], Promise);\n    });\n  };\n}\nexport function uploadToStorage(data) {\n  return function (dispatch) {\n    dispatch({\n      type: actions.UPLOAD_TO_STORAGE\n    });\n    return new Promise(function _callee3(resolve, reject) {\n      var result, id, file, name;\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              result = {};\n              id = data.id, file = data.file, name = data.name;\n              _context3.prev = 2;\n              _context3.next = 5;\n              return _regeneratorRuntime.awrap(userStorageServices.uploadFile({\n                id: id,\n                file: file,\n                name: name,\n                progressListener: function progressListener(snap) {\n                  var progress = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n                  dispatch({\n                    type: actions.UPDATE_UPLOAD_PROGRESS,\n                    payload: {\n                      data: progress\n                    }\n                  });\n                }\n              }));\n\n            case 5:\n              result = _context3.sent;\n              resolve(result);\n              dispatch({\n                type: actions.UPLOAD_TO_STORAGE_SUCCESS,\n                payload: {\n                  data: result\n                }\n              });\n              _context3.next = 15;\n              break;\n\n            case 10:\n              _context3.prev = 10;\n              _context3.t0 = _context3[\"catch\"](2);\n              console.log(_context3.t0);\n              reject(_context3.t0);\n              dispatch({\n                type: actions.UPLOAD_TO_STORAGE_ERROR,\n                payload: {\n                  error: _context3.t0\n                }\n              });\n\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, [[2, 10]], Promise);\n    });\n  };\n}\nexport default actions;","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/marslab-library-react-native/redux/user/action.js"],"names":["userDataServices","authBackendServices","userBackendServices","userStorageServices","authActions","type","actions","READ_FROM_DATABASE","READ_FROM_DATABASE_SUCCESS","READ_FROM_DATABASE_ERROR","SUBMIT_TO_BACKEND","SUBMIT_TO_BACKEND_ERROR","SUBMIT_TO_BACKEND_SUCCESS","UPLOAD_TO_STORAGE","UPLOAD_TO_STORAGE_SUCCESS","UPLOAD_TO_STORAGE_ERROR","UPDATE_UPLOAD_PROGRESS","UPDATE","update","data","payload","readFromDatabase","dispatch","getState","Promise","resolve","reject","uid","Auth","user","readOwnInfo","console","log","error","submitToBackend","actionName","result","updateProfile","BASIC_INFO_UPDATA","unionNotisToken","removeNotisToken","uploadToStorage","id","file","name","uploadFile","progressListener","snap","progress","Math","round","bytesTransferred","totalBytes"],"mappings":"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","sourcesContent":["import { userDataServices } from \"../../services/database\";\r\nimport { authBackendServices, userBackendServices } from \"../../services/backend\";\r\nimport { userStorageServices } from \"../../services/storage\";\r\nimport authActions from \"../auth/actions\" \r\n\r\nconst type = \"user\";\r\n\r\nconst actions = {\r\n  READ_FROM_DATABASE: type + \"READ_FROM_DATABASE\",\r\n  READ_FROM_DATABASE_SUCCESS: type + \"READ_FROM_DATABASE_SUCCESS\",\r\n  READ_FROM_DATABASE_ERROR: type + \"READ_FROM_DATABASE_ERROR\",\r\n\r\n  SUBMIT_TO_BACKEND: type + \"SUBMIT_TO_BACKEND\",\r\n  SUBMIT_TO_BACKEND_ERROR: type + \"SUBMIT_TO_BACKEND_ERROR\",\r\n  SUBMIT_TO_BACKEND_SUCCESS: type + \"SUBMIT_TO_BACKEND_SUCCESS\",\r\n\r\n  UPLOAD_TO_STORAGE: type + \"UPLOAD_TO_STORAGE\",\r\n  UPLOAD_TO_STORAGE_SUCCESS: type + \"UPLOAD_TO_STORAGE_SUCCESS\",\r\n  UPLOAD_TO_STORAGE_ERROR : type + \"UPLOAD_TO_STORAGE_ERROR\",\r\n  UPDATE_UPLOAD_PROGRESS : type+ \"UPDATE_UPLOAD_PROGRESS\",\r\n\r\n  UPDATE: type + \"UPDATE\",\r\n};\r\n\r\nexport const update = (data) => {\r\n  return {\r\n    type: actions.UPDATE,\r\n    payload: { data },\r\n  };\r\n};\r\n\r\nexport function readFromDatabase() {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.READ_FROM_DATABASE });\r\n    return new Promise(async (resolve, reject) => {\r\n      try {\r\n        const uid = getState().Auth.user.uid;\r\n        const user = await userDataServices.readOwnInfo({ uid });\r\n        resolve(user);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_SUCCESS,\r\n          payload: { data: user },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.READ_FROM_DATABASE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function submitToBackend(data, actionName) {\r\n  return (dispatch, getState) => {\r\n    dispatch({ type: actions.SUBMIT_TO_BACKEND });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n\r\n      try {\r\n        switch (actionName) {\r\n          case \"updateProfile\":\r\n            result = await authBackendServices.updateProfile({ data });\r\n\r\n            dispatch({\r\n              type: authActions.BASIC_INFO_UPDATA,\r\n              payload: { data},\r\n            });\r\n            break;\r\n          case \"unionNotificationToken\":\r\n            result = await userBackendServices.unionNotisToken({ data });\r\n            break;\r\n          case \"removeNotificationToken\":\r\n            result = await userBackendServices.removeNotisToken({ data });\r\n            break;\r\n        }\r\n\r\n        resolve(result);\r\n\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.SUBMIT_TO_BACKEND_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n}\r\n\r\nexport function uploadToStorage(data) {\r\n  return (dispatch) => {\r\n    dispatch({ type: actions.UPLOAD_TO_STORAGE });\r\n    return new Promise(async (resolve, reject) => {\r\n      let result = {};\r\n      const { id, file, name } = data;\r\n  \r\n      try {\r\n        result = await userStorageServices\r\n        .uploadFile({ \r\n          id, \r\n          file, \r\n          name,  \r\n          progressListener: snap => {\r\n            const progress = Math.round(\r\n              (snap.bytesTransferred / snap.totalBytes) * 100\r\n            );\r\n            dispatch({\r\n              type: actions.UPDATE_UPLOAD_PROGRESS,\r\n              payload: { data: progress },\r\n            });\r\n          }\r\n        });\r\n        \r\n        resolve(result);\r\n        dispatch({\r\n          type: actions.UPLOAD_TO_STORAGE_SUCCESS,\r\n          payload: { data: result },\r\n        });\r\n\r\n      } catch (error) {\r\n        console.log(error);\r\n        reject(error);\r\n        dispatch({\r\n          type: actions.UPLOAD_TO_STORAGE_ERROR,\r\n          payload: { error },\r\n        });\r\n      }\r\n    });\r\n  };\r\n} \r\n\r\n\r\n\r\nexport default actions;\r\n"]},"metadata":{},"sourceType":"module"}