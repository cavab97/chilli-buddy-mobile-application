{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as database from \"../../utils/helper/database\";\nexport function read(_ref) {\n  var uid = _ref.uid;\n  var ref = \"userPackaging0/\" + uid + \"/notificationPackaging0\";\n  return new Promise(function (resolve, reject) {\n    database.readTable({\n      ref: ref\n    }).orderBy(\"created.at\", \"desc\").get().then(function (QuerySnapshot) {\n      var result = [];\n      QuerySnapshot.forEach(function (snapshot) {\n        var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n          id: snapshot.id\n        });\n\n        var parent = database.processData({\n          data: data\n        });\n        var created = database.processData({\n          data: data.created\n        });\n        var deleted = database.processData({\n          data: data.deleted\n        });\n        var updated = database.processData({\n          data: data.updated\n        });\n\n        var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n          created: created,\n          deleted: deleted,\n          updated: updated\n        });\n\n        result.push(processedData);\n      });\n      resolve(result);\n    }).catch(function (error) {\n      reject(error);\n    });\n  });\n}\n\nvar objectsListener = function objectsListener() {};\n\nexport function listenObjects(_ref2) {\n  var _ref2$uid = _ref2.uid,\n      uid = _ref2$uid === void 0 ? null : _ref2$uid,\n      _ref2$updateListener = _ref2.updateListener,\n      updateListener = _ref2$updateListener === void 0 ? function () {} : _ref2$updateListener;\n  objectsListener = database.readTable({\n    ref: \"userPackaging0/\" + uid + \"/notificationPackaging0\"\n  }).orderBy(\"created.at\", \"desc\").limit(20).onSnapshot(function (QuerySnapshot) {\n    var result = [];\n    QuerySnapshot.forEach(function (snapshot) {\n      var data = _objectSpread(_objectSpread({}, snapshot.data()), {}, {\n        id: snapshot.id\n      });\n\n      var parent = database.processData({\n        data: data\n      });\n      var created = database.processData({\n        data: data.created\n      });\n      var deleted = database.processData({\n        data: data.deleted\n      });\n      var updated = database.processData({\n        data: data.updated\n      });\n\n      var processedData = _objectSpread(_objectSpread({}, parent), {}, {\n        created: created,\n        deleted: deleted,\n        updated: updated\n      });\n\n      result.push(processedData);\n    });\n    updateListener(result);\n  });\n}\nexport function unlistenObjects() {\n  objectsListener();\n}","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/marslab-library-react-native/services/database/notification.js"],"names":["database","read","uid","ref","Promise","resolve","reject","readTable","orderBy","get","then","QuerySnapshot","result","forEach","snapshot","data","id","parent","processData","created","deleted","updated","processedData","push","catch","error","objectsListener","listenObjects","updateListener","limit","onSnapshot","unlistenObjects"],"mappings":"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","sourcesContent":["import * as database from \"../../utils/helper/database\";\r\n\r\nexport function read({uid}) {\r\n    const ref = `userPackaging0/${uid}/notificationPackaging0`;\r\n    return new Promise((resolve, reject) => {\r\n        database\r\n            .readTable({ref})\r\n            .orderBy(\"created.at\",\"desc\")\r\n            .get()\r\n            .then(QuerySnapshot => {\r\n                const result = [];\r\n                QuerySnapshot.forEach(snapshot => {\r\n                  const data = {\r\n                    ...snapshot.data(),\r\n                    id: snapshot.id\r\n                  };\r\n        \r\n                  const parent = database.processData({ data });\r\n                  const created = database.processData({ data: data.created });\r\n                  const deleted = database.processData({ data: data.deleted });\r\n                  const updated = database.processData({ data: data.updated });\r\n        \r\n                  const processedData = { ...parent, created, deleted, updated };\r\n        \r\n                  result.push(processedData);\r\n                });\r\n                resolve(result);\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n}\r\n\r\nlet objectsListener = () => {};\r\n\r\nexport function listenObjects({uid = null, updateListener = () => {} }) {\r\n  objectsListener = database\r\n    .readTable({ ref: `userPackaging0/${uid}/notificationPackaging0` })\r\n    .orderBy(\"created.at\",\"desc\")\r\n    .limit(20)\r\n    .onSnapshot((QuerySnapshot) => {\r\n      const result = [];\r\n      QuerySnapshot.forEach((snapshot) => {\r\n        const data = {\r\n          ...snapshot.data(),\r\n          id: snapshot.id,\r\n        };\r\n\r\n        const parent = database.processData({ data });\r\n        const created = database.processData({ data: data.created });\r\n        const deleted = database.processData({ data: data.deleted });\r\n        const updated = database.processData({ data: data.updated });\r\n\r\n        const processedData = { ...parent, created, deleted, updated };\r\n\r\n        result.push(processedData);\r\n      });\r\n\r\n      updateListener(result);\r\n    });\r\n}\r\n\r\nexport function unlistenObjects() {\r\n  objectsListener();\r\n}"]},"metadata":{},"sourceType":"module"}