{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport store from \"../../redux/store\";\nimport { submitToBackend as submitUserRequest } from \"../../redux/user/action\";\nimport * as systemAction from \"../../redux/system/actions\";\nimport customOnLogOut from \"../../../routes/onLogOut\";\nexport default onLogOut = function onLogOut() {\n  return new Promise(function _callee(resolve, reject) {\n    var notification_token, removeNotificationListener, removeNotificationToken;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            notification_token = store.getState().System.notification_token;\n            removeNotificationListener = store.dispatch(systemAction.notification_Close());\n            removeNotificationToken = notification_token && store.dispatch(submitUserRequest({\n              notificationToken: [notification_token]\n            }, \"removeNotificationToken\"));\n            customOnLogOut;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Promise.all([removeNotificationListener, removeNotificationToken, customOnLogOut]).then(function () {\n              resolve({\n                status: \"success\"\n              });\n            }).catch(function (error) {\n              reject(error);\n            }));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};","map":{"version":3,"sources":["C:/Users/limwe/Documents/application/gogogain-app/gogogain-user/src/marslab-library-react-native/routes/onLogOut/index.js"],"names":["store","submitToBackend","submitUserRequest","systemAction","customOnLogOut","onLogOut","Promise","resolve","reject","notification_token","getState","System","removeNotificationListener","dispatch","notification_Close","removeNotificationToken","notificationToken","all","then","status","catch","error"],"mappings":";AAAA,OAAOA,KAAP;AAEA,SAASC,eAAe,IAAIC,iBAA5B;AAEA,OAAO,KAAKC,YAAZ;AAEA,OAAOC,cAAP;AAEA,eAAeC,QAAQ,GAAG,oBAAM;AAC5B,SAAO,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,kBADO,GACgBT,KAAK,CAACU,QAAN,GAAiBC,MADjC,CACPF,kBADO;AAGTG,YAAAA,0BAHS,GAGoBZ,KAAK,CAACa,QAAN,CAAeV,YAAY,CAACW,kBAAb,EAAf,CAHpB;AAKTC,YAAAA,uBALS,GAKiBN,kBAAkB,IAAIT,KAAK,CAACa,QAAN,CAAeX,iBAAiB,CAAC;AAAEc,cAAAA,iBAAiB,EAAG,CAACP,kBAAD;AAAtB,aAAD,EAAgD,yBAAhD,CAAhC,CALvC;AAOfL,YAAAA,cAAc;AAPC;AAAA,6CASTE,OAAO,CAACW,GAAR,CAAY,CAACL,0BAAD,EAA6BG,uBAA7B,EAAsDX,cAAtD,CAAZ,EACDc,IADC,CACI,YAAM;AACRX,cAAAA,OAAO,CAAC;AAAEY,gBAAAA,MAAM,EAAE;AAAV,eAAD,CAAP;AACH,aAHC,EAIDC,KAJC,CAIK,UAAAC,KAAK,EAAI;AACZb,cAAAA,MAAM,CAACa,KAAD,CAAN;AACH,aANC,CATS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AAiBH,CAlBD","sourcesContent":["import store from \"../../redux/store\";\r\n\r\nimport { submitToBackend as submitUserRequest } from \"../../redux/user/action\";\r\n\r\nimport * as systemAction from \"../../redux/system/actions\";\r\n\r\nimport customOnLogOut from \"../../../routes/onLogOut\"\r\n\r\nexport default onLogOut = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n        const { notification_token } = store.getState().System\r\n\r\n        const removeNotificationListener = store.dispatch(systemAction.notification_Close());\r\n\r\n        const removeNotificationToken = notification_token && store.dispatch(submitUserRequest({ notificationToken : [notification_token] } , \"removeNotificationToken\"));\r\n\r\n        customOnLogOut;\r\n\r\n        await Promise.all([removeNotificationListener, removeNotificationToken, customOnLogOut])\r\n            .then(() => {\r\n                resolve({ status: \"success\" });\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}