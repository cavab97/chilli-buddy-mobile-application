{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport store from \"../../redux/store\";\nimport { readFromDatabase as loadUserInfoFromDatabase, submitToBackend as submitUserRequest } from \"../../redux/user/action\";\nimport { notification_On } from \"../../redux/system/actions\";\nimport customOnLogIn from \"../../../routes/onLogIn\";\nexport default onLogin = function onLogin() {\n  return new Promise(function _callee(resolve, reject) {\n    var notification_token, userInfo, saveNotificationToken, notificationOn;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            notification_token = store.getState().System.notification_token;\n            userInfo = store.dispatch(loadUserInfoFromDatabase());\n            saveNotificationToken = notification_token && store.dispatch(submitUserRequest({\n              notificationToken: [notification_token]\n            }, \"unionNotificationToken\"));\n            notificationOn = store.dispatch(notification_On());\n            customOnLogIn;\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(Promise.all([saveNotificationToken, userInfo, notificationOn, customOnLogIn]).then(function () {\n              resolve({\n                status: \"success\"\n              });\n            }).catch(function (error) {\n              reject(error);\n            }));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  });\n};","map":{"version":3,"sources":["C:/Gogogain/Gogogain - User/src/marslab-library-react-native/routes/onLogIn/index.js"],"names":["store","readFromDatabase","loadUserInfoFromDatabase","submitToBackend","submitUserRequest","notification_On","customOnLogIn","onLogin","Promise","resolve","reject","notification_token","getState","System","userInfo","dispatch","saveNotificationToken","notificationToken","notificationOn","all","then","status","catch","error"],"mappings":";AAAA,OAAOA,KAAP;AAEA,SAASC,gBAAgB,IAAIC,wBAA7B,EAAuDC,eAAe,IAAIC,iBAA1E;AAEA,SAAUC,eAAV;AAEA,OAAOC,aAAP;AAEA,eAAeC,OAAO,GAAG,mBAAM;AAC3B,SAAO,IAAIC,OAAJ,CAAY,iBAAOC,OAAP,EAAgBC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,YAAAA,kBADO,GACgBX,KAAK,CAACY,QAAN,GAAiBC,MADjC,CACPF,kBADO;AAGTG,YAAAA,QAHS,GAGEd,KAAK,CAACe,QAAN,CAAeb,wBAAwB,EAAvC,CAHF;AAITc,YAAAA,qBAJS,GAIeL,kBAAkB,IAAIX,KAAK,CAACe,QAAN,CAAeX,iBAAiB,CAAC;AAAEa,cAAAA,iBAAiB,EAAG,CAACN,kBAAD;AAAtB,aAAD,EAAgD,wBAAhD,CAAhC,CAJrC;AAKTO,YAAAA,cALS,GAKQlB,KAAK,CAACe,QAAN,CAAeV,eAAe,EAA9B,CALR;AAOfC,YAAAA,aAAa;AAPE;AAAA,6CASTE,OAAO,CAACW,GAAR,CAAY,CACdH,qBADc,EAEdF,QAFc,EAGdI,cAHc,EAIdZ,aAJc,CAAZ,EAMDc,IANC,CAMI,YAAM;AAERX,cAAAA,OAAO,CAAC;AAAEY,gBAAAA,MAAM,EAAE;AAAV,eAAD,CAAP;AACH,aATC,EAUDC,KAVC,CAUK,UAAAC,KAAK,EAAI;AACZb,cAAAA,MAAM,CAACa,KAAD,CAAN;AACH,aAZC,CATS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ,CAAP;AAuBH,CAxBD","sourcesContent":["import store from \"../../redux/store\";\r\n\r\nimport { readFromDatabase as loadUserInfoFromDatabase, submitToBackend as submitUserRequest } from \"../../redux/user/action\";\r\n\r\nimport {  notification_On } from \"../../redux/system/actions\";\r\n\r\nimport customOnLogIn from \"../../../routes/onLogIn\"\r\n\r\nexport default onLogin = () => {\r\n    return new Promise(async (resolve, reject) => {\r\n        const { notification_token } = store.getState().System\r\n\r\n        const userInfo = store.dispatch(loadUserInfoFromDatabase());\r\n        const saveNotificationToken = notification_token && store.dispatch(submitUserRequest({ notificationToken : [notification_token] } , \"unionNotificationToken\"));\r\n        const notificationOn = store.dispatch(notification_On());\r\n\r\n        customOnLogIn;\r\n\r\n        await Promise.all([\r\n            saveNotificationToken,\r\n            userInfo,\r\n            notificationOn,\r\n            customOnLogIn\r\n        ])\r\n            .then(() => {\r\n                //console.log(\"login\")\r\n                resolve({ status: \"success\" });\r\n            })\r\n            .catch(error => {\r\n                reject(error);\r\n            });\r\n    });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}